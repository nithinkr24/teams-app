{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { deserializationPolicy } from \"./deserializationPolicy.js\";\nimport { bearerTokenAuthenticationPolicy, createPipelineFromOptions } from \"@azure/core-rest-pipeline\";\nimport { serializationPolicy } from \"./serializationPolicy.js\";\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\nexport function createClientPipeline(options = {}) {\n  const pipeline = createPipelineFromOptions(options !== null && options !== void 0 ? options : {});\n  if (options.credentialOptions) {\n    pipeline.addPolicy(bearerTokenAuthenticationPolicy({\n      credential: options.credentialOptions.credential,\n      scopes: options.credentialOptions.credentialScopes\n    }));\n  }\n  pipeline.addPolicy(serializationPolicy(options.serializationOptions), {\n    phase: \"Serialize\"\n  });\n  pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {\n    phase: \"Deserialize\"\n  });\n  return pipeline;\n}","map":{"version":3,"names":["deserializationPolicy","bearerTokenAuthenticationPolicy","createPipelineFromOptions","serializationPolicy","createClientPipeline","options","pipeline","credentialOptions","addPolicy","credential","scopes","credentialScopes","serializationOptions","phase","deserializationOptions"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-client/dist/browser/pipeline.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { deserializationPolicy } from \"./deserializationPolicy.js\";\nimport { bearerTokenAuthenticationPolicy, createPipelineFromOptions, } from \"@azure/core-rest-pipeline\";\nimport { serializationPolicy } from \"./serializationPolicy.js\";\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\nexport function createClientPipeline(options = {}) {\n    const pipeline = createPipelineFromOptions(options !== null && options !== void 0 ? options : {});\n    if (options.credentialOptions) {\n        pipeline.addPolicy(bearerTokenAuthenticationPolicy({\n            credential: options.credentialOptions.credential,\n            scopes: options.credentialOptions.credentialScopes,\n        }));\n    }\n    pipeline.addPolicy(serializationPolicy(options.serializationOptions), { phase: \"Serialize\" });\n    pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {\n        phase: \"Deserialize\",\n    });\n    return pipeline;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,qBAAqB,QAAQ,4BAA4B;AAClE,SAASC,+BAA+B,EAAEC,yBAAyB,QAAS,2BAA2B;AACvG,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC/C,MAAMC,QAAQ,GAAGJ,yBAAyB,CAACG,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAGA,OAAO,GAAG,CAAC,CAAC,CAAC;EACjG,IAAIA,OAAO,CAACE,iBAAiB,EAAE;IAC3BD,QAAQ,CAACE,SAAS,CAACP,+BAA+B,CAAC;MAC/CQ,UAAU,EAAEJ,OAAO,CAACE,iBAAiB,CAACE,UAAU;MAChDC,MAAM,EAAEL,OAAO,CAACE,iBAAiB,CAACI;IACtC,CAAC,CAAC,CAAC;EACP;EACAL,QAAQ,CAACE,SAAS,CAACL,mBAAmB,CAACE,OAAO,CAACO,oBAAoB,CAAC,EAAE;IAAEC,KAAK,EAAE;EAAY,CAAC,CAAC;EAC7FP,QAAQ,CAACE,SAAS,CAACR,qBAAqB,CAACK,OAAO,CAACS,sBAAsB,CAAC,EAAE;IACtED,KAAK,EAAE;EACX,CAAC,CAAC;EACF,OAAOP,QAAQ;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}