{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _ChatComponentsComponent;\nimport { Subject } from 'rxjs';\nimport { ChatClient } from '@azure/communication-chat';\nimport { AzureCommunicationTokenCredential } from '@azure/communication-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nconst _c0 = a0 => ({\n  \"dark-mode\": a0\n});\nconst _c1 = a0 => ({\n  \"own-message\": a0\n});\nfunction ChatComponentsComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵelement(1, \"div\", 12);\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵtext(3, \"Loading messages...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ChatComponentsComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14);\n    i0.ɵɵtext(2, \"\\uD83D\\uDCAC\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4, \"No messages yet. Start the conversation!\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ChatComponentsComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"div\", 16)(2, \"div\", 17);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"div\", 18);\n    i0.ɵɵelementStart(5, \"div\", 19);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const message_r1 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c1, message_r1.sender === ctx_r1.userId));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(message_r1.senderDisplayName || \"Unknown\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"innerHTML\", message_r1.content, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.formatMessageTime(message_r1.createdOn));\n  }\n}\nexport class ChatComponentsComponent {\n  constructor() {\n    this.isDarkMode = false;\n    this.threadId = '';\n    this.userId = '';\n    this.token = '';\n    this.endpointUrl = '';\n    this.displayName = '';\n    this.destroy$ = new Subject();\n    this.messages = [];\n    this.messageText = '';\n    this.isLoading = false;\n    this.canSendMessage = false;\n  }\n  ngOnInit() {\n    console.log('ChatComponentsComponent ngOnInit with inputs:', {\n      threadId: this.threadId,\n      userId: this.userId,\n      hasToken: !!this.token,\n      hasEndpointUrl: !!this.endpointUrl,\n      displayName: this.displayName\n    });\n    // Check if we have all required inputs\n    if (this.threadId && this.userId && this.token && this.endpointUrl && this.displayName) {\n      console.log('All required inputs available, initializing chat');\n      this.initializeChatThreadClient();\n      this.loadMessages();\n    } else {\n      console.log('Some required inputs are missing, waiting for changes');\n    }\n    // Add window resize listener for better responsiveness\n    window.addEventListener('resize', this.handleResize.bind(this));\n    // Add real-time message listener\n    window.addEventListener('messageReceived', this.handleMessageReceived.bind(this));\n    // Log component state\n    console.log('ChatComponentsComponent initialized with threadId:', this.threadId);\n  }\n  handleMessageReceived(event) {\n    const customEvent = event;\n    const {\n      threadId,\n      event: messageEvent\n    } = customEvent.detail;\n    // Only update if the message is for the current thread\n    if (threadId === this.threadId) {\n      console.log('Real-time message received for current thread:', threadId);\n      this.refreshMessages();\n    }\n  }\n  handleResize() {\n    // Ensure input is visible after resize\n    this.ensureInputVisible();\n  }\n  ngOnChanges(changes) {\n    console.log('ChatComponentsComponent ngOnChanges:', changes);\n    // Check if threadId has changed\n    if (changes['threadId'] && !changes['threadId'].firstChange) {\n      const newThreadId = changes['threadId'].currentValue;\n      const previousThreadId = changes['threadId'].previousValue;\n      if (newThreadId && newThreadId !== previousThreadId) {\n        console.log('Thread changed from', previousThreadId, 'to', newThreadId);\n        this.handleThreadChange(newThreadId);\n      }\n    }\n    // Check if other critical inputs have changed\n    if (changes['userId'] || changes['token'] || changes['endpointUrl'] || changes['displayName']) {\n      var _changes$userId, _changes$token, _changes$endpointUrl, _changes$displayName;\n      const newUserId = ((_changes$userId = changes['userId']) === null || _changes$userId === void 0 ? void 0 : _changes$userId.currentValue) || this.userId;\n      const newToken = ((_changes$token = changes['token']) === null || _changes$token === void 0 ? void 0 : _changes$token.currentValue) || this.token;\n      const newEndpointUrl = ((_changes$endpointUrl = changes['endpointUrl']) === null || _changes$endpointUrl === void 0 ? void 0 : _changes$endpointUrl.currentValue) || this.endpointUrl;\n      const newDisplayName = ((_changes$displayName = changes['displayName']) === null || _changes$displayName === void 0 ? void 0 : _changes$displayName.currentValue) || this.displayName;\n      if (newUserId && newToken && newEndpointUrl && this.threadId && newDisplayName) {\n        console.log('Critical inputs changed, reinitializing chat');\n        this.handleThreadChange(this.threadId);\n      }\n    }\n  }\n  handleThreadChange(newThreadId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log('Handling thread change to:', newThreadId);\n      // Clear previous state immediately\n      _this.messages = [];\n      _this.messageText = '';\n      _this.isLoading = true;\n      _this.canSendMessage = false;\n      // Dispose of old chat thread client\n      _this.disposeChatThreadClient();\n      // Wait a bit to ensure UI updates\n      yield new Promise(resolve => setTimeout(resolve, 100));\n      // Initialize new thread\n      try {\n        yield _this.initializeChatThreadClient();\n        if (_this.chatThreadClient) {\n          yield _this.loadMessages();\n        }\n      } catch (error) {\n        console.error('Failed to initialize new thread:', error);\n        _this.isLoading = false;\n      }\n    })();\n  }\n  disposeChatThreadClient() {\n    if (this.chatThreadClient) {\n      console.log('Disposing of old chat thread client');\n      // Note: ChatThreadClient doesn't have a dispose method, but we can clear the reference\n      this.chatThreadClient = undefined;\n    }\n  }\n  // Public method to manually trigger message loading\n  refreshMessages() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      console.log('Manually refreshing messages');\n      if (_this2.chatThreadClient) {\n        yield _this2.loadMessages();\n      } else {\n        console.log('No chat thread client available, reinitializing first');\n        yield _this2.initializeChatThreadClient();\n        if (_this2.chatThreadClient) {\n          yield _this2.loadMessages();\n        }\n      }\n    })();\n  }\n  // Public method to force refresh for current thread\n  forceRefreshMessages() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      console.log('Force refreshing messages for thread:', _this3.threadId);\n      // Clear current messages and reload\n      _this3.messages = [];\n      _this3.isLoading = true;\n      try {\n        yield _this3.initializeChatThreadClient();\n        if (_this3.chatThreadClient) {\n          yield _this3.loadMessages();\n        }\n      } catch (error) {\n        console.error('Failed to force refresh messages:', error);\n        _this3.isLoading = false;\n      }\n    })();\n  }\n  // Method to ensure input box is visible\n  ensureInputVisible() {\n    // Scroll to bottom to ensure input is visible\n    setTimeout(() => {\n      const chatContainer = document.querySelector('.chat-components-container');\n      if (chatContainer) {\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n      }\n    }, 100);\n  }\n  // Method to resolve chat thread\n  resolveChatThread() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this4.chatThreadClient) {\n        console.error('No chat thread client available to resolve thread');\n        return;\n      }\n      try {\n        console.log('Resolving chat thread:', _this4.threadId);\n        // Disable send button during resolve\n        _this4.canSendMessage = false;\n        // Update the chat thread metadata to notify the CustomerApp that the chat has been resolved\n        yield _this4.chatThreadClient.updateProperties({\n          metadata: {\n            isResolvedByAgent: 'true'\n          }\n        });\n        console.log('Chat thread metadata updated successfully');\n        // Show success message\n        _this4.showSuccessMessage('Chat resolved successfully');\n        // Re-enable send button\n        _this4.canSendMessage = true;\n      } catch (error) {\n        console.error('Failed to update chat thread metadata:', error);\n        _this4.canSendMessage = true;\n        _this4.showErrorMessage('Failed to resolve chat. Please try again.');\n      }\n    })();\n  }\n  showSuccessMessage(message) {\n    // Create a temporary success message display\n    const successDiv = document.createElement('div');\n    successDiv.className = 'success-message';\n    successDiv.textContent = message;\n    successDiv.style.cssText = `\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: #107c10;\n      color: white;\n      padding: 12px 20px;\n      border-radius: 4px;\n      z-index: 1000;\n      font-size: 14px;\n    `;\n    document.body.appendChild(successDiv);\n    // Remove after 3 seconds\n    setTimeout(() => {\n      if (successDiv.parentNode) {\n        successDiv.parentNode.removeChild(successDiv);\n      }\n    }, 3000);\n  }\n  ngOnDestroy() {\n    console.log('ChatComponentsComponent destroying, cleaning up resources');\n    // Dispose of chat thread client\n    this.disposeChatThreadClient();\n    // Clear messages and state\n    this.messages = [];\n    this.messageText = '';\n    this.isLoading = false;\n    this.canSendMessage = false;\n    // Complete destroy subject\n    this.destroy$.next();\n    this.destroy$.complete();\n    // Remove window resize listener\n    window.removeEventListener('resize', this.handleResize.bind(this));\n    // Remove real-time message listener\n    window.removeEventListener('messageReceived', this.handleMessageReceived.bind(this));\n  }\n  initializeChatThreadClient() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        console.log('Initializing chat thread client with:', {\n          endpointUrl: _this5.endpointUrl,\n          threadId: _this5.threadId,\n          userId: _this5.userId,\n          displayName: _this5.displayName\n        });\n        if (!_this5.endpointUrl || !_this5.token || !_this5.threadId || !_this5.userId) {\n          console.error('Missing required parameters for chat initialization');\n          _this5.canSendMessage = false;\n          return;\n        }\n        // Validate that we're still working with the same thread (in case of rapid changes)\n        const currentThreadId = _this5.threadId;\n        const tokenCredential = new AzureCommunicationTokenCredential(_this5.token);\n        // Create a proper chat client first to ensure user context is set\n        const chatClient = new ChatClient(_this5.endpointUrl, tokenCredential);\n        // Start real-time notifications\n        yield chatClient.startRealtimeNotifications();\n        // Verify thread ID hasn't changed during initialization\n        if (_this5.threadId !== currentThreadId) {\n          console.log('Thread ID changed during initialization, aborting');\n          return;\n        }\n        // Now create the thread client\n        _this5.chatThreadClient = chatClient.getChatThreadClient(_this5.threadId);\n        _this5.canSendMessage = true;\n        console.log('Chat thread client initialized successfully for thread:', _this5.threadId);\n      } catch (error) {\n        console.error('Failed to initialize chat thread client:', error);\n        _this5.canSendMessage = false;\n        _this5.chatThreadClient = undefined;\n      }\n    })();\n  }\n  loadMessages() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this6.chatThreadClient) {\n        console.log('No chat thread client available, cannot load messages');\n        return;\n      }\n      // Validate that we're still working with the same thread\n      const currentThreadId = _this6.threadId;\n      try {\n        _this6.isLoading = true;\n        console.log('Loading messages for thread:', _this6.threadId);\n        const messages = yield _this6.chatThreadClient.listMessages().byPage().next();\n        // Check if thread ID changed during message loading\n        if (_this6.threadId !== currentThreadId) {\n          console.log('Thread ID changed during message loading, aborting');\n          return;\n        }\n        console.log('Raw messages from ACS:', messages.value);\n        console.log('Current user ID:', _this6.userId);\n        console.log('Current user display name:', _this6.displayName);\n        if (!messages.value || messages.value.length === 0) {\n          console.log('No messages found in thread');\n          _this6.messages = [];\n          // Ensure input is visible even when no messages\n          _this6.ensureInputVisible();\n          return;\n        }\n        const messageItems = messages.value.filter(msg => {\n          var _msg$content;\n          // Filter out system messages and empty content\n          return ((_msg$content = msg.content) === null || _msg$content === void 0 ? void 0 : _msg$content.message) && msg.content.message.trim().length > 0;\n        }).map(msg => {\n          var _msg$content2;\n          // Extract sender information\n          let senderId = '';\n          let senderDisplayName = 'Unknown';\n          console.log('Processing message:', msg);\n          console.log('Message sender:', msg.sender);\n          console.log('Message senderDisplayName:', msg.senderDisplayName);\n          if (msg.sender) {\n            // Check if it's a CommunicationUserKind\n            if ('communicationUserId' in msg.sender) {\n              senderId = msg.sender.communicationUserId;\n              console.log('Found communicationUserId:', senderId);\n              // If it's the current user, use their display name\n              if (senderId === _this6.userId) {\n                senderDisplayName = _this6.displayName || 'You';\n                console.log('Current user message, using displayName:', senderDisplayName);\n              } else {\n                // For other users, try to get their display name from the message\n                // In ACS, customer messages might not have senderDisplayName set\n                senderDisplayName = msg.senderDisplayName || 'Customer';\n                console.log('Other user message, using senderDisplayName:', senderDisplayName);\n              }\n            } else if ('kind' in msg.sender && msg.sender.kind === 'communicationUser') {\n              senderId = msg.sender.communicationUserId;\n              console.log('Found communicationUser kind with ID:', senderId);\n              if (senderId === _this6.userId) {\n                senderDisplayName = _this6.displayName || 'You';\n              } else {\n                senderDisplayName = msg.senderDisplayName || 'Customer';\n              }\n            } else {\n              console.log('Unknown sender type:', msg.sender);\n              // Try to extract any available information\n              if (msg.senderDisplayName) {\n                senderDisplayName = msg.senderDisplayName;\n              }\n            }\n          }\n          // If we still don't have a proper sender ID, try to extract it from the message\n          if (!senderId && msg.sender) {\n            // Try different ways to extract the sender ID\n            if (typeof msg.sender === 'string') {\n              senderId = msg.sender;\n            } else if (typeof msg.sender === 'object') {\n              // Try to get any ID-like property\n              const senderObj = msg.sender;\n              senderId = senderObj.id || senderObj.communicationUserId || senderObj.userId || '';\n            }\n          }\n          const messageItem = {\n            id: msg.id,\n            content: ((_msg$content2 = msg.content) === null || _msg$content2 === void 0 ? void 0 : _msg$content2.message) || '',\n            sender: senderId,\n            senderDisplayName: senderDisplayName,\n            createdOn: msg.createdOn,\n            type: 'text' // Default to text type\n          };\n          console.log('Created message item:', messageItem);\n          return messageItem;\n        });\n        // Sort messages by creation time\n        messageItems.sort((a, b) => a.createdOn.getTime() - b.createdOn.getTime());\n        _this6.messages = messageItems;\n        console.log('Final processed messages:', messageItems);\n        console.log('Messages loaded successfully, count:', messageItems.length);\n        // Ensure input is visible after messages are loaded\n        _this6.ensureInputVisible();\n      } catch (error) {\n        console.error('Failed to load messages:', error);\n        _this6.messages = [];\n        // Ensure input is visible even on error\n        _this6.ensureInputVisible();\n        // Show user-friendly error message\n        _this6.showErrorMessage('Failed to load messages. Please refresh and try again.');\n      } finally {\n        _this6.isLoading = false;\n      }\n    })();\n  }\n  sendMessage() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this7.messageText.trim() || !_this7.chatThreadClient || !_this7.canSendMessage) {\n        console.log('Cannot send message:', {\n          hasText: !!_this7.messageText.trim(),\n          hasClient: !!_this7.chatThreadClient,\n          canSend: _this7.canSendMessage\n        });\n        return;\n      }\n      const messageContent = _this7.messageText.trim();\n      try {\n        console.log('Sending message:', messageContent);\n        _this7.messageText = '';\n        // Disable send button temporarily\n        _this7.canSendMessage = false;\n        // Send the message\n        yield _this7.chatThreadClient.sendMessage({\n          content: messageContent\n        });\n        console.log('Message sent successfully');\n        // Reload messages to show the new message\n        yield _this7.loadMessages();\n        // Re-enable send button\n        _this7.canSendMessage = true;\n      } catch (error) {\n        console.error('Failed to send message:', error);\n        // Restore the message text if sending failed\n        _this7.messageText = messageContent;\n        // Re-enable send button\n        _this7.canSendMessage = true;\n        // Show user-friendly error message\n        _this7.showErrorMessage('Failed to send message. Please try again.');\n      }\n    })();\n  }\n  showErrorMessage(message) {\n    // Create a temporary error message display\n    const errorDiv = document.createElement('div');\n    errorDiv.className = 'error-message';\n    errorDiv.textContent = message;\n    errorDiv.style.cssText = `\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: #d13438;\n      color: white;\n      padding: 12px 20px;\n      border-radius: 4px;\n      z-index: 1000;\n      font-size: 14px;\n    `;\n    document.body.appendChild(errorDiv);\n    // Remove after 3 seconds\n    setTimeout(() => {\n      if (errorDiv.parentNode) {\n        errorDiv.parentNode.removeChild(errorDiv);\n      }\n    }, 3000);\n  }\n  formatMessageTime(date) {\n    return new Date(date).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n}\n_ChatComponentsComponent = ChatComponentsComponent;\n_ChatComponentsComponent.ɵfac = function ChatComponentsComponent_Factory(t) {\n  return new (t || _ChatComponentsComponent)();\n};\n_ChatComponentsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _ChatComponentsComponent,\n  selectors: [[\"app-chat-components\"]],\n  inputs: {\n    isDarkMode: \"isDarkMode\",\n    threadId: \"threadId\",\n    userId: \"userId\",\n    token: \"token\",\n    endpointUrl: \"endpointUrl\",\n    displayName: \"displayName\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 12,\n  vars: 9,\n  consts: [[1, \"chat-components-container\", 3, \"ngClass\"], [1, \"chat-messages\"], [1, \"message-list\"], [\"class\", \"loading-messages\", 4, \"ngIf\"], [\"class\", \"no-messages\", 4, \"ngIf\"], [\"class\", \"message-item\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"chat-input\"], [1, \"input-container\"], [\"type\", \"text\", \"placeholder\", \"Type a message...\", 1, \"message-input\", 3, \"ngModelChange\", \"keyup.enter\", \"ngModel\", \"disabled\"], [1, \"send-button\", 3, \"click\", \"disabled\"], [1, \"send-text\"], [1, \"loading-messages\"], [1, \"loading-spinner\"], [1, \"no-messages\"], [1, \"no-messages-icon\"], [1, \"message-item\", 3, \"ngClass\"], [1, \"message-content\"], [1, \"message-sender\"], [1, \"message-text\", 3, \"innerHTML\"], [1, \"message-time\"]],\n  template: function ChatComponentsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵtemplate(3, ChatComponentsComponent_div_3_Template, 4, 0, \"div\", 3)(4, ChatComponentsComponent_div_4_Template, 5, 0, \"div\", 4)(5, ChatComponentsComponent_div_5_Template, 7, 6, \"div\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"div\", 6)(7, \"div\", 7)(8, \"input\", 8);\n      i0.ɵɵtwoWayListener(\"ngModelChange\", function ChatComponentsComponent_Template_input_ngModelChange_8_listener($event) {\n        i0.ɵɵtwoWayBindingSet(ctx.messageText, $event) || (ctx.messageText = $event);\n        return $event;\n      });\n      i0.ɵɵlistener(\"keyup.enter\", function ChatComponentsComponent_Template_input_keyup_enter_8_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function ChatComponentsComponent_Template_button_click_9_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵelementStart(10, \"span\", 10);\n      i0.ɵɵtext(11, \"Send\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx.isDarkMode));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"ngIf\", !ctx.isLoading && ctx.messages.length === 0);\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtwoWayProperty(\"ngModel\", ctx.messageText);\n      i0.ɵɵproperty(\"disabled\", !ctx.canSendMessage);\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"disabled\", !ctx.canSendMessage || !ctx.messageText.trim());\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n  styles: [\"[_nghost-%COMP%] {\\n    --font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\\n    --font-size-xs: 11px;\\n    --font-size-sm: 12px;\\n    --font-size-md: 14px;\\n    --font-size-lg: 16px;\\n    --line-height-normal: 1.5;\\n    --font-weight-normal: 400;\\n    --font-weight-medium: 500;\\n    --font-weight-semibold: 600;\\n}\\n\\n.chat-components-container[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    height: 100vh;\\n    background-color: #ffffff;\\n    min-height: 400px;\\n    overflow: hidden;\\n    font-family: var(--font-family);\\n    font-size: var(--font-size-md);\\n    line-height: var(--line-height-normal);\\n    -webkit-font-smoothing: antialiased;\\n    -moz-osx-font-smoothing: grayscale;\\n}\\n\\n.chat-components-container.dark-mode[_ngcontent-%COMP%] {\\n    background-color: #1b1a19;\\n    color: #ffffff;\\n}\\n\\n.chat-messages[_ngcontent-%COMP%] {\\n    flex: 1;\\n    overflow-y: auto;\\n    padding: 16px;\\n    display: flex;\\n    flex-direction: column;\\n    -webkit-overflow-scrolling: touch;\\n    \\n\\n}\\n\\n.message-list[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 16px;\\n    min-height: -webkit-min-content;\\n    min-height: min-content;\\n}\\n\\n.loading-messages[_ngcontent-%COMP%], .no-messages[_ngcontent-%COMP%] {\\n    text-align: center;\\n    color: #666;\\n    padding: 20px;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    gap: 16px;\\n    flex: 1;\\n    justify-content: center;\\n    min-height: 200px;\\n}\\n\\n.dark-mode[_ngcontent-%COMP%]   .loading-messages[_ngcontent-%COMP%], .dark-mode[_ngcontent-%COMP%]   .no-messages[_ngcontent-%COMP%] {\\n    color: #ccc;\\n}\\n\\n.loading-spinner[_ngcontent-%COMP%] {\\n    width: 32px;\\n    height: 32px;\\n    border: 3px solid #f3f2f1;\\n    border-top: 3px solid #0078d4;\\n    border-radius: 50%;\\n    animation: _ngcontent-%COMP%_spin 1s linear infinite;\\n}\\n\\n.no-messages-icon[_ngcontent-%COMP%] {\\n    font-size: 48px;\\n    opacity: 0.6;\\n}\\n\\n@keyframes _ngcontent-%COMP%_spin {\\n    0% {\\n        transform: rotate(0deg);\\n    }\\n\\n    100% {\\n        transform: rotate(360deg);\\n    }\\n}\\n\\n.message-item[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: flex-start;\\n    margin-bottom: 8px;\\n}\\n\\n.message-item.own-message[_ngcontent-%COMP%] {\\n    justify-content: flex-end;\\n}\\n\\n.message-content[_ngcontent-%COMP%] {\\n    max-width: 70%;\\n    background-color: #f3f2f1;\\n    color: #323130;\\n    padding: 12px 16px;\\n    border-radius: 18px;\\n    border-bottom-left-radius: 4px;\\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\\n}\\n\\n.own-message[_ngcontent-%COMP%]   .message-content[_ngcontent-%COMP%] {\\n    background-color: #0078d4;\\n    color: white;\\n    border-bottom-left-radius: 18px;\\n    border-bottom-right-radius: 4px;\\n}\\n\\n.dark-mode[_ngcontent-%COMP%]   .message-content[_ngcontent-%COMP%] {\\n    background-color: #3b3a39;\\n    color: #ffffff;\\n}\\n\\n.dark-mode[_ngcontent-%COMP%]   .own-message[_ngcontent-%COMP%]   .message-content[_ngcontent-%COMP%] {\\n    background-color: #106ebe;\\n}\\n\\n.message-sender[_ngcontent-%COMP%] {\\n    font-size: var(--font-size-sm);\\n    font-weight: var(--font-weight-semibold);\\n    margin-bottom: 4px;\\n    opacity: 0.8;\\n    letter-spacing: 0.1px;\\n}\\n\\n.message-text[_ngcontent-%COMP%] {\\n    font-size: var(--font-size-md);\\n    margin-bottom: 4px;\\n    line-height: var(--line-height-normal);\\n    word-wrap: break-word;\\n    white-space: pre-wrap;\\n    font-weight: var(--font-weight-normal);\\n}\\n\\n.message-time[_ngcontent-%COMP%] {\\n    font-size: var(--font-size-xs);\\n    opacity: 0.8;\\n    text-align: right;\\n    font-weight: var(--font-weight-normal);\\n    letter-spacing: 0.1px;\\n}\\n\\n.chat-input[_ngcontent-%COMP%] {\\n    padding: 16px;\\n    border-top: 1px solid #e1dfdd;\\n    background-color: #ffffff;\\n    height: 80px;\\n    display: flex;\\n    align-items: center;\\n    box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.05);\\n    flex-shrink: 0;\\n}\\n\\n.dark-mode[_ngcontent-%COMP%]   .chat-input[_ngcontent-%COMP%] {\\n    background-color: #1b1a19;\\n    border-top-color: #3b3a39;\\n    box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.2);\\n}\\n\\n.input-container[_ngcontent-%COMP%] {\\n    display: flex;\\n    gap: 12px;\\n    align-items: center;\\n    width: 100%;\\n    max-width: 100%;\\n}\\n\\n.message-input[_ngcontent-%COMP%] {\\n    flex: 1;\\n    padding: 12px 16px;\\n    border: 1px solid #e1dfdd;\\n    border-radius: 24px;\\n    font-family: var(--font-family);\\n    font-size: var(--font-size-md);\\n    font-weight: var(--font-weight-normal);\\n    line-height: var(--line-height-normal);\\n    outline: none;\\n    transition: border-color 0.2s, box-shadow 0.2s;\\n    min-width: 0;\\n    max-width: 100%;\\n}\\n\\n.dark-mode[_ngcontent-%COMP%]   .message-input[_ngcontent-%COMP%] {\\n    background-color: #3b3a39;\\n    border-color: #605e5c;\\n    color: #ffffff;\\n}\\n\\n.message-input[_ngcontent-%COMP%]:focus {\\n    border-color: #0078d4;\\n    box-shadow: 0 0 0 2px rgba(0, 120, 212, 0.1);\\n}\\n\\n.dark-mode[_ngcontent-%COMP%]   .message-input[_ngcontent-%COMP%]:focus {\\n    border-color: #106ebe;\\n    box-shadow: 0 0 0 2px rgba(16, 110, 190, 0.1);\\n}\\n\\n.message-input[_ngcontent-%COMP%]:disabled {\\n    background-color: #f3f2f1;\\n    color: #605e5c;\\n    cursor: not-allowed;\\n}\\n\\n.dark-mode[_ngcontent-%COMP%]   .message-input[_ngcontent-%COMP%]:disabled {\\n    background-color: #3b3a39;\\n    color: #605e5c;\\n}\\n\\n.send-button[_ngcontent-%COMP%] {\\n    background-color: #0078d4;\\n    color: white;\\n    border: none;\\n    padding: 12px 20px;\\n    border-radius: 24px;\\n    cursor: pointer;\\n    font-family: var(--font-family);\\n    font-size: var(--font-size-md);\\n    font-weight: var(--font-weight-medium);\\n    line-height: var(--line-height-normal);\\n    transition: background-color 0.2s, box-shadow 0.2s;\\n    display: flex;\\n    align-items: center;\\n    gap: 8px;\\n    white-space: nowrap;\\n    min-width: -webkit-fit-content;\\n    min-width: -moz-fit-content;\\n    min-width: fit-content;\\n    flex-shrink: 0;\\n}\\n\\n.dark-mode[_ngcontent-%COMP%]   .send-button[_ngcontent-%COMP%] {\\n    background-color: #106ebe;\\n}\\n\\n.send-button[_ngcontent-%COMP%]:hover:not(:disabled) {\\n    background-color: #106ebe;\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.dark-mode[_ngcontent-%COMP%]   .send-button[_ngcontent-%COMP%]:hover:not(:disabled) {\\n    background-color: #005a9e;\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\\n}\\n\\n.send-button[_ngcontent-%COMP%]:disabled {\\n    background-color: #c8c6c4;\\n    cursor: not-allowed;\\n    opacity: 0.6;\\n}\\n\\n.dark-mode[_ngcontent-%COMP%]   .send-button[_ngcontent-%COMP%]:disabled {\\n    background-color: #605e5c;\\n}\\n\\n.send-icon[_ngcontent-%COMP%] {\\n    font-size: var(--font-size-lg);\\n}\\n\\n.send-text[_ngcontent-%COMP%] {\\n    font-size: var(--font-size-md);\\n    font-weight: var(--font-weight-medium);\\n}\\n\\n\\n\\n@media (max-width: 768px) {\\n    .chat-messages[_ngcontent-%COMP%] {\\n        padding: 12px;\\n        max-height: calc(100vh - 160px);\\n    }\\n\\n    .message-content[_ngcontent-%COMP%] {\\n        max-width: 85%;\\n    }\\n\\n    .chat-input[_ngcontent-%COMP%] {\\n        padding: 12px;\\n        min-height: 70px;\\n    }\\n\\n    .input-container[_ngcontent-%COMP%] {\\n        gap: 8px;\\n    }\\n\\n    .send-button[_ngcontent-%COMP%] {\\n        padding: 10px 16px;\\n    }\\n\\n    .send-text[_ngcontent-%COMP%] {\\n        display: none;\\n    }\\n\\n    .loading-messages[_ngcontent-%COMP%], .no-messages[_ngcontent-%COMP%] {\\n        min-height: 150px;\\n        padding: 16px;\\n    }\\n}\\n\\n@media (max-width: 480px) {\\n    .chat-components-container[_ngcontent-%COMP%] {\\n        min-height: 300px;\\n    }\\n\\n    .chat-messages[_ngcontent-%COMP%] {\\n        padding: 8px;\\n        max-height: calc(100vh - 80px);\\n    }\\n\\n    .message-content[_ngcontent-%COMP%] {\\n        max-width: 90%;\\n        padding: 10px 14px;\\n    }\\n\\n    .message-input[_ngcontent-%COMP%] {\\n        padding: 10px 14px;\\n        font-size: 16px;\\n        \\n\\n    }\\n\\n    .chat-input[_ngcontent-%COMP%] {\\n        padding: 8px;\\n        min-height: 60px;\\n    }\\n\\n    .loading-messages[_ngcontent-%COMP%], .no-messages[_ngcontent-%COMP%] {\\n        min-height: 120px;\\n        padding: 12px;\\n    }\\n}\\n\\n\\n\\n@media screen {\\n    .chat-messages[_ngcontent-%COMP%] {\\n        max-height: calc(100vh - 120px);\\n        \\n\\n        height: auto;\\n        min-height: 100px;\\n    }\\n\\n    .chat-input[_ngcontent-%COMP%] {\\n        position: fixed;\\n        bottom: 0;\\n        left: 0;\\n        right: 0;\\n        background-color: #ffffff;\\n        border-top: 1px solid #e1dfdd;\\n        z-index: 100;\\n        width: 100%;\\n        padding: 12px 16px;\\n    }\\n\\n    .dark-mode[_ngcontent-%COMP%]   .chat-input[_ngcontent-%COMP%] {\\n        background-color: #1b1a19;\\n        border-top-color: #3b3a39;\\n    }\\n\\n    \\n\\n    .chat-components-container[_ngcontent-%COMP%] {\\n        padding-bottom: 80px;\\n    }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n});","map":{"version":3,"names":["Subject","ChatClient","AzureCommunicationTokenCredential","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵproperty","ɵɵpureFunction1","_c1","message_r1","sender","ctx_r1","userId","ɵɵadvance","ɵɵtextInterpolate","senderDisplayName","content","ɵɵsanitizeHtml","formatMessageTime","createdOn","ChatComponentsComponent","constructor","isDarkMode","threadId","token","endpointUrl","displayName","destroy$","messages","messageText","isLoading","canSendMessage","ngOnInit","console","log","hasToken","hasEndpointUrl","initializeChatThreadClient","loadMessages","window","addEventListener","handleResize","bind","handleMessageReceived","event","customEvent","messageEvent","detail","refreshMessages","ensureInputVisible","ngOnChanges","changes","firstChange","newThreadId","currentValue","previousThreadId","previousValue","handleThreadChange","_changes$userId","_changes$token","_changes$endpointUrl","_changes$displayName","newUserId","newToken","newEndpointUrl","newDisplayName","_this","_asyncToGenerator","disposeChatThreadClient","Promise","resolve","setTimeout","chatThreadClient","error","undefined","_this2","forceRefreshMessages","_this3","chatContainer","document","querySelector","scrollTop","scrollHeight","resolveChatThread","_this4","updateProperties","metadata","isResolvedByAgent","showSuccessMessage","showErrorMessage","message","successDiv","createElement","className","textContent","style","cssText","body","appendChild","parentNode","removeChild","ngOnDestroy","next","complete","removeEventListener","_this5","currentThreadId","tokenCredential","chatClient","startRealtimeNotifications","getChatThreadClient","_this6","listMessages","byPage","value","length","messageItems","filter","msg","_msg$content","trim","map","_msg$content2","senderId","communicationUserId","kind","senderObj","id","messageItem","type","sort","a","b","getTime","sendMessage","_this7","hasText","hasClient","canSend","messageContent","errorDiv","date","Date","toLocaleTimeString","hour","minute","selectors","inputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","ChatComponentsComponent_Template","rf","ctx","ɵɵtemplate","ChatComponentsComponent_div_3_Template","ChatComponentsComponent_div_4_Template","ChatComponentsComponent_div_5_Template","ɵɵtwoWayListener","ChatComponentsComponent_Template_input_ngModelChange_8_listener","$event","ɵɵtwoWayBindingSet","ɵɵlistener","ChatComponentsComponent_Template_input_keyup_enter_8_listener","ChatComponentsComponent_Template_button_click_9_listener","_c0","ɵɵtwoWayProperty"],"sources":["D:\\Project\\github-teams\\teams-app-new\\src\\app\\chat\\chat-components\\chat-components.component.ts","D:\\Project\\github-teams\\teams-app-new\\src\\app\\chat\\chat-components\\chat.component.html"],"sourcesContent":["import { Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { ChatThreadClient, ChatMessage, ChatClient } from '@azure/communication-chat';\r\nimport { AzureCommunicationTokenCredential } from '@azure/communication-common';\r\n\r\nexport interface ChatMessageItem {\r\n  id: string;\r\n  content: string;\r\n  sender: string;\r\n  senderDisplayName: string;\r\n  createdOn: Date;\r\n  type: 'text' | 'html';\r\n}\r\n\r\n@Component({\r\n  selector: 'app-chat-components',\r\n  templateUrl: './chat.component.html',\r\n  styleUrl: './chat.component.css'\r\n})\r\nexport class ChatComponentsComponent implements OnInit, OnDestroy, OnChanges {\r\n  @Input() isDarkMode: boolean = false;\r\n  @Input() threadId: string = '';\r\n  @Input() userId: string = '';\r\n  @Input() token: string = '';\r\n  @Input() endpointUrl: string = '';\r\n  @Input() displayName: string = '';\r\n  \r\n  private destroy$ = new Subject<void>();\r\n  \r\n  messages: ChatMessageItem[] = [];\r\n  messageText: string = '';\r\n  isLoading: boolean = false;\r\n  canSendMessage: boolean = false;\r\n  \r\n  private chatThreadClient: ChatThreadClient | undefined;\r\n  \r\n  ngOnInit() {\r\n    console.log('ChatComponentsComponent ngOnInit with inputs:', {\r\n      threadId: this.threadId,\r\n      userId: this.userId,\r\n      hasToken: !!this.token,\r\n      hasEndpointUrl: !!this.endpointUrl,\r\n      displayName: this.displayName\r\n    });\r\n    \r\n    // Check if we have all required inputs\r\n    if (this.threadId && this.userId && this.token && this.endpointUrl && this.displayName) {\r\n      console.log('All required inputs available, initializing chat');\r\n      this.initializeChatThreadClient();\r\n      this.loadMessages();\r\n    } else {\r\n      console.log('Some required inputs are missing, waiting for changes');\r\n    }\r\n    \r\n    // Add window resize listener for better responsiveness\r\n    window.addEventListener('resize', this.handleResize.bind(this));\r\n    \r\n    // Add real-time message listener\r\n    window.addEventListener('messageReceived', this.handleMessageReceived.bind(this) as EventListener);\r\n    \r\n    // Log component state\r\n    console.log('ChatComponentsComponent initialized with threadId:', this.threadId);\r\n  }\r\n  \r\n  private handleMessageReceived(event: Event): void {\r\n    const customEvent = event as CustomEvent;\r\n    const { threadId, event: messageEvent } = customEvent.detail;\r\n    \r\n    // Only update if the message is for the current thread\r\n    if (threadId === this.threadId) {\r\n      console.log('Real-time message received for current thread:', threadId);\r\n      this.refreshMessages();\r\n    }\r\n  }\r\n  \r\n  private handleResize() {\r\n    // Ensure input is visible after resize\r\n    this.ensureInputVisible();\r\n  }\r\n  \r\n  ngOnChanges(changes: SimpleChanges) {\r\n    console.log('ChatComponentsComponent ngOnChanges:', changes);\r\n    \r\n    // Check if threadId has changed\r\n    if (changes['threadId'] && !changes['threadId'].firstChange) {\r\n      const newThreadId = changes['threadId'].currentValue;\r\n      const previousThreadId = changes['threadId'].previousValue;\r\n      \r\n      if (newThreadId && newThreadId !== previousThreadId) {\r\n        console.log('Thread changed from', previousThreadId, 'to', newThreadId);\r\n        this.handleThreadChange(newThreadId);\r\n      }\r\n    }\r\n    \r\n    // Check if other critical inputs have changed\r\n    if (changes['userId'] || changes['token'] || changes['endpointUrl'] || changes['displayName']) {\r\n      const newUserId = changes['userId']?.currentValue || this.userId;\r\n      const newToken = changes['token']?.currentValue || this.token;\r\n      const newEndpointUrl = changes['endpointUrl']?.currentValue || this.endpointUrl;\r\n      const newDisplayName = changes['displayName']?.currentValue || this.displayName;\r\n      \r\n      if (newUserId && newToken && newEndpointUrl && this.threadId && newDisplayName) {\r\n        console.log('Critical inputs changed, reinitializing chat');\r\n        this.handleThreadChange(this.threadId);\r\n      }\r\n    }\r\n  }\r\n  \r\n  private async handleThreadChange(newThreadId: string) {\r\n    console.log('Handling thread change to:', newThreadId);\r\n    \r\n    // Clear previous state immediately\r\n    this.messages = [];\r\n    this.messageText = '';\r\n    this.isLoading = true;\r\n    this.canSendMessage = false;\r\n    \r\n    // Dispose of old chat thread client\r\n    this.disposeChatThreadClient();\r\n    \r\n    // Wait a bit to ensure UI updates\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    // Initialize new thread\r\n    try {\r\n      await this.initializeChatThreadClient();\r\n      if (this.chatThreadClient) {\r\n        await this.loadMessages();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to initialize new thread:', error);\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n  \r\n  private disposeChatThreadClient() {\r\n    if (this.chatThreadClient) {\r\n      console.log('Disposing of old chat thread client');\r\n      // Note: ChatThreadClient doesn't have a dispose method, but we can clear the reference\r\n      this.chatThreadClient = undefined;\r\n    }\r\n  }\r\n  \r\n  // Public method to manually trigger message loading\r\n  public async refreshMessages() {\r\n    console.log('Manually refreshing messages');\r\n    if (this.chatThreadClient) {\r\n      await this.loadMessages();\r\n    } else {\r\n      console.log('No chat thread client available, reinitializing first');\r\n      await this.initializeChatThreadClient();\r\n      if (this.chatThreadClient) {\r\n        await this.loadMessages();\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Public method to force refresh for current thread\r\n  public async forceRefreshMessages() {\r\n    console.log('Force refreshing messages for thread:', this.threadId);\r\n    \r\n    // Clear current messages and reload\r\n    this.messages = [];\r\n    this.isLoading = true;\r\n    \r\n    try {\r\n      await this.initializeChatThreadClient();\r\n      if (this.chatThreadClient) {\r\n        await this.loadMessages();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to force refresh messages:', error);\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n  \r\n  // Method to ensure input box is visible\r\n  public ensureInputVisible() {\r\n    // Scroll to bottom to ensure input is visible\r\n    setTimeout(() => {\r\n      const chatContainer = document.querySelector('.chat-components-container');\r\n      if (chatContainer) {\r\n        chatContainer.scrollTop = chatContainer.scrollHeight;\r\n      }\r\n    }, 100);\r\n  }\r\n  \r\n  // Method to resolve chat thread\r\n  public async resolveChatThread(): Promise<void> {\r\n    if (!this.chatThreadClient) {\r\n      console.error('No chat thread client available to resolve thread');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('Resolving chat thread:', this.threadId);\r\n      \r\n      // Disable send button during resolve\r\n      this.canSendMessage = false;\r\n      \r\n      // Update the chat thread metadata to notify the CustomerApp that the chat has been resolved\r\n      await this.chatThreadClient.updateProperties({ \r\n        metadata: { isResolvedByAgent: 'true' } \r\n      });\r\n      \r\n      console.log('Chat thread metadata updated successfully');\r\n      \r\n      // Show success message\r\n      this.showSuccessMessage('Chat resolved successfully');\r\n      \r\n      // Re-enable send button\r\n      this.canSendMessage = true;\r\n    } catch (error) {\r\n      console.error('Failed to update chat thread metadata:', error);\r\n      this.canSendMessage = true;\r\n      this.showErrorMessage('Failed to resolve chat. Please try again.');\r\n    }\r\n  }\r\n  \r\n  private showSuccessMessage(message: string): void {\r\n    // Create a temporary success message display\r\n    const successDiv = document.createElement('div');\r\n    successDiv.className = 'success-message';\r\n    successDiv.textContent = message;\r\n    successDiv.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      background-color: #107c10;\r\n      color: white;\r\n      padding: 12px 20px;\r\n      border-radius: 4px;\r\n      z-index: 1000;\r\n      font-size: 14px;\r\n    `;\r\n    \r\n    document.body.appendChild(successDiv);\r\n    \r\n    // Remove after 3 seconds\r\n    setTimeout(() => {\r\n      if (successDiv.parentNode) {\r\n        successDiv.parentNode.removeChild(successDiv);\r\n      }\r\n    }, 3000);\r\n  }\r\n  \r\n  ngOnDestroy() {\r\n    console.log('ChatComponentsComponent destroying, cleaning up resources');\r\n    \r\n    // Dispose of chat thread client\r\n    this.disposeChatThreadClient();\r\n    \r\n    // Clear messages and state\r\n    this.messages = [];\r\n    this.messageText = '';\r\n    this.isLoading = false;\r\n    this.canSendMessage = false;\r\n    \r\n    // Complete destroy subject\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n    \r\n    // Remove window resize listener\r\n    window.removeEventListener('resize', this.handleResize.bind(this));\r\n    \r\n    // Remove real-time message listener\r\n    window.removeEventListener('messageReceived', this.handleMessageReceived.bind(this) as EventListener);\r\n  }\r\n  \r\n  private async initializeChatThreadClient() {\r\n    try {\r\n      console.log('Initializing chat thread client with:', {\r\n        endpointUrl: this.endpointUrl,\r\n        threadId: this.threadId,\r\n        userId: this.userId,\r\n        displayName: this.displayName\r\n      });\r\n      \r\n      if (!this.endpointUrl || !this.token || !this.threadId || !this.userId) {\r\n        console.error('Missing required parameters for chat initialization');\r\n        this.canSendMessage = false;\r\n        return;\r\n      }\r\n      \r\n      // Validate that we're still working with the same thread (in case of rapid changes)\r\n      const currentThreadId = this.threadId;\r\n      \r\n      const tokenCredential = new AzureCommunicationTokenCredential(this.token);\r\n      \r\n      // Create a proper chat client first to ensure user context is set\r\n      const chatClient = new ChatClient(this.endpointUrl, tokenCredential);\r\n      \r\n      // Start real-time notifications\r\n      await chatClient.startRealtimeNotifications();\r\n      \r\n      // Verify thread ID hasn't changed during initialization\r\n      if (this.threadId !== currentThreadId) {\r\n        console.log('Thread ID changed during initialization, aborting');\r\n        return;\r\n      }\r\n      \r\n      // Now create the thread client\r\n      this.chatThreadClient = chatClient.getChatThreadClient(this.threadId);\r\n      this.canSendMessage = true;\r\n      \r\n      console.log('Chat thread client initialized successfully for thread:', this.threadId);\r\n    } catch (error) {\r\n      console.error('Failed to initialize chat thread client:', error);\r\n      this.canSendMessage = false;\r\n      this.chatThreadClient = undefined;\r\n    }\r\n  }\r\n  \r\n  private async loadMessages() {\r\n    if (!this.chatThreadClient) {\r\n      console.log('No chat thread client available, cannot load messages');\r\n      return;\r\n    }\r\n    \r\n    // Validate that we're still working with the same thread\r\n    const currentThreadId = this.threadId;\r\n    \r\n    try {\r\n      this.isLoading = true;\r\n      console.log('Loading messages for thread:', this.threadId);\r\n      \r\n      const messages = await this.chatThreadClient.listMessages().byPage().next();\r\n      \r\n      // Check if thread ID changed during message loading\r\n      if (this.threadId !== currentThreadId) {\r\n        console.log('Thread ID changed during message loading, aborting');\r\n        return;\r\n      }\r\n      \r\n      console.log('Raw messages from ACS:', messages.value);\r\n      console.log('Current user ID:', this.userId);\r\n      console.log('Current user display name:', this.displayName);\r\n      \r\n      if (!messages.value || messages.value.length === 0) {\r\n        console.log('No messages found in thread');\r\n        this.messages = [];\r\n        // Ensure input is visible even when no messages\r\n        this.ensureInputVisible();\r\n        return;\r\n      }\r\n      \r\n      const messageItems: ChatMessageItem[] = messages.value\r\n        .filter((msg: ChatMessage) => {\r\n          // Filter out system messages and empty content\r\n          return msg.content?.message && msg.content.message.trim().length > 0;\r\n        })\r\n        .map((msg: ChatMessage) => {\r\n          // Extract sender information\r\n          let senderId = '';\r\n          let senderDisplayName = 'Unknown';\r\n          \r\n          console.log('Processing message:', msg);\r\n          console.log('Message sender:', msg.sender);\r\n          console.log('Message senderDisplayName:', msg.senderDisplayName);\r\n          \r\n          if (msg.sender) {\r\n            // Check if it's a CommunicationUserKind\r\n            if ('communicationUserId' in msg.sender) {\r\n              senderId = msg.sender.communicationUserId;\r\n              console.log('Found communicationUserId:', senderId);\r\n              // If it's the current user, use their display name\r\n              if (senderId === this.userId) {\r\n                senderDisplayName = this.displayName || 'You';\r\n                console.log('Current user message, using displayName:', senderDisplayName);\r\n              } else {\r\n                // For other users, try to get their display name from the message\r\n                // In ACS, customer messages might not have senderDisplayName set\r\n                senderDisplayName = msg.senderDisplayName || 'Customer';\r\n                console.log('Other user message, using senderDisplayName:', senderDisplayName);\r\n              }\r\n            } else if ('kind' in msg.sender && (msg.sender as any).kind === 'communicationUser') {\r\n              senderId = (msg.sender as any).communicationUserId;\r\n              console.log('Found communicationUser kind with ID:', senderId);\r\n              if (senderId === this.userId) {\r\n                senderDisplayName = this.displayName || 'You';\r\n              } else {\r\n                senderDisplayName = msg.senderDisplayName || 'Customer';\r\n              }\r\n            } else {\r\n              console.log('Unknown sender type:', msg.sender);\r\n              // Try to extract any available information\r\n              if (msg.senderDisplayName) {\r\n                senderDisplayName = msg.senderDisplayName;\r\n              }\r\n            }\r\n          }\r\n          \r\n          // If we still don't have a proper sender ID, try to extract it from the message\r\n          if (!senderId && msg.sender) {\r\n            // Try different ways to extract the sender ID\r\n            if (typeof msg.sender === 'string') {\r\n              senderId = msg.sender;\r\n            } else if (typeof msg.sender === 'object') {\r\n              // Try to get any ID-like property\r\n              const senderObj = msg.sender as any;\r\n              senderId = senderObj.id || senderObj.communicationUserId || senderObj.userId || '';\r\n            }\r\n          }\r\n          \r\n          const messageItem = {\r\n            id: msg.id,\r\n            content: msg.content?.message || '',\r\n            sender: senderId,\r\n            senderDisplayName: senderDisplayName,\r\n            createdOn: msg.createdOn,\r\n            type: 'text' // Default to text type\r\n          };\r\n          \r\n          console.log('Created message item:', messageItem);\r\n          return messageItem;\r\n        });\r\n      \r\n      // Sort messages by creation time\r\n      messageItems.sort((a, b) => a.createdOn.getTime() - b.createdOn.getTime());\r\n      this.messages = messageItems;\r\n      \r\n      console.log('Final processed messages:', messageItems);\r\n      console.log('Messages loaded successfully, count:', messageItems.length);\r\n      \r\n      // Ensure input is visible after messages are loaded\r\n      this.ensureInputVisible();\r\n    } catch (error) {\r\n      console.error('Failed to load messages:', error);\r\n      this.messages = [];\r\n      // Ensure input is visible even on error\r\n      this.ensureInputVisible();\r\n      \r\n      // Show user-friendly error message\r\n      this.showErrorMessage('Failed to load messages. Please refresh and try again.');\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n  \r\n  async sendMessage() {\r\n    if (!this.messageText.trim() || !this.chatThreadClient || !this.canSendMessage) {\r\n      console.log('Cannot send message:', {\r\n        hasText: !!this.messageText.trim(),\r\n        hasClient: !!this.chatThreadClient,\r\n        canSend: this.canSendMessage\r\n      });\r\n      return;\r\n    }\r\n    \r\n    const messageContent = this.messageText.trim();\r\n    \r\n    try {\r\n      console.log('Sending message:', messageContent);\r\n      this.messageText = '';\r\n      \r\n      // Disable send button temporarily\r\n      this.canSendMessage = false;\r\n      \r\n      // Send the message\r\n      await this.chatThreadClient.sendMessage({\r\n        content: messageContent\r\n      });\r\n      \r\n      console.log('Message sent successfully');\r\n      \r\n      // Reload messages to show the new message\r\n      await this.loadMessages();\r\n      \r\n      // Re-enable send button\r\n      this.canSendMessage = true;\r\n    } catch (error) {\r\n      console.error('Failed to send message:', error);\r\n      // Restore the message text if sending failed\r\n      this.messageText = messageContent;\r\n      // Re-enable send button\r\n      this.canSendMessage = true;\r\n      \r\n      // Show user-friendly error message\r\n      this.showErrorMessage('Failed to send message. Please try again.');\r\n    }\r\n  }\r\n  \r\n  private showErrorMessage(message: string): void {\r\n    // Create a temporary error message display\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.className = 'error-message';\r\n    errorDiv.textContent = message;\r\n    errorDiv.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      background-color: #d13438;\r\n      color: white;\r\n      padding: 12px 20px;\r\n      border-radius: 4px;\r\n      z-index: 1000;\r\n      font-size: 14px;\r\n    `;\r\n    \r\n    document.body.appendChild(errorDiv);\r\n    \r\n    // Remove after 3 seconds\r\n    setTimeout(() => {\r\n      if (errorDiv.parentNode) {\r\n        errorDiv.parentNode.removeChild(errorDiv);\r\n      }\r\n    }, 3000);\r\n  }\r\n  \r\n  formatMessageTime(date: Date): string {\r\n    return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  }\r\n}\r\n","<div class=\"chat-components-container\" [ngClass]=\"{ 'dark-mode': isDarkMode }\">\r\n    <div class=\"chat-messages\">\r\n        <div class=\"message-list\">\r\n            <div *ngIf=\"isLoading\" class=\"loading-messages\">\r\n                <div class=\"loading-spinner\"></div>\r\n                <div>Loading messages...</div>\r\n            </div>\r\n            <div *ngIf=\"!isLoading && messages.length === 0\" class=\"no-messages\">\r\n                <div class=\"no-messages-icon\">💬</div>\r\n                <div>No messages yet. Start the conversation!</div>\r\n            </div>\r\n            <div *ngFor=\"let message of messages\" class=\"message-item\"\r\n                [ngClass]=\"{ 'own-message': message.sender === userId }\">\r\n                <div class=\"message-content\">\r\n                    <div class=\"message-sender\">{{ message.senderDisplayName || 'Unknown' }}</div>\r\n                    <div class=\"message-text\" [innerHTML]=\"message.content\"></div>\r\n                    <div class=\"message-time\">{{ formatMessageTime(message.createdOn) }}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"chat-input\">\r\n        <div class=\"input-container\">\r\n            <input type=\"text\" placeholder=\"Type a message...\" class=\"message-input\" [(ngModel)]=\"messageText\"\r\n                (keyup.enter)=\"sendMessage()\" [disabled]=\"!canSendMessage\">\r\n            <button class=\"send-button\" [disabled]=\"!canSendMessage || !messageText.trim()\" (click)=\"sendMessage()\">\r\n                <span class=\"send-text\">Send</span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}