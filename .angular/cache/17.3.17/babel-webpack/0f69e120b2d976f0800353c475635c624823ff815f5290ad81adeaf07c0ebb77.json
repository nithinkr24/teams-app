{"ast":null,"code":"import { AppId as t } from \"../public/appId.js\";\nimport { FrameContexts as e, errorNotSupportedOnPlatform as n } from \"../public/constants.js\";\nimport { isSupported as i } from \"../public/pages/pages.js\";\nimport { runtime as r } from \"../public/runtime.js\";\nimport { shouldEventBeRelayedToChild as o, sendMessageEventToChild as s } from \"./childCommunication.js\";\nimport { sendAndHandleStatusAndReasonWithDefaultError as a, sendAndUnwrap as c, sendMessageToParent as u, sendAndHandleStatusAndReason as p } from \"./communication.js\";\nimport { registerHandler as m } from \"./handlers.js\";\nimport { ensureInitialized as f } from \"./internalAPIs.js\";\nimport { getApiVersionTag as g } from \"./telemetry.js\";\nimport { isSupported as b, navigateBack as l } from \"../public/pages/backStack.js\";\nimport { isSupported as d } from \"../public/pages/tabs.js\";\nimport { isSupported as w } from \"../public/pages/config.js\";\nconst h = \"v2\";\nfunction P(t, o) {\n  return new Promise(s => {\n    if (f(r, e.content, e.sidePanel, e.settings, e.remove, e.task, e.stage, e.meetingStage), !i()) throw n;\n    s(a(t, \"navigateCrossDomain\", \"Cross-origin navigation is only supported for URLs matching the pattern registered in the manifest.\", o));\n  });\n}\nfunction j(t) {\n  return new Promise(e => {\n    if (f(r), !b()) throw n;\n    e(a(t, \"navigateBack\", \"Back navigation is not supported in the current client or context.\"));\n  });\n}\nfunction v(t, e) {\n  return new Promise(i => {\n    if (f(r), !d()) throw n;\n    i(a(t, \"navigateToTab\", \"Invalid internalTabInstanceId and/or channelId were/was provided\", e));\n  });\n}\nfunction I(t, e) {\n  if (f(r), !i()) throw n;\n  u(t, \"returnFocus\", [e]);\n}\nfunction S(t, e) {\n  return new Promise(i => {\n    if (f(r), !d()) throw n;\n    i(c(t, \"getTabInstances\", e));\n  });\n}\nfunction k(t, e) {\n  return new Promise(i => {\n    if (f(r), !d()) throw n;\n    i(c(t, \"getMruTabInstances\", e));\n  });\n}\nfunction U(t, o) {\n  if (f(r, e.content, e.sidePanel, e.meetingStage), !i()) throw n;\n  u(t, \"shareDeepLink\", [o.subPageId, o.subPageLabel, o.subPageWebUrl]);\n}\nfunction B(t, o) {\n  if (f(r, e.content), !i()) throw n;\n  u(t, \"setFrameContext\", [o]);\n}\nfunction T(t, i) {\n  if (f(r, e.settings, e.remove), !w()) throw n;\n  u(t, \"settings.setValidityState\", [i]);\n}\nfunction C(t) {\n  return new Promise(o => {\n    if (f(r, e.content, e.settings, e.remove, e.sidePanel), !i()) throw n;\n    o(c(t, \"settings.getSettings\"));\n  });\n}\nfunction L(t, i) {\n  return new Promise(o => {\n    if (f(r, e.content, e.settings, e.sidePanel), !w()) throw n;\n    o(p(t, \"settings.setSettings\", i));\n  });\n}\nfunction O(e) {\n  return e.appId instanceof t;\n}\nfunction x(e) {\n  return Object.assign(Object.assign({}, e), {\n    appId: new t(e.appId),\n    webUrl: e.webUrl ? new URL(e.webUrl) : void 0\n  });\n}\nfunction y(t) {\n  return Object.assign(Object.assign({}, t), {\n    appId: t.appId.toString(),\n    webUrl: t.webUrl ? t.webUrl.toString() : void 0\n  });\n}\nlet D;\nfunction F(t) {\n  D = t;\n}\nfunction R() {\n  m(g(\"v2\", \"pages.backStack.registerBackButtonPressHandler\"), \"backButtonPress\", A, !1);\n}\nfunction A() {\n  D && D() || (o() ? s(\"backButtonPress\", []) : l());\n}\nexport { j as backStackNavigateBackHelper, L as configSetConfigHelper, T as configSetValidityStateHelper, y as convertAppNavigationParametersToNavigateToAppParams, x as convertNavigateToAppParamsToAppNavigationParameters, C as getConfigHelper, k as getMruTabInstancesHelper, S as getTabInstancesHelper, R as initializeBackStackHelper, O as isAppNavigationParametersObject, P as navigateCrossDomainHelper, h as pagesTelemetryVersionNumber, I as returnFocusHelper, F as setBackButtonPressHandler, B as setCurrentFrameHelper, U as shareDeepLinkHelper, v as tabsNavigateToTabHelper };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}