{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _AgentScreenComponent;\nimport { Subject, takeUntil } from 'rxjs';\nimport { ThreadItemStatus } from '../../services/threads.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../teams-fx.service\";\nimport * as i2 from \"../../services/threads.service\";\nimport * as i3 from \"../../services/agent.service\";\nfunction AgentScreenComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelement(1, \"app-error-screen\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.errorMessage);\n  }\n}\nfunction AgentScreenComponent_div_2_app_toast_notification_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-toast-notification\", 9);\n    i0.ɵɵlistener(\"onViewThread\", function AgentScreenComponent_div_2_app_toast_notification_1_Template_app_toast_notification_onViewThread_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.handleOnViewThread($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"toasterId\", ctx_r0.resolvedThreadId)(\"showToast\", !!ctx_r0.resolvedThreadId)(\"toastBodyMessage\", ctx_r0.resolvedThreadCustomerDisplayName || \"\");\n  }\n}\nfunction AgentScreenComponent_div_2_app_chat_screen_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-chat-screen\", 10);\n    i0.ɵɵlistener(\"onResolveChat\", function AgentScreenComponent_div_2_app_chat_screen_4_Template_app_chat_screen_onResolveChat_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.handleOnResolveChat($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"token\", ctx_r0.token)(\"userId\", ctx_r0.userId)(\"displayName\", ctx_r0.displayName)(\"endpointUrl\", ctx_r0.endpointUrl)(\"threadId\", ctx_r0.selectedThreadId)(\"receiverName\", ctx_r0.getReceiverName())(\"threadStatus\", ctx_r0.getThreadStatus());\n  }\n}\nfunction AgentScreenComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, AgentScreenComponent_div_2_app_toast_notification_1_Template, 1, 3, \"app-toast-notification\", 5);\n    i0.ɵɵelementStart(2, \"app-thread-list\", 6);\n    i0.ɵɵlistener(\"onThreadSelected\", function AgentScreenComponent_div_2_Template_app_thread_list_onThreadSelected_2_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.setSelectedThreadId($event));\n    })(\"onStatusTabSelected\", function AgentScreenComponent_div_2_Template_app_thread_list_onStatusTabSelected_2_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.handleOnStatusTabSelected($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 7);\n    i0.ɵɵtemplate(4, AgentScreenComponent_div_2_app_chat_screen_4_Template, 1, 7, \"app-chat-screen\", 8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.resolvedThreadId);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"selectedThreadId\", ctx_r0.selectedThreadId)(\"threads\", ctx_r0.threads)(\"isLoading\", !ctx_r0.endpointUrl || ctx_r0.isLoading)(\"tabs\", ctx_r0.tabs)(\"selectedTab\", ctx_r0.selectedTab);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.selectedThreadId && ctx_r0.token && ctx_r0.endpointUrl && ctx_r0.userId && ctx_r0.displayName);\n  }\n}\nexport class AgentScreenComponent {\n  constructor(teamsFxService, threadsService, agentService) {\n    this.teamsFxService = teamsFxService;\n    this.threadsService = threadsService;\n    this.agentService = agentService;\n    this.destroy$ = new Subject();\n    this.token = '';\n    this.userId = '';\n    this.displayName = '';\n    this.endpointUrl = '';\n    this.tabs = ['Active', 'Resolved'];\n    this.selectedTab = 'Active';\n    this.threads = [];\n    this.isLoading = false;\n  }\n  ngOnInit() {\n    this.initializeScreen();\n    this.subscribeToThreads();\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  initializeScreen() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const userInfo = yield _this.teamsFxService.getUserInfo();\n        if (!userInfo) {\n          _this.errorMessage = 'Failed to get Teams user info';\n          return;\n        }\n        const getSalesRepInfo = yield _this.agentService.getSalesRepInfo(userInfo.objectId);\n        if (!getSalesRepInfo) {\n          _this.errorMessage = 'Failed to get sales rep info';\n          return;\n        }\n        const agentACSUser = yield _this.agentService.getAgentACSUser(userInfo.objectId);\n        if (!agentACSUser) {\n          _this.errorMessage = 'Failed to link to ACS user';\n          return;\n        }\n        // this.endpointUrl = await this.agentService.getEndpointUrl();\n        _this.endpointUrl = 'https://teamspocbot.unitedstates.communication.azure.com';\n        const tokenResponse = yield _this.agentService.getToken(agentACSUser.acsUserId);\n        _this.token = tokenResponse.token;\n        _this.userId = agentACSUser.acsUserId;\n        _this.displayName = agentACSUser.displayName;\n        yield _this.threadsService.initializeChatClient(_this.userId, _this.token, _this.endpointUrl);\n      } catch (error) {\n        console.error('Failed to set screen state due to error: ', error);\n        _this.errorMessage = 'Failed to initialize screen';\n      }\n    })();\n  }\n  // Method to refresh threads manually\n  refreshThreads() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.threadsService.refreshThreads();\n      } catch (error) {\n        console.error('Failed to refresh threads:', error);\n        _this2.showErrorMessage('Failed to refresh threads. Please try again.');\n      }\n    })();\n  }\n  showErrorMessage(message) {\n    // Create a temporary error message display\n    const errorDiv = document.createElement('div');\n    errorDiv.className = 'error-message';\n    errorDiv.textContent = message;\n    errorDiv.style.cssText = `\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: #d13438;\n      color: white;\n      padding: 12px 20px;\n      border-radius: 4px;\n      z-index: 1000;\n      font-size: 14px;\n    `;\n    document.body.appendChild(errorDiv);\n    // Remove after 3 seconds\n    setTimeout(() => {\n      if (errorDiv.parentNode) {\n        errorDiv.parentNode.removeChild(errorDiv);\n      }\n    }, 3000);\n  }\n  subscribeToThreads() {\n    this.threadsService.threads$.pipe(takeUntil(this.destroy$)).subscribe(threads => {\n      this.threads = threads;\n    });\n    this.threadsService.selectedThreadId$.pipe(takeUntil(this.destroy$)).subscribe(threadId => {\n      this.selectedThreadId = threadId;\n    });\n    this.threadsService.resolvedThreadId$.pipe(takeUntil(this.destroy$)).subscribe(threadId => {\n      console.log('Resolved thread ID changed to:', threadId);\n      this.resolvedThreadId = threadId;\n    });\n    this.threadsService.isLoading$.pipe(takeUntil(this.destroy$)).subscribe(loading => {\n      this.isLoading = loading;\n    });\n  }\n  setSelectedThreadId(threadId) {\n    console.log('Setting selected thread ID:', threadId);\n    this.threadsService.setSelectedThreadId(threadId);\n  }\n  handleOnResolveChat(threadId) {\n    console.log('Resolving chat for thread:', threadId);\n    // Update thread status to resolved\n    this.threadsService.updateThreadStatusExternal(threadId, ThreadItemStatus.RESOLVED);\n    // Get next active thread\n    const nextActiveThreadId = this.threadsService.getNextActiveThreadIdFromService(threadId);\n    if (nextActiveThreadId) {\n      console.log('Auto-selecting next active thread:', nextActiveThreadId);\n      this.setSelectedThreadId(nextActiveThreadId);\n    } else {\n      console.log('No next active thread found');\n    }\n  }\n  handleOnViewThread(threadId) {\n    console.log('Viewing resolved thread:', threadId);\n    this.setSelectedThreadId(threadId);\n    // Change tab to resolved if needed\n    const thread = this.threads.find(t => t.id === threadId);\n    if (thread && thread.status === ThreadItemStatus.RESOLVED) {\n      this.selectedTab = this.tabs[1]; // Resolved tab\n    }\n    // Clear resolved thread ID if it was this thread\n    if (this.resolvedThreadId === threadId) {\n      this.threadsService.setResolvedThreadId(undefined);\n    }\n  }\n  handleOnStatusTabSelected(tabValue) {\n    console.log('Status tab selected:', tabValue);\n    this.selectedTab = tabValue;\n    // Find first thread of selected status\n    const status = tabValue.toLowerCase();\n    const firstThreadOfSelectedTab = this.threads.find(thread => thread.status === status);\n    if (firstThreadOfSelectedTab) {\n      console.log('Selecting first thread of status:', status, firstThreadOfSelectedTab.id);\n      this.setSelectedThreadId(firstThreadOfSelectedTab.id);\n    } else {\n      console.log('No threads found for status:', status);\n      this.selectedThreadId = undefined;\n    }\n  }\n  getReceiverName() {\n    if (!this.selectedThreadId) return '';\n    const thread = this.threads.find(t => t.id === this.selectedThreadId);\n    return (thread === null || thread === void 0 ? void 0 : thread.topic) || '';\n  }\n  getThreadStatus() {\n    if (!this.selectedThreadId) return 'active';\n    const thread = this.threads.find(t => t.id === this.selectedThreadId);\n    return (thread === null || thread === void 0 ? void 0 : thread.status) || 'active';\n  }\n  get resolvedThreadCustomerDisplayName() {\n    if (!this.resolvedThreadId) return undefined;\n    const resolvedThread = this.threads.find(t => t.id === this.resolvedThreadId);\n    return resolvedThread === null || resolvedThread === void 0 ? void 0 : resolvedThread.topic;\n  }\n}\n_AgentScreenComponent = AgentScreenComponent;\n_AgentScreenComponent.ɵfac = function AgentScreenComponent_Factory(t) {\n  return new (t || _AgentScreenComponent)(i0.ɵɵdirectiveInject(i1.TeamsFxService), i0.ɵɵdirectiveInject(i2.ThreadsService), i0.ɵɵdirectiveInject(i3.AgentService));\n};\n_AgentScreenComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _AgentScreenComponent,\n  selectors: [[\"app-agent-screen\"]],\n  decls: 3,\n  vars: 2,\n  consts: [[\"class\", \"error-container\", 4, \"ngIf\"], [\"class\", \"agent-screen-container\", 4, \"ngIf\"], [1, \"error-container\"], [3, \"errorMessage\"], [1, \"agent-screen-container\"], [3, \"toasterId\", \"showToast\", \"toastBodyMessage\", \"onViewThread\", 4, \"ngIf\"], [3, \"onThreadSelected\", \"onStatusTabSelected\", \"selectedThreadId\", \"threads\", \"isLoading\", \"tabs\", \"selectedTab\"], [1, \"chat-container\"], [3, \"token\", \"userId\", \"displayName\", \"endpointUrl\", \"threadId\", \"receiverName\", \"threadStatus\", \"onResolveChat\", 4, \"ngIf\"], [3, \"onViewThread\", \"toasterId\", \"showToast\", \"toastBodyMessage\"], [3, \"onResolveChat\", \"token\", \"userId\", \"displayName\", \"endpointUrl\", \"threadId\", \"receiverName\", \"threadStatus\"]],\n  template: function AgentScreenComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵtemplate(1, AgentScreenComponent_div_1_Template, 2, 1, \"div\", 0)(2, AgentScreenComponent_div_2_Template, 5, 7, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"ngIf\", !ctx.errorMessage);\n    }\n  },\n  styles: [\".agent-screen-container[_ngcontent-%COMP%] {\\n    display: flex;\\n    height: 100vh;\\n    min-height: 500px;\\n    max-height: 100vh;\\n    overflow: hidden;\\n}\\n\\n.chat-container[_ngcontent-%COMP%] {\\n    flex: 1;\\n    display: flex;\\n    flex-direction: column;\\n    min-height: 0;\\n    overflow: hidden;\\n}\\n\\n.error-container[_ngcontent-%COMP%] {\\n    height: 100vh;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\\n\\n\\n\\n@media (max-width: 768px) {\\n    .agent-screen-container[_ngcontent-%COMP%] {\\n        min-height: 400px;\\n    }\\n}\\n\\n@media (max-width: 480px) {\\n    .agent-screen-container[_ngcontent-%COMP%] {\\n        min-height: 300px;\\n    }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2hhdC9hZ2VudC1zY3JlZW4vYWdlbnQtc2NyZWVuLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxhQUFhO0lBQ2IsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksT0FBTztJQUNQLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsYUFBYTtJQUNiLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLHVCQUF1QjtBQUMzQjs7QUFFQSwyQkFBMkI7QUFDM0I7SUFDSTtRQUNJLGlCQUFpQjtJQUNyQjtBQUNKOztBQUVBO0lBQ0k7UUFDSSxpQkFBaUI7SUFDckI7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIi5hZ2VudC1zY3JlZW4tY29udGFpbmVyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBoZWlnaHQ6IDEwMHZoO1xyXG4gICAgbWluLWhlaWdodDogNTAwcHg7XHJcbiAgICBtYXgtaGVpZ2h0OiAxMDB2aDtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbn1cclxuXHJcbi5jaGF0LWNvbnRhaW5lciB7XHJcbiAgICBmbGV4OiAxO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBtaW4taGVpZ2h0OiAwO1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxufVxyXG5cclxuLmVycm9yLWNvbnRhaW5lciB7XHJcbiAgICBoZWlnaHQ6IDEwMHZoO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxufVxyXG5cclxuLyogUmVzcG9uc2l2ZSBhZGp1c3RtZW50cyAqL1xyXG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIC5hZ2VudC1zY3JlZW4tY29udGFpbmVyIHtcclxuICAgICAgICBtaW4taGVpZ2h0OiA0MDBweDtcclxuICAgIH1cclxufVxyXG5cclxuQG1lZGlhIChtYXgtd2lkdGg6IDQ4MHB4KSB7XHJcbiAgICAuYWdlbnQtc2NyZWVuLWNvbnRhaW5lciB7XHJcbiAgICAgICAgbWluLWhlaWdodDogMzAwcHg7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["Subject","takeUntil","ThreadItemStatus","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ctx_r0","errorMessage","ɵɵlistener","AgentScreenComponent_div_2_app_toast_notification_1_Template_app_toast_notification_onViewThread_0_listener","$event","ɵɵrestoreView","_r3","ɵɵnextContext","ɵɵresetView","handleOnViewThread","resolvedThreadId","resolvedThreadCustomerDisplayName","AgentScreenComponent_div_2_app_chat_screen_4_Template_app_chat_screen_onResolveChat_0_listener","_r4","handleOnResolveChat","token","userId","displayName","endpointUrl","selectedThreadId","getReceiverName","getThreadStatus","ɵɵtemplate","AgentScreenComponent_div_2_app_toast_notification_1_Template","AgentScreenComponent_div_2_Template_app_thread_list_onThreadSelected_2_listener","_r2","setSelectedThreadId","AgentScreenComponent_div_2_Template_app_thread_list_onStatusTabSelected_2_listener","handleOnStatusTabSelected","AgentScreenComponent_div_2_app_chat_screen_4_Template","threads","isLoading","tabs","selectedTab","AgentScreenComponent","constructor","teamsFxService","threadsService","agentService","destroy$","ngOnInit","initializeScreen","subscribeToThreads","ngOnDestroy","next","complete","_this","_asyncToGenerator","userInfo","getUserInfo","getSalesRepInfo","objectId","agentACSUser","getAgentACSUser","tokenResponse","getToken","acsUserId","initializeChatClient","error","console","refreshThreads","_this2","showErrorMessage","message","errorDiv","document","createElement","className","textContent","style","cssText","body","appendChild","setTimeout","parentNode","removeChild","threads$","pipe","subscribe","selectedThreadId$","threadId","resolvedThreadId$","log","isLoading$","loading","updateThreadStatusExternal","RESOLVED","nextActiveThreadId","getNextActiveThreadIdFromService","thread","find","t","id","status","setResolvedThreadId","undefined","tabValue","toLowerCase","firstThreadOfSelectedTab","topic","resolvedThread","ɵɵdirectiveInject","i1","TeamsFxService","i2","ThreadsService","i3","AgentService","selectors","decls","vars","consts","template","AgentScreenComponent_Template","rf","ctx","AgentScreenComponent_div_1_Template","AgentScreenComponent_div_2_Template"],"sources":["D:\\Project\\github-teams\\teams-app-new\\src\\app\\chat\\agent-screen\\agent-screen.component.ts","D:\\Project\\github-teams\\teams-app-new\\src\\app\\chat\\agent-screen\\agent-screen.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { TeamsFxService } from '../../teams-fx.service';\r\nimport { ThreadsService, ThreadItemStatus } from '../../services/threads.service';\r\nimport { AgentService } from '../../services/agent.service';\r\n\r\n@Component({\r\n  selector: 'app-agent-screen',\r\n  templateUrl: 'agent-screen.component.html',\r\n  styleUrl: 'agent-screen.component.css'\r\n})\r\nexport class AgentScreenComponent implements OnInit, OnDestroy {\r\n  private destroy$ = new Subject<void>();\r\n  \r\n  token: string = '';\r\n  userId: string = '';\r\n  displayName: string = '';\r\n  endpointUrl: string = '';\r\n  errorMessage: string | undefined;\r\n  \r\n  tabs = ['Active', 'Resolved'];\r\n  selectedTab: string = 'Active';\r\n  \r\n  threads: any[] = [];\r\n  selectedThreadId: string | undefined;\r\n  resolvedThreadId: string | undefined;\r\n  isLoading: boolean = false;\r\n\r\n  constructor(\r\n    private teamsFxService: TeamsFxService,\r\n    private threadsService: ThreadsService,\r\n    private agentService: AgentService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.initializeScreen();\r\n    this.subscribeToThreads();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  private async initializeScreen() {\r\n    try {\r\n      const userInfo = await this.teamsFxService.getUserInfo();\r\n      if (!userInfo) {\r\n        this.errorMessage = 'Failed to get Teams user info';\r\n        return;\r\n      }\r\n      \r\n      const getSalesRepInfo = await this.agentService.getSalesRepInfo(userInfo.objectId);\r\n      if (!getSalesRepInfo) {\r\n        this.errorMessage = 'Failed to get sales rep info';\r\n        return;\r\n      }\r\n      const agentACSUser = await this.agentService.getAgentACSUser(userInfo.objectId);\r\n      if (!agentACSUser) {\r\n        this.errorMessage = 'Failed to link to ACS user';\r\n        return;\r\n      }\r\n      // this.endpointUrl = await this.agentService.getEndpointUrl();\r\n      this.endpointUrl = 'https://teamspocbot.unitedstates.communication.azure.com';\r\n      const tokenResponse = await this.agentService.getToken(agentACSUser.acsUserId);\r\n      this.token = tokenResponse.token;\r\n      this.userId = agentACSUser.acsUserId;\r\n      this.displayName = agentACSUser.displayName;\r\n      \r\n      await this.threadsService.initializeChatClient(this.userId, this.token, this.endpointUrl);\r\n    } catch (error) {\r\n      console.error('Failed to set screen state due to error: ', error);\r\n      this.errorMessage = 'Failed to initialize screen';\r\n    }\r\n  }\r\n  \r\n  // Method to refresh threads manually\r\n  async refreshThreads() {\r\n    try {\r\n      await this.threadsService.refreshThreads();\r\n    } catch (error) {\r\n      console.error('Failed to refresh threads:', error);\r\n      this.showErrorMessage('Failed to refresh threads. Please try again.');\r\n    }\r\n  }\r\n  \r\n  private showErrorMessage(message: string): void {\r\n    // Create a temporary error message display\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.className = 'error-message';\r\n    errorDiv.textContent = message;\r\n    errorDiv.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      background-color: #d13438;\r\n      color: white;\r\n      padding: 12px 20px;\r\n      border-radius: 4px;\r\n      z-index: 1000;\r\n      font-size: 14px;\r\n    `;\r\n    \r\n    document.body.appendChild(errorDiv);\r\n    \r\n    // Remove after 3 seconds\r\n    setTimeout(() => {\r\n      if (errorDiv.parentNode) {\r\n        errorDiv.parentNode.removeChild(errorDiv);\r\n      }\r\n    }, 3000);\r\n  }\r\n\r\n  private subscribeToThreads() {\r\n    this.threadsService.threads$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(threads => {\r\n        this.threads = threads;\r\n      });\r\n\r\n    this.threadsService.selectedThreadId$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(threadId => {\r\n        this.selectedThreadId = threadId;\r\n      });\r\n\r\n    this.threadsService.resolvedThreadId$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(threadId => {\r\n        console.log('Resolved thread ID changed to:', threadId);\r\n        this.resolvedThreadId = threadId;\r\n      });\r\n\r\n    this.threadsService.isLoading$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(loading => {\r\n        this.isLoading = loading;\r\n      });\r\n  }\r\n\r\n  setSelectedThreadId(threadId: string) {\r\n    console.log('Setting selected thread ID:', threadId);\r\n    this.threadsService.setSelectedThreadId(threadId);\r\n  }\r\n\r\n  handleOnResolveChat(threadId: string) {\r\n    console.log('Resolving chat for thread:', threadId);\r\n    \r\n    // Update thread status to resolved\r\n    this.threadsService.updateThreadStatusExternal(threadId, ThreadItemStatus.RESOLVED);\r\n    \r\n    // Get next active thread\r\n    const nextActiveThreadId = this.threadsService.getNextActiveThreadIdFromService(threadId);\r\n    if (nextActiveThreadId) {\r\n      console.log('Auto-selecting next active thread:', nextActiveThreadId);\r\n      this.setSelectedThreadId(nextActiveThreadId);\r\n    } else {\r\n      console.log('No next active thread found');\r\n    }\r\n  }\r\n\r\n  handleOnViewThread(threadId: string) {\r\n    console.log('Viewing resolved thread:', threadId);\r\n    this.setSelectedThreadId(threadId);\r\n    \r\n    // Change tab to resolved if needed\r\n    const thread = this.threads.find(t => t.id === threadId);\r\n    if (thread && thread.status === ThreadItemStatus.RESOLVED) {\r\n      this.selectedTab = this.tabs[1]; // Resolved tab\r\n    }\r\n    \r\n    // Clear resolved thread ID if it was this thread\r\n    if (this.resolvedThreadId === threadId) {\r\n      this.threadsService.setResolvedThreadId(undefined);\r\n    }\r\n  }\r\n\r\n  handleOnStatusTabSelected(tabValue: string) {\r\n    console.log('Status tab selected:', tabValue);\r\n    this.selectedTab = tabValue;\r\n    \r\n    // Find first thread of selected status\r\n    const status = tabValue.toLowerCase() as ThreadItemStatus;\r\n    const firstThreadOfSelectedTab = this.threads.find(thread => thread.status === status);\r\n    \r\n    if (firstThreadOfSelectedTab) {\r\n      console.log('Selecting first thread of status:', status, firstThreadOfSelectedTab.id);\r\n      this.setSelectedThreadId(firstThreadOfSelectedTab.id);\r\n    } else {\r\n      console.log('No threads found for status:', status);\r\n      this.selectedThreadId = undefined;\r\n    }\r\n  }\r\n\r\n  getReceiverName(): string {\r\n    if (!this.selectedThreadId) return '';\r\n    const thread = this.threads.find(t => t.id === this.selectedThreadId);\r\n    return thread?.topic || '';\r\n  }\r\n\r\n  getThreadStatus(): string {\r\n    if (!this.selectedThreadId) return 'active';\r\n    const thread = this.threads.find(t => t.id === this.selectedThreadId);\r\n    return thread?.status || 'active';\r\n  }\r\n\r\n  get resolvedThreadCustomerDisplayName(): string | undefined {\r\n    if (!this.resolvedThreadId) return undefined;\r\n    const resolvedThread = this.threads.find(t => t.id === this.resolvedThreadId);\r\n    return resolvedThread?.topic;\r\n  }\r\n}\r\n","<div>\r\n    <div *ngIf=\"errorMessage\" class=\"error-container\">\r\n        <app-error-screen [errorMessage]=\"errorMessage\"></app-error-screen>\r\n    </div>\r\n\r\n    <div *ngIf=\"!errorMessage\" class=\"agent-screen-container\">\r\n        <app-toast-notification *ngIf=\"resolvedThreadId\" [toasterId]=\"resolvedThreadId\" [showToast]=\"!!resolvedThreadId\"\r\n            [toastBodyMessage]=\"resolvedThreadCustomerDisplayName || ''\" (onViewThread)=\"handleOnViewThread($event)\">\r\n        </app-toast-notification>\r\n\r\n        <app-thread-list [selectedThreadId]=\"selectedThreadId\" [threads]=\"threads\"\r\n            [isLoading]=\"!endpointUrl || isLoading\" [tabs]=\"tabs\" [selectedTab]=\"selectedTab\"\r\n            (onThreadSelected)=\"setSelectedThreadId($event)\" (onStatusTabSelected)=\"handleOnStatusTabSelected($event)\">\r\n        </app-thread-list>\r\n\r\n        <div class=\"chat-container\">\r\n            <app-chat-screen *ngIf=\"selectedThreadId && token && endpointUrl && userId && displayName\" [token]=\"token\"\r\n                [userId]=\"userId\" [displayName]=\"displayName\" [endpointUrl]=\"endpointUrl\" [threadId]=\"selectedThreadId\"\r\n                [receiverName]=\"getReceiverName()\" [threadStatus]=\"getThreadStatus()\"\r\n                (onResolveChat)=\"handleOnResolveChat($event)\">\r\n            </app-chat-screen>\r\n        </div>\r\n    </div>\r\n</div>"],"mappings":";;AACA,SAASA,OAAO,EAAEC,SAAS,QAAQ,MAAM;AAEzC,SAAyBC,gBAAgB,QAAQ,gCAAgC;;;;;;;ICF7EC,EAAA,CAAAC,cAAA,aAAkD;IAC9CD,EAAA,CAAAE,SAAA,0BAAmE;IACvEF,EAAA,CAAAG,YAAA,EAAM;;;;IADgBH,EAAA,CAAAI,SAAA,EAA6B;IAA7BJ,EAAA,CAAAK,UAAA,iBAAAC,MAAA,CAAAC,YAAA,CAA6B;;;;;;IAI/CP,EAAA,CAAAC,cAAA,gCAC6G;IAA5CD,EAAA,CAAAQ,UAAA,0BAAAC,4GAAAC,MAAA;MAAAV,EAAA,CAAAW,aAAA,CAAAC,GAAA;MAAA,MAAAN,MAAA,GAAAN,EAAA,CAAAa,aAAA;MAAA,OAAAb,EAAA,CAAAc,WAAA,CAAgBR,MAAA,CAAAS,kBAAA,CAAAL,MAAA,CAA0B;IAAA,EAAC;IAC5GV,EAAA,CAAAG,YAAA,EAAyB;;;;IADrBH,EAD6C,CAAAK,UAAA,cAAAC,MAAA,CAAAU,gBAAA,CAA8B,gBAAAV,MAAA,CAAAU,gBAAA,CAAiC,qBAAAV,MAAA,CAAAW,iCAAA,OAChD;;;;;;IAS5DjB,EAAA,CAAAC,cAAA,0BAGkD;IAA9CD,EAAA,CAAAQ,UAAA,2BAAAU,+FAAAR,MAAA;MAAAV,EAAA,CAAAW,aAAA,CAAAQ,GAAA;MAAA,MAAAb,MAAA,GAAAN,EAAA,CAAAa,aAAA;MAAA,OAAAb,EAAA,CAAAc,WAAA,CAAiBR,MAAA,CAAAc,mBAAA,CAAAV,MAAA,CAA2B;IAAA,EAAC;IACjDV,EAAA,CAAAG,YAAA,EAAkB;;;;IAFqBH,EAFoD,CAAAK,UAAA,UAAAC,MAAA,CAAAe,KAAA,CAAe,WAAAf,MAAA,CAAAgB,MAAA,CACrF,gBAAAhB,MAAA,CAAAiB,WAAA,CAA4B,gBAAAjB,MAAA,CAAAkB,WAAA,CAA4B,aAAAlB,MAAA,CAAAmB,gBAAA,CAA8B,iBAAAnB,MAAA,CAAAoB,eAAA,GACrE,iBAAApB,MAAA,CAAAqB,eAAA,GAAmC;;;;;;IAbjF3B,EAAA,CAAAC,cAAA,aAA0D;IACtDD,EAAA,CAAA4B,UAAA,IAAAC,4DAAA,oCAC6G;IAG7G7B,EAAA,CAAAC,cAAA,yBAE+G;IAA1DD,EAAjD,CAAAQ,UAAA,8BAAAsB,gFAAApB,MAAA;MAAAV,EAAA,CAAAW,aAAA,CAAAoB,GAAA;MAAA,MAAAzB,MAAA,GAAAN,EAAA,CAAAa,aAAA;MAAA,OAAAb,EAAA,CAAAc,WAAA,CAAoBR,MAAA,CAAA0B,mBAAA,CAAAtB,MAAA,CAA2B;IAAA,EAAC,iCAAAuB,mFAAAvB,MAAA;MAAAV,EAAA,CAAAW,aAAA,CAAAoB,GAAA;MAAA,MAAAzB,MAAA,GAAAN,EAAA,CAAAa,aAAA;MAAA,OAAAb,EAAA,CAAAc,WAAA,CAAwBR,MAAA,CAAA4B,yBAAA,CAAAxB,MAAA,CAAiC;IAAA,EAAC;IAC9GV,EAAA,CAAAG,YAAA,EAAkB;IAElBH,EAAA,CAAAC,cAAA,aAA4B;IACxBD,EAAA,CAAA4B,UAAA,IAAAO,qDAAA,6BAGkD;IAG1DnC,EADI,CAAAG,YAAA,EAAM,EACJ;;;;IAhBuBH,EAAA,CAAAI,SAAA,EAAsB;IAAtBJ,EAAA,CAAAK,UAAA,SAAAC,MAAA,CAAAU,gBAAA,CAAsB;IAI9BhB,EAAA,CAAAI,SAAA,EAAqC;IACIJ,EADzC,CAAAK,UAAA,qBAAAC,MAAA,CAAAmB,gBAAA,CAAqC,YAAAnB,MAAA,CAAA8B,OAAA,CAAoB,eAAA9B,MAAA,CAAAkB,WAAA,IAAAlB,MAAA,CAAA+B,SAAA,CAC/B,SAAA/B,MAAA,CAAAgC,IAAA,CAAc,gBAAAhC,MAAA,CAAAiC,WAAA,CAA4B;IAK/DvC,EAAA,CAAAI,SAAA,GAAuE;IAAvEJ,EAAA,CAAAK,UAAA,SAAAC,MAAA,CAAAmB,gBAAA,IAAAnB,MAAA,CAAAe,KAAA,IAAAf,MAAA,CAAAkB,WAAA,IAAAlB,MAAA,CAAAgB,MAAA,IAAAhB,MAAA,CAAAiB,WAAA,CAAuE;;;ADLrG,OAAM,MAAOiB,oBAAoB;EAiB/BC,YACUC,cAA8B,EAC9BC,cAA8B,EAC9BC,YAA0B;IAF1B,KAAAF,cAAc,GAAdA,cAAc;IACd,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,YAAY,GAAZA,YAAY;IAnBd,KAAAC,QAAQ,GAAG,IAAIhD,OAAO,EAAQ;IAEtC,KAAAwB,KAAK,GAAW,EAAE;IAClB,KAAAC,MAAM,GAAW,EAAE;IACnB,KAAAC,WAAW,GAAW,EAAE;IACxB,KAAAC,WAAW,GAAW,EAAE;IAGxB,KAAAc,IAAI,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC;IAC7B,KAAAC,WAAW,GAAW,QAAQ;IAE9B,KAAAH,OAAO,GAAU,EAAE;IAGnB,KAAAC,SAAS,GAAY,KAAK;EAMvB;EAEHS,QAAQA,CAAA;IACN,IAAI,CAACC,gBAAgB,EAAE;IACvB,IAAI,CAACC,kBAAkB,EAAE;EAC3B;EAEAC,WAAWA,CAAA;IACT,IAAI,CAACJ,QAAQ,CAACK,IAAI,EAAE;IACpB,IAAI,CAACL,QAAQ,CAACM,QAAQ,EAAE;EAC1B;EAEcJ,gBAAgBA,CAAA;IAAA,IAAAK,KAAA;IAAA,OAAAC,iBAAA;MAC5B,IAAI;QACF,MAAMC,QAAQ,SAASF,KAAI,CAACV,cAAc,CAACa,WAAW,EAAE;QACxD,IAAI,CAACD,QAAQ,EAAE;UACbF,KAAI,CAAC7C,YAAY,GAAG,+BAA+B;UACnD;;QAGF,MAAMiD,eAAe,SAASJ,KAAI,CAACR,YAAY,CAACY,eAAe,CAACF,QAAQ,CAACG,QAAQ,CAAC;QAClF,IAAI,CAACD,eAAe,EAAE;UACpBJ,KAAI,CAAC7C,YAAY,GAAG,8BAA8B;UAClD;;QAEF,MAAMmD,YAAY,SAASN,KAAI,CAACR,YAAY,CAACe,eAAe,CAACL,QAAQ,CAACG,QAAQ,CAAC;QAC/E,IAAI,CAACC,YAAY,EAAE;UACjBN,KAAI,CAAC7C,YAAY,GAAG,4BAA4B;UAChD;;QAEF;QACA6C,KAAI,CAAC5B,WAAW,GAAG,0DAA0D;QAC7E,MAAMoC,aAAa,SAASR,KAAI,CAACR,YAAY,CAACiB,QAAQ,CAACH,YAAY,CAACI,SAAS,CAAC;QAC9EV,KAAI,CAAC/B,KAAK,GAAGuC,aAAa,CAACvC,KAAK;QAChC+B,KAAI,CAAC9B,MAAM,GAAGoC,YAAY,CAACI,SAAS;QACpCV,KAAI,CAAC7B,WAAW,GAAGmC,YAAY,CAACnC,WAAW;QAE3C,MAAM6B,KAAI,CAACT,cAAc,CAACoB,oBAAoB,CAACX,KAAI,CAAC9B,MAAM,EAAE8B,KAAI,CAAC/B,KAAK,EAAE+B,KAAI,CAAC5B,WAAW,CAAC;OAC1F,CAAC,OAAOwC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;QACjEZ,KAAI,CAAC7C,YAAY,GAAG,6BAA6B;;IAClD;EACH;EAEA;EACM2D,cAAcA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAd,iBAAA;MAClB,IAAI;QACF,MAAMc,MAAI,CAACxB,cAAc,CAACuB,cAAc,EAAE;OAC3C,CAAC,OAAOF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDG,MAAI,CAACC,gBAAgB,CAAC,8CAA8C,CAAC;;IACtE;EACH;EAEQA,gBAAgBA,CAACC,OAAe;IACtC;IACA,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAC9CF,QAAQ,CAACG,SAAS,GAAG,eAAe;IACpCH,QAAQ,CAACI,WAAW,GAAGL,OAAO;IAC9BC,QAAQ,CAACK,KAAK,CAACC,OAAO,GAAG;;;;;;;;;;;KAWxB;IAEDL,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,QAAQ,CAAC;IAEnC;IACAS,UAAU,CAAC,MAAK;MACd,IAAIT,QAAQ,CAACU,UAAU,EAAE;QACvBV,QAAQ,CAACU,UAAU,CAACC,WAAW,CAACX,QAAQ,CAAC;;IAE7C,CAAC,EAAE,IAAI,CAAC;EACV;EAEQtB,kBAAkBA,CAAA;IACxB,IAAI,CAACL,cAAc,CAACuC,QAAQ,CACzBC,IAAI,CAACrF,SAAS,CAAC,IAAI,CAAC+C,QAAQ,CAAC,CAAC,CAC9BuC,SAAS,CAAChD,OAAO,IAAG;MACnB,IAAI,CAACA,OAAO,GAAGA,OAAO;IACxB,CAAC,CAAC;IAEJ,IAAI,CAACO,cAAc,CAAC0C,iBAAiB,CAClCF,IAAI,CAACrF,SAAS,CAAC,IAAI,CAAC+C,QAAQ,CAAC,CAAC,CAC9BuC,SAAS,CAACE,QAAQ,IAAG;MACpB,IAAI,CAAC7D,gBAAgB,GAAG6D,QAAQ;IAClC,CAAC,CAAC;IAEJ,IAAI,CAAC3C,cAAc,CAAC4C,iBAAiB,CAClCJ,IAAI,CAACrF,SAAS,CAAC,IAAI,CAAC+C,QAAQ,CAAC,CAAC,CAC9BuC,SAAS,CAACE,QAAQ,IAAG;MACpBrB,OAAO,CAACuB,GAAG,CAAC,gCAAgC,EAAEF,QAAQ,CAAC;MACvD,IAAI,CAACtE,gBAAgB,GAAGsE,QAAQ;IAClC,CAAC,CAAC;IAEJ,IAAI,CAAC3C,cAAc,CAAC8C,UAAU,CAC3BN,IAAI,CAACrF,SAAS,CAAC,IAAI,CAAC+C,QAAQ,CAAC,CAAC,CAC9BuC,SAAS,CAACM,OAAO,IAAG;MACnB,IAAI,CAACrD,SAAS,GAAGqD,OAAO;IAC1B,CAAC,CAAC;EACN;EAEA1D,mBAAmBA,CAACsD,QAAgB;IAClCrB,OAAO,CAACuB,GAAG,CAAC,6BAA6B,EAAEF,QAAQ,CAAC;IACpD,IAAI,CAAC3C,cAAc,CAACX,mBAAmB,CAACsD,QAAQ,CAAC;EACnD;EAEAlE,mBAAmBA,CAACkE,QAAgB;IAClCrB,OAAO,CAACuB,GAAG,CAAC,4BAA4B,EAAEF,QAAQ,CAAC;IAEnD;IACA,IAAI,CAAC3C,cAAc,CAACgD,0BAA0B,CAACL,QAAQ,EAAEvF,gBAAgB,CAAC6F,QAAQ,CAAC;IAEnF;IACA,MAAMC,kBAAkB,GAAG,IAAI,CAAClD,cAAc,CAACmD,gCAAgC,CAACR,QAAQ,CAAC;IACzF,IAAIO,kBAAkB,EAAE;MACtB5B,OAAO,CAACuB,GAAG,CAAC,oCAAoC,EAAEK,kBAAkB,CAAC;MACrE,IAAI,CAAC7D,mBAAmB,CAAC6D,kBAAkB,CAAC;KAC7C,MAAM;MACL5B,OAAO,CAACuB,GAAG,CAAC,6BAA6B,CAAC;;EAE9C;EAEAzE,kBAAkBA,CAACuE,QAAgB;IACjCrB,OAAO,CAACuB,GAAG,CAAC,0BAA0B,EAAEF,QAAQ,CAAC;IACjD,IAAI,CAACtD,mBAAmB,CAACsD,QAAQ,CAAC;IAElC;IACA,MAAMS,MAAM,GAAG,IAAI,CAAC3D,OAAO,CAAC4D,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKZ,QAAQ,CAAC;IACxD,IAAIS,MAAM,IAAIA,MAAM,CAACI,MAAM,KAAKpG,gBAAgB,CAAC6F,QAAQ,EAAE;MACzD,IAAI,CAACrD,WAAW,GAAG,IAAI,CAACD,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;IAGnC;IACA,IAAI,IAAI,CAACtB,gBAAgB,KAAKsE,QAAQ,EAAE;MACtC,IAAI,CAAC3C,cAAc,CAACyD,mBAAmB,CAACC,SAAS,CAAC;;EAEtD;EAEAnE,yBAAyBA,CAACoE,QAAgB;IACxCrC,OAAO,CAACuB,GAAG,CAAC,sBAAsB,EAAEc,QAAQ,CAAC;IAC7C,IAAI,CAAC/D,WAAW,GAAG+D,QAAQ;IAE3B;IACA,MAAMH,MAAM,GAAGG,QAAQ,CAACC,WAAW,EAAsB;IACzD,MAAMC,wBAAwB,GAAG,IAAI,CAACpE,OAAO,CAAC4D,IAAI,CAACD,MAAM,IAAIA,MAAM,CAACI,MAAM,KAAKA,MAAM,CAAC;IAEtF,IAAIK,wBAAwB,EAAE;MAC5BvC,OAAO,CAACuB,GAAG,CAAC,mCAAmC,EAAEW,MAAM,EAAEK,wBAAwB,CAACN,EAAE,CAAC;MACrF,IAAI,CAAClE,mBAAmB,CAACwE,wBAAwB,CAACN,EAAE,CAAC;KACtD,MAAM;MACLjC,OAAO,CAACuB,GAAG,CAAC,8BAA8B,EAAEW,MAAM,CAAC;MACnD,IAAI,CAAC1E,gBAAgB,GAAG4E,SAAS;;EAErC;EAEA3E,eAAeA,CAAA;IACb,IAAI,CAAC,IAAI,CAACD,gBAAgB,EAAE,OAAO,EAAE;IACrC,MAAMsE,MAAM,GAAG,IAAI,CAAC3D,OAAO,CAAC4D,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAK,IAAI,CAACzE,gBAAgB,CAAC;IACrE,OAAO,CAAAsE,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEU,KAAK,KAAI,EAAE;EAC5B;EAEA9E,eAAeA,CAAA;IACb,IAAI,CAAC,IAAI,CAACF,gBAAgB,EAAE,OAAO,QAAQ;IAC3C,MAAMsE,MAAM,GAAG,IAAI,CAAC3D,OAAO,CAAC4D,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAK,IAAI,CAACzE,gBAAgB,CAAC;IACrE,OAAO,CAAAsE,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEI,MAAM,KAAI,QAAQ;EACnC;EAEA,IAAIlF,iCAAiCA,CAAA;IACnC,IAAI,CAAC,IAAI,CAACD,gBAAgB,EAAE,OAAOqF,SAAS;IAC5C,MAAMK,cAAc,GAAG,IAAI,CAACtE,OAAO,CAAC4D,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAK,IAAI,CAAClF,gBAAgB,CAAC;IAC7E,OAAO0F,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAED,KAAK;EAC9B;;wBAxMWjE,oBAAoB;;mBAApBA,qBAAoB,EAAAxC,EAAA,CAAA2G,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAA7G,EAAA,CAAA2G,iBAAA,CAAAG,EAAA,CAAAC,cAAA,GAAA/G,EAAA,CAAA2G,iBAAA,CAAAK,EAAA,CAAAC,YAAA;AAAA;;QAApBzE,qBAAoB;EAAA0E,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,8BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCXjCxH,EAAA,CAAAC,cAAA,UAAK;MAKDD,EAJA,CAAA4B,UAAA,IAAA8F,mCAAA,iBAAkD,IAAAC,mCAAA,iBAIQ;MAkB9D3H,EAAA,CAAAG,YAAA,EAAM;;;MAtBIH,EAAA,CAAAI,SAAA,EAAkB;MAAlBJ,EAAA,CAAAK,UAAA,SAAAoH,GAAA,CAAAlH,YAAA,CAAkB;MAIlBP,EAAA,CAAAI,SAAA,EAAmB;MAAnBJ,EAAA,CAAAK,UAAA,UAAAoH,GAAA,CAAAlH,YAAA,CAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}