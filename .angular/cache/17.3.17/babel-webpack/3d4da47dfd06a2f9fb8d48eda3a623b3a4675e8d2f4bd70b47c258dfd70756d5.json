{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createTracingContext } from \"./tracingContext.js\";\nimport { state } from \"./state.js\";\nexport function createDefaultTracingSpan() {\n  return {\n    end: () => {\n      // noop\n    },\n    isRecording: () => false,\n    recordException: () => {\n      // noop\n    },\n    setAttribute: () => {\n      // noop\n    },\n    setStatus: () => {\n      // noop\n    },\n    addEvent: () => {\n      // noop\n    }\n  };\n}\nexport function createDefaultInstrumenter() {\n  return {\n    createRequestHeaders: () => {\n      return {};\n    },\n    parseTraceparentHeader: () => {\n      return undefined;\n    },\n    startSpan: (_name, spanOptions) => {\n      return {\n        span: createDefaultTracingSpan(),\n        tracingContext: createTracingContext({\n          parentContext: spanOptions.tracingContext\n        })\n      };\n    },\n    withContext(_context, callback, ...callbackArgs) {\n      return callback(...callbackArgs);\n    }\n  };\n}\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nexport function useInstrumenter(instrumenter) {\n  state.instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nexport function getInstrumenter() {\n  if (!state.instrumenterImplementation) {\n    state.instrumenterImplementation = createDefaultInstrumenter();\n  }\n  return state.instrumenterImplementation;\n}","map":{"version":3,"names":["createTracingContext","state","createDefaultTracingSpan","end","isRecording","recordException","setAttribute","setStatus","addEvent","createDefaultInstrumenter","createRequestHeaders","parseTraceparentHeader","undefined","startSpan","_name","spanOptions","span","tracingContext","parentContext","withContext","_context","callback","callbackArgs","useInstrumenter","instrumenter","instrumenterImplementation","getInstrumenter"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-tracing/dist/browser/instrumenter.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createTracingContext } from \"./tracingContext.js\";\nimport { state } from \"./state.js\";\nexport function createDefaultTracingSpan() {\n    return {\n        end: () => {\n            // noop\n        },\n        isRecording: () => false,\n        recordException: () => {\n            // noop\n        },\n        setAttribute: () => {\n            // noop\n        },\n        setStatus: () => {\n            // noop\n        },\n        addEvent: () => {\n            // noop\n        },\n    };\n}\nexport function createDefaultInstrumenter() {\n    return {\n        createRequestHeaders: () => {\n            return {};\n        },\n        parseTraceparentHeader: () => {\n            return undefined;\n        },\n        startSpan: (_name, spanOptions) => {\n            return {\n                span: createDefaultTracingSpan(),\n                tracingContext: createTracingContext({ parentContext: spanOptions.tracingContext }),\n            };\n        },\n        withContext(_context, callback, ...callbackArgs) {\n            return callback(...callbackArgs);\n        },\n    };\n}\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nexport function useInstrumenter(instrumenter) {\n    state.instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nexport function getInstrumenter() {\n    if (!state.instrumenterImplementation) {\n        state.instrumenterImplementation = createDefaultInstrumenter();\n    }\n    return state.instrumenterImplementation;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,oBAAoB,QAAQ,qBAAqB;AAC1D,SAASC,KAAK,QAAQ,YAAY;AAClC,OAAO,SAASC,wBAAwBA,CAAA,EAAG;EACvC,OAAO;IACHC,GAAG,EAAEA,CAAA,KAAM;MACP;IAAA,CACH;IACDC,WAAW,EAAEA,CAAA,KAAM,KAAK;IACxBC,eAAe,EAAEA,CAAA,KAAM;MACnB;IAAA,CACH;IACDC,YAAY,EAAEA,CAAA,KAAM;MAChB;IAAA,CACH;IACDC,SAAS,EAAEA,CAAA,KAAM;MACb;IAAA,CACH;IACDC,QAAQ,EAAEA,CAAA,KAAM;MACZ;IAAA;EAER,CAAC;AACL;AACA,OAAO,SAASC,yBAAyBA,CAAA,EAAG;EACxC,OAAO;IACHC,oBAAoB,EAAEA,CAAA,KAAM;MACxB,OAAO,CAAC,CAAC;IACb,CAAC;IACDC,sBAAsB,EAAEA,CAAA,KAAM;MAC1B,OAAOC,SAAS;IACpB,CAAC;IACDC,SAAS,EAAEA,CAACC,KAAK,EAAEC,WAAW,KAAK;MAC/B,OAAO;QACHC,IAAI,EAAEd,wBAAwB,CAAC,CAAC;QAChCe,cAAc,EAAEjB,oBAAoB,CAAC;UAAEkB,aAAa,EAAEH,WAAW,CAACE;QAAe,CAAC;MACtF,CAAC;IACL,CAAC;IACDE,WAAWA,CAACC,QAAQ,EAAEC,QAAQ,EAAE,GAAGC,YAAY,EAAE;MAC7C,OAAOD,QAAQ,CAAC,GAAGC,YAAY,CAAC;IACpC;EACJ,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,YAAY,EAAE;EAC1CvB,KAAK,CAACwB,0BAA0B,GAAGD,YAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,eAAeA,CAAA,EAAG;EAC9B,IAAI,CAACzB,KAAK,CAACwB,0BAA0B,EAAE;IACnCxB,KAAK,CAACwB,0BAA0B,GAAGhB,yBAAyB,CAAC,CAAC;EAClE;EACA,OAAOR,KAAK,CAACwB,0BAA0B;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}