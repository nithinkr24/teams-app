{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getRandomIntegerInclusive } from \"./random.js\";\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n * @param retryAttempt - The current retry attempt number.\n * @param config - The exponential retry configuration.\n * @returns An object containing the calculated retry delay.\n */\nexport function calculateRetryDelay(retryAttempt, config) {\n  // Exponentially increase the delay each time\n  const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);\n  // Don't let the delay exceed the maximum\n  const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);\n  // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n  // that retries across multiple clients don't occur simultaneously.\n  const retryAfterInMs = clampedDelay / 2 + getRandomIntegerInclusive(0, clampedDelay / 2);\n  return {\n    retryAfterInMs\n  };\n}","map":{"version":3,"names":["getRandomIntegerInclusive","calculateRetryDelay","retryAttempt","config","exponentialDelay","retryDelayInMs","Math","pow","clampedDelay","min","maxRetryDelayInMs","retryAfterInMs"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/util/delay.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getRandomIntegerInclusive } from \"./random.js\";\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n * @param retryAttempt - The current retry attempt number.\n * @param config - The exponential retry configuration.\n * @returns An object containing the calculated retry delay.\n */\nexport function calculateRetryDelay(retryAttempt, config) {\n    // Exponentially increase the delay each time\n    const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);\n    // Don't let the delay exceed the maximum\n    const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);\n    // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n    // that retries across multiple clients don't occur simultaneously.\n    const retryAfterInMs = clampedDelay / 2 + getRandomIntegerInclusive(0, clampedDelay / 2);\n    return { retryAfterInMs };\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,yBAAyB,QAAQ,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAACC,YAAY,EAAEC,MAAM,EAAE;EACtD;EACA,MAAMC,gBAAgB,GAAGD,MAAM,CAACE,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,YAAY,CAAC;EAC1E;EACA,MAAMM,YAAY,GAAGF,IAAI,CAACG,GAAG,CAACN,MAAM,CAACO,iBAAiB,EAAEN,gBAAgB,CAAC;EACzE;EACA;EACA,MAAMO,cAAc,GAAGH,YAAY,GAAG,CAAC,GAAGR,yBAAyB,CAAC,CAAC,EAAEQ,YAAY,GAAG,CAAC,CAAC;EACxF,OAAO;IAAEG;EAAe,CAAC;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}