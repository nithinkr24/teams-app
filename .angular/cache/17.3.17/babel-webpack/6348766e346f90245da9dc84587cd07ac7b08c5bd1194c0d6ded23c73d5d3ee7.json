{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { RestError } from \"../restError.js\";\nimport { createHttpHeaders } from \"../httpHeaders.js\";\nimport { stringToUint8Array } from \"../util/bytesEncoding.js\";\nimport { isBinaryBody } from \"../util/typeGuards.js\";\n/**\n * Get value of a header in the part descriptor ignoring case\n */\nfunction getHeaderValue(descriptor, headerName) {\n  if (descriptor.headers) {\n    const actualHeaderName = Object.keys(descriptor.headers).find(x => x.toLowerCase() === headerName.toLowerCase());\n    if (actualHeaderName) {\n      return descriptor.headers[actualHeaderName];\n    }\n  }\n  return undefined;\n}\nfunction getPartContentType(descriptor) {\n  const contentTypeHeader = getHeaderValue(descriptor, \"content-type\");\n  if (contentTypeHeader) {\n    return contentTypeHeader;\n  }\n  // Special value of null means content type is to be omitted\n  if (descriptor.contentType === null) {\n    return undefined;\n  }\n  if (descriptor.contentType) {\n    return descriptor.contentType;\n  }\n  const {\n    body\n  } = descriptor;\n  if (body === null || body === undefined) {\n    return undefined;\n  }\n  if (typeof body === \"string\" || typeof body === \"number\" || typeof body === \"boolean\") {\n    return \"text/plain; charset=UTF-8\";\n  }\n  if (body instanceof Blob) {\n    return body.type || \"application/octet-stream\";\n  }\n  if (isBinaryBody(body)) {\n    return \"application/octet-stream\";\n  }\n  // arbitrary non-text object -> generic JSON content type by default. We will try to JSON.stringify the body.\n  return \"application/json\";\n}\n/**\n * Enclose value in quotes and escape special characters, for use in the Content-Disposition header\n */\nfunction escapeDispositionField(value) {\n  return JSON.stringify(value);\n}\nfunction getContentDisposition(descriptor) {\n  var _a;\n  const contentDispositionHeader = getHeaderValue(descriptor, \"content-disposition\");\n  if (contentDispositionHeader) {\n    return contentDispositionHeader;\n  }\n  if (descriptor.dispositionType === undefined && descriptor.name === undefined && descriptor.filename === undefined) {\n    return undefined;\n  }\n  const dispositionType = (_a = descriptor.dispositionType) !== null && _a !== void 0 ? _a : \"form-data\";\n  let disposition = dispositionType;\n  if (descriptor.name) {\n    disposition += `; name=${escapeDispositionField(descriptor.name)}`;\n  }\n  let filename = undefined;\n  if (descriptor.filename) {\n    filename = descriptor.filename;\n  } else if (typeof File !== \"undefined\" && descriptor.body instanceof File) {\n    const filenameFromFile = descriptor.body.name;\n    if (filenameFromFile !== \"\") {\n      filename = filenameFromFile;\n    }\n  }\n  if (filename) {\n    disposition += `; filename=${escapeDispositionField(filename)}`;\n  }\n  return disposition;\n}\nfunction normalizeBody(body, contentType) {\n  if (body === undefined) {\n    // zero-length body\n    return new Uint8Array([]);\n  }\n  // binary and primitives should go straight on the wire regardless of content type\n  if (isBinaryBody(body)) {\n    return body;\n  }\n  if (typeof body === \"string\" || typeof body === \"number\" || typeof body === \"boolean\") {\n    return stringToUint8Array(String(body), \"utf-8\");\n  }\n  // stringify objects for JSON-ish content types e.g. application/json, application/merge-patch+json, application/vnd.oci.manifest.v1+json, application.json; charset=UTF-8\n  if (contentType && /application\\/(.+\\+)?json(;.+)?/i.test(String(contentType))) {\n    return stringToUint8Array(JSON.stringify(body), \"utf-8\");\n  }\n  throw new RestError(`Unsupported body/content-type combination: ${body}, ${contentType}`);\n}\nexport function buildBodyPart(descriptor) {\n  var _a;\n  const contentType = getPartContentType(descriptor);\n  const contentDisposition = getContentDisposition(descriptor);\n  const headers = createHttpHeaders((_a = descriptor.headers) !== null && _a !== void 0 ? _a : {});\n  if (contentType) {\n    headers.set(\"content-type\", contentType);\n  }\n  if (contentDisposition) {\n    headers.set(\"content-disposition\", contentDisposition);\n  }\n  const body = normalizeBody(descriptor.body, contentType);\n  return {\n    headers,\n    body\n  };\n}\nexport function buildMultipartBody(parts) {\n  return {\n    parts: parts.map(buildBodyPart)\n  };\n}\n//# sourceMappingURL=multipart.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}