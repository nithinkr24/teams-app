{"ast":null,"code":"import { __rest as o } from \"../../../../node_modules/.pnpm/@rollup_plugin-typescript@11.1.6_rollup@4.24.4_tslib@2.6.3_typescript@4.9.5/node_modules/tslib/tslib.es6.js\";\nimport { errorRuntimeNotInitialized as e, errorRuntimeNotSupported as s } from \"../internal/constants.js\";\nimport { GlobalVars as i } from \"../internal/globalVars.js\";\nimport { getLogger as t } from \"../internal/telemetry.js\";\nimport { compareSDKVersions as n, deepFreeze as a } from \"../internal/utils.js\";\nimport { HostClientType as r, teamsMinAdaptiveCardVersion as p } from \"./constants.js\";\nconst l = t(\"runtime\"),\n  d = 4;\nfunction u(o) {\n  return o.apiVersion === d;\n}\nfunction c(o) {\n  if (u(o)) return !0;\n  throw -1 === o.apiVersion ? new Error(e) : new Error(s);\n}\nlet g = {\n  apiVersion: -1,\n  supports: {}\n};\nconst m = {\n    apiVersion: 4,\n    isNAAChannelRecommended: !1,\n    isDeeplyNestedAuthSupported: !1,\n    hostVersionsInfo: p,\n    isLegacyTeams: !0,\n    supports: {\n      appInstallDialog: {},\n      appEntity: {},\n      call: {},\n      chat: {},\n      conversations: {},\n      dialog: {\n        card: {\n          bot: {}\n        },\n        url: {\n          bot: {},\n          parentCommunication: {}\n        },\n        update: {}\n      },\n      interactive: {},\n      logs: {},\n      meetingRoom: {},\n      menus: {},\n      monetization: {},\n      notifications: {},\n      pages: {\n        config: {},\n        backStack: {},\n        fullTrust: {}\n      },\n      remoteCamera: {},\n      teams: {\n        fullTrust: {}\n      },\n      teamsCore: {},\n      video: {\n        sharedFrame: {}\n      }\n    }\n  },\n  y = [r.desktop, r.web, r.rigel, r.surfaceHub, r.teamsRoomsWindows, r.teamsRoomsAndroid, r.teamsPhones, r.teamsDisplays],\n  b = [r.android, r.ios, r.ipados, r.visionOS],\n  f = [...y, ...b];\nfunction h(o) {\n  let e = o;\n  if (e.apiVersion < d && v.forEach(o => {\n    e.apiVersion === o.versionToUpgradeFrom && (e = o.upgradeToNextVersion(e));\n  }), u(e)) return e;\n  throw new Error(\"Received a runtime that could not be upgraded to the latest version\");\n}\nconst v = [{\n    versionToUpgradeFrom: 1,\n    upgradeToNextVersion: o => {\n      var e;\n      return {\n        apiVersion: 2,\n        hostVersionsInfo: void 0,\n        isLegacyTeams: o.isLegacyTeams,\n        supports: Object.assign(Object.assign({}, o.supports), {\n          dialog: o.supports.dialog ? {\n            card: void 0,\n            url: o.supports.dialog,\n            update: null === (e = o.supports.dialog) || void 0 === e ? void 0 : e.update\n          } : void 0\n        })\n      };\n    }\n  }, {\n    versionToUpgradeFrom: 2,\n    upgradeToNextVersion: e => {\n      const s = e.supports,\n        i = o(s, [\"appNotification\"]);\n      return Object.assign(Object.assign({}, e), {\n        apiVersion: 3,\n        supports: i\n      });\n    }\n  }, {\n    versionToUpgradeFrom: 3,\n    upgradeToNextVersion: o => {\n      var e, s, i, t, n;\n      return {\n        apiVersion: 4,\n        hostVersionsInfo: o.hostVersionsInfo,\n        isNAAChannelRecommended: o.isNAAChannelRecommended,\n        isLegacyTeams: o.isLegacyTeams,\n        supports: Object.assign(Object.assign({}, o.supports), {\n          dialog: o.supports.dialog ? {\n            card: null === (e = o.supports.dialog) || void 0 === e ? void 0 : e.card,\n            url: {\n              bot: null === (i = null === (s = o.supports.dialog) || void 0 === s ? void 0 : s.url) || void 0 === i ? void 0 : i.bot,\n              parentCommunication: (null === (t = o.supports.dialog) || void 0 === t ? void 0 : t.url) ? {} : void 0\n            },\n            update: null === (n = o.supports.dialog) || void 0 === n ? void 0 : n.update\n          } : void 0\n        })\n      };\n    }\n  }],\n  T = \"2.1.2\",\n  V = {\n    \"1.0.0\": [{\n      capability: {\n        pages: {\n          appButton: {},\n          tabs: {}\n        },\n        stageView: {}\n      },\n      hostClientTypes: y\n    }],\n    \"1.9.0\": [{\n      capability: {\n        location: {}\n      },\n      hostClientTypes: f\n    }],\n    \"2.0.0\": [{\n      capability: {\n        people: {}\n      },\n      hostClientTypes: f\n    }, {\n      capability: {\n        sharing: {}\n      },\n      hostClientTypes: [r.desktop, r.web]\n    }],\n    \"2.0.1\": [{\n      capability: {\n        teams: {\n          fullTrust: {\n            joinedTeams: {}\n          }\n        }\n      },\n      hostClientTypes: [r.android, r.desktop, r.ios, r.teamsRoomsAndroid, r.teamsPhones, r.teamsDisplays, r.web]\n    }, {\n      capability: {\n        webStorage: {}\n      },\n      hostClientTypes: [r.desktop]\n    }],\n    \"2.0.5\": [{\n      capability: {\n        webStorage: {}\n      },\n      hostClientTypes: [r.android, r.ios]\n    }],\n    \"2.0.8\": [{\n      capability: {\n        sharing: {}\n      },\n      hostClientTypes: [r.android, r.ios]\n    }],\n    \"2.1.1\": [{\n      capability: {\n        nestedAppAuth: {}\n      },\n      hostClientTypes: [r.android, r.ios, r.ipados, r.visionOS]\n    }],\n    \"2.1.2\": []\n  },\n  C = l.extend(\"generateBackCompatRuntimeConfig\");\nfunction j(o, e) {\n  const s = Object.assign({}, o);\n  for (const i in e) Object.prototype.hasOwnProperty.call(e, i) && (\"object\" != typeof e[i] || Array.isArray(e[i]) ? i in o || (s[i] = e[i]) : s[i] = j(o[i] || {}, e[i]));\n  return s;\n}\nfunction w(o, e, s) {\n  C(\"generating back compat runtime config for %s\", o);\n  let t = Object.assign({}, e.supports);\n  C(\"Supported capabilities in config before updating based on highestSupportedVersion: %o\", t), Object.keys(s).forEach(e => {\n    n(o, e) >= 0 && s[e].forEach(o => {\n      void 0 !== i.hostClientType && o.hostClientTypes.includes(i.hostClientType) && (t = j(t, o.capability));\n    });\n  });\n  const a = {\n    apiVersion: d,\n    hostVersionsInfo: p,\n    isLegacyTeams: !0,\n    supports: t\n  };\n  return C(\"Runtime config after updating based on highestSupportedVersion: %o\", a), a;\n}\nconst O = l.extend(\"applyRuntimeConfig\");\nfunction A(o) {\n  \"string\" == typeof o.apiVersion && (O(\"Trying to apply runtime with string apiVersion, processing as v1: %o\", o), o = Object.assign(Object.assign({}, o), {\n    apiVersion: 1\n  })), O(\"Fast-forwarding runtime %o\", o);\n  const e = h(o);\n  O(\"Applying runtime %o\", e), g = a(e);\n}\nexport { A as applyRuntimeConfig, h as fastForwardRuntime, w as generateVersionBasedTeamsRuntimeConfig, c as isRuntimeInitialized, d as latestRuntimeApiVersion, T as legacyTeamsMobileVersionForDeeplyNestedAuth, V as mapTeamsVersionToSupportedCapabilities, g as runtime, v as upgradeChain, f as v1HostClientTypes, b as v1MobileHostClientTypes, m as versionAndPlatformAgnosticTeamsRuntimeConfig };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}