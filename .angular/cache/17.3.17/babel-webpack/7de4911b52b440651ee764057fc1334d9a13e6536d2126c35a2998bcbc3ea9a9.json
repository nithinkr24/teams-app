{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __rest } from \"tslib\";\nimport { logger } from \"./models/logger.js\";\nimport { serializeCommunicationIdentifier } from \"@azure/communication-common\";\nimport { mapToAddChatParticipantsRequestRestModel, mapToChatMessageSdkModel, mapToChatParticipantSdkModel, mapToChatThreadPropertiesSdkModel, mapToReadReceiptSdkModel } from \"./models/mappers.js\";\nimport { ChatApiClient } from \"./generated/src/index.js\";\nimport { createCommunicationTokenCredentialPolicy } from \"./credential/communicationTokenCredentialPolicy.js\";\nimport { tracingClient } from \"./generated/src/tracing.js\";\nconst minimumTypingIntervalInMilliSeconds = 8000;\n/**\n * The client to do chat operations\n */\nexport class ChatThreadClient {\n  constructor(endpoint, threadId, credential, options = {}) {\n    this.endpoint = endpoint;\n    this.timeOfLastTypingRequest = undefined;\n    this.threadId = threadId;\n    this.tokenCredential = credential;\n    const internalPipelineOptions = Object.assign(Object.assign({}, options), {\n      loggingOptions: {\n        logger: logger.info\n      }\n    });\n    this.client = new ChatApiClient(this.endpoint, Object.assign({\n      endpoint: this.endpoint\n    }, internalPipelineOptions));\n    const authPolicy = createCommunicationTokenCredentialPolicy(this.tokenCredential);\n    this.client.pipeline.addPolicy(authPolicy);\n  }\n  /**\n   * Gets a chat thread.\n   * Returns the chat thread.\n   * @param options -  Operation options.\n   */\n  getProperties(options = {}) {\n    var _this = this;\n    return tracingClient.withSpan(\"ChatClient-GetProperties\", options, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (updatedOptions) {\n        const result = yield _this.client.chatThread.getChatThreadProperties(_this.threadId, updatedOptions);\n        return mapToChatThreadPropertiesSdkModel(result);\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Updates a thread's topic.\n   * @param topic - The topic needs to be updated to.\n   * @param options - Operation options.\n   */\n  updateTopic(topic, options = {}) {\n    var _this2 = this;\n    return tracingClient.withSpan(\"ChatThreadClient-UpdateTopic\", options, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (updatedOptions) {\n        yield _this2.client.chatThread.updateChatThreadProperties(_this2.threadId, {\n          topic: topic\n        }, updatedOptions);\n      });\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Updates a thread's properties.\n   * @param options - Operation options.\n   */\n  // beta release already named this option as UpdateChatThreadPropertiesOptions\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  updateProperties(options = {}) {\n    var _this3 = this;\n    return tracingClient.withSpan(\"ChatThreadClient-UpdateProperties\", options, /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (updatedOptions) {\n        yield _this3.client.chatThread.updateChatThreadProperties(_this3.threadId, options, updatedOptions);\n      });\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Sends a chat message to a thread identified by threadId.\n   * Returns the id of the created message.\n   * @param request - Request for sending a message.\n   * @param options - Operation options.\n   */\n  sendMessage(request, options = {}) {\n    var _this4 = this;\n    return tracingClient.withSpan(\"ChatThreadClient-SendMessage\", options, /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (updatedOptions) {\n        // reset typing notification clock\n        _this4.timeOfLastTypingRequest = undefined;\n        const result = yield _this4.client.chatThread.sendChatMessage(_this4.threadId, Object.assign(Object.assign({}, request), options), updatedOptions);\n        return result;\n      });\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Gets a chat message identified by messageId.\n   * Returns the specific message.\n   * @param messageId - The message id of the message.\n   * @param options - Operation options.\n   */\n  getMessage(messageId, options = {}) {\n    var _this5 = this;\n    return tracingClient.withSpan(\"ChatThreadClient-GetMessage\", options, /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (updatedOptions) {\n        const result = yield _this5.client.chatThread.getChatMessage(_this5.threadId, messageId, updatedOptions);\n        return mapToChatMessageSdkModel(result);\n      });\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  }\n  listMessagesPage(pageSettings_1) {\n    return __asyncGenerator(this, arguments, function* listMessagesPage_1(pageSettings, options = {}) {\n      if (!pageSettings.continuationToken) {\n        const currentSetResponse = yield __await(this.client.chatThread.listChatMessages(this.threadId, options));\n        pageSettings.continuationToken = currentSetResponse.nextLink;\n        if (currentSetResponse.value) {\n          yield yield __await(currentSetResponse.value.map(mapToChatMessageSdkModel, this));\n        }\n      }\n      while (pageSettings.continuationToken) {\n        const currentSetResponse = yield __await(this.client.chatThread.listChatMessagesNext(this.threadId, pageSettings.continuationToken, options));\n        pageSettings.continuationToken = currentSetResponse.nextLink;\n        if (currentSetResponse.value) {\n          yield yield __await(currentSetResponse.value.map(mapToChatMessageSdkModel, this));\n        } else {\n          break;\n        }\n      }\n    });\n  }\n  listMessagesAll(options) {\n    return __asyncGenerator(this, arguments, function* listMessagesAll_1() {\n      var _a, e_1, _b, _c;\n      try {\n        for (var _d = true, _e = __asyncValues(this.listMessagesPage({}, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n          _c = _f.value;\n          _d = false;\n          const page = _c;\n          yield __await(yield* __asyncDelegator(__asyncValues(page)));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    });\n  }\n  /**\n   * Gets a list of message from a thread identified by threadId.\n   * Returns the list of the messages.\n   * @param options - Get messages options.\n   */\n  listMessages(options = {}) {\n    const {\n      span,\n      updatedOptions\n    } = tracingClient.startSpan(\"ChatThreadClient-ListMessages\", options);\n    try {\n      const iter = this.listMessagesAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings = {}) => {\n          return this.listMessagesPage(settings, updatedOptions);\n        }\n      };\n    } catch (e) {\n      span.setStatus({\n        status: \"error\",\n        error: e\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Deletes a message identified by threadId and messageId\n   * @param messageId - The message id of the message.\n   * @param options - Operation options.\n   */\n  deleteMessage(messageId, options = {}) {\n    var _this6 = this;\n    return tracingClient.withSpan(\"ChatThreadClient-DeleteMessage\", options, /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(function* (updatedOptions) {\n        yield _this6.client.chatThread.deleteChatMessage(_this6.threadId, messageId, updatedOptions);\n      });\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Updates a message identified by threadId and messageId\n   * @param messageId - The message id of the message.\n   * @param options - Operation options.\n   */\n  updateMessage(_x7) {\n    var _this7 = this;\n    return _asyncToGenerator(function* (messageId, options = {}) {\n      return tracingClient.withSpan(\"ChatThreadClient-UpdateMessage\", options, /*#__PURE__*/function () {\n        var _ref7 = _asyncToGenerator(function* (updatedOptions) {\n          yield _this7.client.chatThread.updateChatMessage(_this7.threadId, messageId, options, updatedOptions);\n        });\n        return function (_x8) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n    }).apply(this, arguments);\n  }\n  /**\n   * Adds the details of chat participants belonging to the thread identified by threadId.\n   * @param request - Thread participants' details to add in the thread roster\n   * @param options - Operation options.\n   */\n  addParticipants(_x9) {\n    var _this8 = this;\n    return _asyncToGenerator(function* (request, options = {}) {\n      return tracingClient.withSpan(\"ChatThreadClient-AddParticipants\", options, /*#__PURE__*/function () {\n        var _ref8 = _asyncToGenerator(function* (updatedOptions) {\n          const result = yield _this8.client.chatThread.addChatParticipants(_this8.threadId, mapToAddChatParticipantsRequestRestModel(request), updatedOptions);\n          return result;\n        });\n        return function (_x0) {\n          return _ref8.apply(this, arguments);\n        };\n      }());\n    }).apply(this, arguments);\n  }\n  listParticipantsPage(continuationState_1) {\n    return __asyncGenerator(this, arguments, function* listParticipantsPage_1(continuationState, options = {}) {\n      if (!continuationState.continuationToken) {\n        const currentSetResponse = yield __await(this.client.chatThread.listChatParticipants(this.threadId, options));\n        continuationState.continuationToken = currentSetResponse.nextLink;\n        if (currentSetResponse.value) {\n          yield yield __await(currentSetResponse.value.map(mapToChatParticipantSdkModel, this));\n        }\n      }\n      while (continuationState.continuationToken) {\n        const currentSetResponse = yield __await(this.client.chatThread.listChatParticipantsNext(this.threadId, continuationState.continuationToken, options));\n        continuationState.continuationToken = currentSetResponse.nextLink;\n        if (currentSetResponse.value) {\n          yield yield __await(currentSetResponse.value.map(mapToChatParticipantSdkModel, this));\n        } else {\n          break;\n        }\n      }\n    });\n  }\n  listParticipantsAll(options) {\n    return __asyncGenerator(this, arguments, function* listParticipantsAll_1() {\n      var _a, e_2, _b, _c;\n      try {\n        for (var _d = true, _e = __asyncValues(this.listParticipantsPage({}, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n          _c = _f.value;\n          _d = false;\n          const page = _c;\n          yield __await(yield* __asyncDelegator(__asyncValues(page)));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    });\n  }\n  /**\n   * Gets the participants of the thread identified by threadId.\n   * Returns the lists of the participants.\n   * @param options - Operation options.\n   */\n  listParticipants(options = {}) {\n    const {\n      span,\n      updatedOptions\n    } = tracingClient.startSpan(\"ChatThreadClient-ListParticipants\", options);\n    try {\n      const iter = this.listParticipantsAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings = {}) => {\n          return this.listParticipantsPage(settings, updatedOptions);\n        }\n      };\n    } catch (e) {\n      span.setStatus({\n        status: \"error\",\n        error: e\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Removes participant from the thread identified by threadId.\n   * @param participant - Thread participant to remove from the thread roster\n   * @param options - Operation options.\n   */\n  removeParticipant(_x1) {\n    var _this9 = this;\n    return _asyncToGenerator(function* (participant, options = {}) {\n      return tracingClient.withSpan(\"ChatThreadClient-RemoveParticipant\", options, /*#__PURE__*/function () {\n        var _ref9 = _asyncToGenerator(function* (updatedOptions) {\n          yield _this9.client.chatThread.removeChatParticipant(_this9.threadId, serializeCommunicationIdentifier(participant), updatedOptions);\n        });\n        return function (_x10) {\n          return _ref9.apply(this, arguments);\n        };\n      }());\n    }).apply(this, arguments);\n  }\n  /**\n   * Sends a typing notification to the thread.\n   * Doesn't attempt to send if the time since last notification is smaller than the minimum typing interval\n   * @param options - - Operation options\n   * @returns True if the typing message notification could be sent, otherwise false.\n   */\n  sendTypingNotification() {\n    var _this0 = this;\n    return _asyncToGenerator(function* (options = {}) {\n      return tracingClient.withSpan(\"ChatThreadClient-SendTypingNotification\", options, /*#__PURE__*/function () {\n        var _ref0 = _asyncToGenerator(function* (updatedOptions) {\n          const dateNow = new Date();\n          const {\n              senderDisplayName\n            } = updatedOptions,\n            restOptions = __rest(updatedOptions, [\"senderDisplayName\"]);\n          if (_this0.canPostTypingNotification(dateNow)) {\n            _this0.timeOfLastTypingRequest = dateNow;\n            yield _this0.client.chatThread.sendTypingNotification(_this0.threadId, Object.assign({\n              sendTypingNotificationRequest: {\n                senderDisplayName: senderDisplayName\n              }\n            }, restOptions));\n            return true;\n          }\n          logger.info(`Typing Notification NOT Send. [thread_id=${_this0.threadId}]`);\n          return false;\n        });\n        return function (_x11) {\n          return _ref0.apply(this, arguments);\n        };\n      }());\n    }).apply(this, arguments);\n  }\n  /**\n   * Sends a read receipt to the thread identified by threadId.\n   * @param request - Request for sending a read receipt\n   * @param options - Operation options.\n   */\n  sendReadReceipt(_x12) {\n    var _this1 = this;\n    return _asyncToGenerator(function* (request, options = {}) {\n      return tracingClient.withSpan(\"ChatThreadClient-SendReadReceipt\", options, /*#__PURE__*/function () {\n        var _ref1 = _asyncToGenerator(function* (updatedOptions) {\n          yield _this1.client.chatThread.sendChatReadReceipt(_this1.threadId, request, updatedOptions);\n        });\n        return function (_x13) {\n          return _ref1.apply(this, arguments);\n        };\n      }());\n    }).apply(this, arguments);\n  }\n  listReadReceiptsPage(continuationState_1) {\n    return __asyncGenerator(this, arguments, function* listReadReceiptsPage_1(continuationState, options = {}) {\n      if (!continuationState.continuationToken) {\n        const currentSetResponse = yield __await(this.client.chatThread.listChatReadReceipts(this.threadId, options));\n        continuationState.continuationToken = currentSetResponse.nextLink;\n        if (currentSetResponse.value) {\n          yield yield __await(currentSetResponse.value.map(mapToReadReceiptSdkModel, this));\n        }\n      }\n      while (continuationState.continuationToken) {\n        const currentSetResponse = yield __await(this.client.chatThread.listChatReadReceiptsNext(this.threadId, continuationState.continuationToken, options));\n        continuationState.continuationToken = currentSetResponse.nextLink;\n        if (currentSetResponse.value) {\n          yield yield __await(currentSetResponse.value.map(mapToReadReceiptSdkModel, this));\n        } else {\n          break;\n        }\n      }\n    });\n  }\n  listReadReceiptsAll(options) {\n    return __asyncGenerator(this, arguments, function* listReadReceiptsAll_1() {\n      var _a, e_3, _b, _c;\n      try {\n        for (var _d = true, _e = __asyncValues(this.listReadReceiptsPage({}, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n          _c = _f.value;\n          _d = false;\n          const page = _c;\n          yield __await(yield* __asyncDelegator(__asyncValues(page)));\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n    });\n  }\n  /**\n   * Gets a list of read receipt from a thread identified by threadId.\n   * Returns the list of the messages.\n   * @param options - Get messages options.\n   */\n  listReadReceipts(options = {}) {\n    const {\n      span,\n      updatedOptions\n    } = tracingClient.startSpan(\"ChatThreadClient-ListChatReadReceipts\", options);\n    try {\n      const iter = this.listReadReceiptsAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings = {}) => {\n          return this.listReadReceiptsPage(settings, updatedOptions);\n        }\n      };\n    } catch (e) {\n      span.setStatus({\n        status: \"error\",\n        error: e\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  canPostTypingNotification(dateNow) {\n    if (this.timeOfLastTypingRequest) {\n      const timeSinceLastRequestInMilliSeconds = dateNow.getTime() - this.timeOfLastTypingRequest.getTime();\n      if (timeSinceLastRequestInMilliSeconds < minimumTypingIntervalInMilliSeconds) {\n        logger.info(`Typing interval check failed. [last_request=${this.timeOfLastTypingRequest}]`);\n        return false;\n      }\n    }\n    return true;\n  }\n}","map":{"version":3,"names":["__asyncDelegator","__asyncGenerator","__asyncValues","__await","__rest","logger","serializeCommunicationIdentifier","mapToAddChatParticipantsRequestRestModel","mapToChatMessageSdkModel","mapToChatParticipantSdkModel","mapToChatThreadPropertiesSdkModel","mapToReadReceiptSdkModel","ChatApiClient","createCommunicationTokenCredentialPolicy","tracingClient","minimumTypingIntervalInMilliSeconds","ChatThreadClient","constructor","endpoint","threadId","credential","options","timeOfLastTypingRequest","undefined","tokenCredential","internalPipelineOptions","Object","assign","loggingOptions","info","client","authPolicy","pipeline","addPolicy","getProperties","_this","withSpan","_ref","_asyncToGenerator","updatedOptions","result","chatThread","getChatThreadProperties","_x","apply","arguments","updateTopic","topic","_this2","_ref2","updateChatThreadProperties","_x2","updateProperties","_this3","_ref3","_x3","sendMessage","request","_this4","_ref4","sendChatMessage","_x4","getMessage","messageId","_this5","_ref5","getChatMessage","_x5","listMessagesPage","pageSettings_1","listMessagesPage_1","pageSettings","continuationToken","currentSetResponse","listChatMessages","nextLink","value","map","listChatMessagesNext","listMessagesAll","listMessagesAll_1","_a","e_1","_b","_c","_d","_e","_f","next","done","page","e_1_1","error","return","call","listMessages","span","startSpan","iter","Symbol","asyncIterator","byPage","settings","e","setStatus","status","end","deleteMessage","_this6","_ref6","deleteChatMessage","_x6","updateMessage","_x7","_this7","_ref7","updateChatMessage","_x8","addParticipants","_x9","_this8","_ref8","addChatParticipants","_x0","listParticipantsPage","continuationState_1","listParticipantsPage_1","continuationState","listChatParticipants","listChatParticipantsNext","listParticipantsAll","listParticipantsAll_1","e_2","e_2_1","listParticipants","removeParticipant","_x1","_this9","participant","_ref9","removeChatParticipant","_x10","sendTypingNotification","_this0","_ref0","dateNow","Date","senderDisplayName","restOptions","canPostTypingNotification","sendTypingNotificationRequest","_x11","sendReadReceipt","_x12","_this1","_ref1","sendChatReadReceipt","_x13","listReadReceiptsPage","listReadReceiptsPage_1","listChatReadReceipts","listChatReadReceiptsNext","listReadReceiptsAll","listReadReceiptsAll_1","e_3","e_3_1","listReadReceipts","timeSinceLastRequestInMilliSeconds","getTime"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/communication-chat/dist/browser/chatThreadClient.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __rest } from \"tslib\";\nimport { logger } from \"./models/logger.js\";\nimport { serializeCommunicationIdentifier } from \"@azure/communication-common\";\nimport { mapToAddChatParticipantsRequestRestModel, mapToChatMessageSdkModel, mapToChatParticipantSdkModel, mapToChatThreadPropertiesSdkModel, mapToReadReceiptSdkModel, } from \"./models/mappers.js\";\nimport { ChatApiClient, } from \"./generated/src/index.js\";\nimport { createCommunicationTokenCredentialPolicy } from \"./credential/communicationTokenCredentialPolicy.js\";\nimport { tracingClient } from \"./generated/src/tracing.js\";\nconst minimumTypingIntervalInMilliSeconds = 8000;\n/**\n * The client to do chat operations\n */\nexport class ChatThreadClient {\n    constructor(endpoint, threadId, credential, options = {}) {\n        this.endpoint = endpoint;\n        this.timeOfLastTypingRequest = undefined;\n        this.threadId = threadId;\n        this.tokenCredential = credential;\n        const internalPipelineOptions = Object.assign(Object.assign({}, options), {\n            loggingOptions: {\n                logger: logger.info,\n            },\n        });\n        this.client = new ChatApiClient(this.endpoint, Object.assign({ endpoint: this.endpoint }, internalPipelineOptions));\n        const authPolicy = createCommunicationTokenCredentialPolicy(this.tokenCredential);\n        this.client.pipeline.addPolicy(authPolicy);\n    }\n    /**\n     * Gets a chat thread.\n     * Returns the chat thread.\n     * @param options -  Operation options.\n     */\n    getProperties(options = {}) {\n        return tracingClient.withSpan(\"ChatClient-GetProperties\", options, async (updatedOptions) => {\n            const result = await this.client.chatThread.getChatThreadProperties(this.threadId, updatedOptions);\n            return mapToChatThreadPropertiesSdkModel(result);\n        });\n    }\n    /**\n     * Updates a thread's topic.\n     * @param topic - The topic needs to be updated to.\n     * @param options - Operation options.\n     */\n    updateTopic(topic, options = {}) {\n        return tracingClient.withSpan(\"ChatThreadClient-UpdateTopic\", options, async (updatedOptions) => {\n            await this.client.chatThread.updateChatThreadProperties(this.threadId, { topic: topic }, updatedOptions);\n        });\n    }\n    /**\n     * Updates a thread's properties.\n     * @param options - Operation options.\n     */\n    // beta release already named this option as UpdateChatThreadPropertiesOptions\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    updateProperties(options = {}) {\n        return tracingClient.withSpan(\"ChatThreadClient-UpdateProperties\", options, async (updatedOptions) => {\n            await this.client.chatThread.updateChatThreadProperties(this.threadId, options, updatedOptions);\n        });\n    }\n    /**\n     * Sends a chat message to a thread identified by threadId.\n     * Returns the id of the created message.\n     * @param request - Request for sending a message.\n     * @param options - Operation options.\n     */\n    sendMessage(request, options = {}) {\n        return tracingClient.withSpan(\"ChatThreadClient-SendMessage\", options, async (updatedOptions) => {\n            // reset typing notification clock\n            this.timeOfLastTypingRequest = undefined;\n            const result = await this.client.chatThread.sendChatMessage(this.threadId, Object.assign(Object.assign({}, request), options), updatedOptions);\n            return result;\n        });\n    }\n    /**\n     * Gets a chat message identified by messageId.\n     * Returns the specific message.\n     * @param messageId - The message id of the message.\n     * @param options - Operation options.\n     */\n    getMessage(messageId, options = {}) {\n        return tracingClient.withSpan(\"ChatThreadClient-GetMessage\", options, async (updatedOptions) => {\n            const result = await this.client.chatThread.getChatMessage(this.threadId, messageId, updatedOptions);\n            return mapToChatMessageSdkModel(result);\n        });\n    }\n    listMessagesPage(pageSettings_1) {\n        return __asyncGenerator(this, arguments, function* listMessagesPage_1(pageSettings, options = {}) {\n            if (!pageSettings.continuationToken) {\n                const currentSetResponse = yield __await(this.client.chatThread.listChatMessages(this.threadId, options));\n                pageSettings.continuationToken = currentSetResponse.nextLink;\n                if (currentSetResponse.value) {\n                    yield yield __await(currentSetResponse.value.map(mapToChatMessageSdkModel, this));\n                }\n            }\n            while (pageSettings.continuationToken) {\n                const currentSetResponse = yield __await(this.client.chatThread.listChatMessagesNext(this.threadId, pageSettings.continuationToken, options));\n                pageSettings.continuationToken = currentSetResponse.nextLink;\n                if (currentSetResponse.value) {\n                    yield yield __await(currentSetResponse.value.map(mapToChatMessageSdkModel, this));\n                }\n                else {\n                    break;\n                }\n            }\n        });\n    }\n    listMessagesAll(options) {\n        return __asyncGenerator(this, arguments, function* listMessagesAll_1() {\n            var _a, e_1, _b, _c;\n            try {\n                for (var _d = true, _e = __asyncValues(this.listMessagesPage({}, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const page = _c;\n                    yield __await(yield* __asyncDelegator(__asyncValues(page)));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Gets a list of message from a thread identified by threadId.\n     * Returns the list of the messages.\n     * @param options - Get messages options.\n     */\n    listMessages(options = {}) {\n        const { span, updatedOptions } = tracingClient.startSpan(\"ChatThreadClient-ListMessages\", options);\n        try {\n            const iter = this.listMessagesAll(updatedOptions);\n            return {\n                next() {\n                    return iter.next();\n                },\n                [Symbol.asyncIterator]() {\n                    return this;\n                },\n                byPage: (settings = {}) => {\n                    return this.listMessagesPage(settings, updatedOptions);\n                },\n            };\n        }\n        catch (e) {\n            span.setStatus({\n                status: \"error\",\n                error: e,\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Deletes a message identified by threadId and messageId\n     * @param messageId - The message id of the message.\n     * @param options - Operation options.\n     */\n    deleteMessage(messageId, options = {}) {\n        return tracingClient.withSpan(\"ChatThreadClient-DeleteMessage\", options, async (updatedOptions) => {\n            await this.client.chatThread.deleteChatMessage(this.threadId, messageId, updatedOptions);\n        });\n    }\n    /**\n     * Updates a message identified by threadId and messageId\n     * @param messageId - The message id of the message.\n     * @param options - Operation options.\n     */\n    async updateMessage(messageId, options = {}) {\n        return tracingClient.withSpan(\"ChatThreadClient-UpdateMessage\", options, async (updatedOptions) => {\n            await this.client.chatThread.updateChatMessage(this.threadId, messageId, options, updatedOptions);\n        });\n    }\n    /**\n     * Adds the details of chat participants belonging to the thread identified by threadId.\n     * @param request - Thread participants' details to add in the thread roster\n     * @param options - Operation options.\n     */\n    async addParticipants(request, options = {}) {\n        return tracingClient.withSpan(\"ChatThreadClient-AddParticipants\", options, async (updatedOptions) => {\n            const result = await this.client.chatThread.addChatParticipants(this.threadId, mapToAddChatParticipantsRequestRestModel(request), updatedOptions);\n            return result;\n        });\n    }\n    listParticipantsPage(continuationState_1) {\n        return __asyncGenerator(this, arguments, function* listParticipantsPage_1(continuationState, options = {}) {\n            if (!continuationState.continuationToken) {\n                const currentSetResponse = yield __await(this.client.chatThread.listChatParticipants(this.threadId, options));\n                continuationState.continuationToken = currentSetResponse.nextLink;\n                if (currentSetResponse.value) {\n                    yield yield __await(currentSetResponse.value.map(mapToChatParticipantSdkModel, this));\n                }\n            }\n            while (continuationState.continuationToken) {\n                const currentSetResponse = yield __await(this.client.chatThread.listChatParticipantsNext(this.threadId, continuationState.continuationToken, options));\n                continuationState.continuationToken = currentSetResponse.nextLink;\n                if (currentSetResponse.value) {\n                    yield yield __await(currentSetResponse.value.map(mapToChatParticipantSdkModel, this));\n                }\n                else {\n                    break;\n                }\n            }\n        });\n    }\n    listParticipantsAll(options) {\n        return __asyncGenerator(this, arguments, function* listParticipantsAll_1() {\n            var _a, e_2, _b, _c;\n            try {\n                for (var _d = true, _e = __asyncValues(this.listParticipantsPage({}, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const page = _c;\n                    yield __await(yield* __asyncDelegator(__asyncValues(page)));\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Gets the participants of the thread identified by threadId.\n     * Returns the lists of the participants.\n     * @param options - Operation options.\n     */\n    listParticipants(options = {}) {\n        const { span, updatedOptions } = tracingClient.startSpan(\"ChatThreadClient-ListParticipants\", options);\n        try {\n            const iter = this.listParticipantsAll(updatedOptions);\n            return {\n                next() {\n                    return iter.next();\n                },\n                [Symbol.asyncIterator]() {\n                    return this;\n                },\n                byPage: (settings = {}) => {\n                    return this.listParticipantsPage(settings, updatedOptions);\n                },\n            };\n        }\n        catch (e) {\n            span.setStatus({\n                status: \"error\",\n                error: e,\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Removes participant from the thread identified by threadId.\n     * @param participant - Thread participant to remove from the thread roster\n     * @param options - Operation options.\n     */\n    async removeParticipant(participant, options = {}) {\n        return tracingClient.withSpan(\"ChatThreadClient-RemoveParticipant\", options, async (updatedOptions) => {\n            await this.client.chatThread.removeChatParticipant(this.threadId, serializeCommunicationIdentifier(participant), updatedOptions);\n        });\n    }\n    /**\n     * Sends a typing notification to the thread.\n     * Doesn't attempt to send if the time since last notification is smaller than the minimum typing interval\n     * @param options - - Operation options\n     * @returns True if the typing message notification could be sent, otherwise false.\n     */\n    async sendTypingNotification(options = {}) {\n        return tracingClient.withSpan(\"ChatThreadClient-SendTypingNotification\", options, async (updatedOptions) => {\n            const dateNow = new Date();\n            const { senderDisplayName } = updatedOptions, restOptions = __rest(updatedOptions, [\"senderDisplayName\"]);\n            if (this.canPostTypingNotification(dateNow)) {\n                this.timeOfLastTypingRequest = dateNow;\n                await this.client.chatThread.sendTypingNotification(this.threadId, Object.assign({ sendTypingNotificationRequest: { senderDisplayName: senderDisplayName } }, restOptions));\n                return true;\n            }\n            logger.info(`Typing Notification NOT Send. [thread_id=${this.threadId}]`);\n            return false;\n        });\n    }\n    /**\n     * Sends a read receipt to the thread identified by threadId.\n     * @param request - Request for sending a read receipt\n     * @param options - Operation options.\n     */\n    async sendReadReceipt(request, options = {}) {\n        return tracingClient.withSpan(\"ChatThreadClient-SendReadReceipt\", options, async (updatedOptions) => {\n            await this.client.chatThread.sendChatReadReceipt(this.threadId, request, updatedOptions);\n        });\n    }\n    listReadReceiptsPage(continuationState_1) {\n        return __asyncGenerator(this, arguments, function* listReadReceiptsPage_1(continuationState, options = {}) {\n            if (!continuationState.continuationToken) {\n                const currentSetResponse = yield __await(this.client.chatThread.listChatReadReceipts(this.threadId, options));\n                continuationState.continuationToken = currentSetResponse.nextLink;\n                if (currentSetResponse.value) {\n                    yield yield __await(currentSetResponse.value.map(mapToReadReceiptSdkModel, this));\n                }\n            }\n            while (continuationState.continuationToken) {\n                const currentSetResponse = yield __await(this.client.chatThread.listChatReadReceiptsNext(this.threadId, continuationState.continuationToken, options));\n                continuationState.continuationToken = currentSetResponse.nextLink;\n                if (currentSetResponse.value) {\n                    yield yield __await(currentSetResponse.value.map(mapToReadReceiptSdkModel, this));\n                }\n                else {\n                    break;\n                }\n            }\n        });\n    }\n    listReadReceiptsAll(options) {\n        return __asyncGenerator(this, arguments, function* listReadReceiptsAll_1() {\n            var _a, e_3, _b, _c;\n            try {\n                for (var _d = true, _e = __asyncValues(this.listReadReceiptsPage({}, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const page = _c;\n                    yield __await(yield* __asyncDelegator(__asyncValues(page)));\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        });\n    }\n    /**\n     * Gets a list of read receipt from a thread identified by threadId.\n     * Returns the list of the messages.\n     * @param options - Get messages options.\n     */\n    listReadReceipts(options = {}) {\n        const { span, updatedOptions } = tracingClient.startSpan(\"ChatThreadClient-ListChatReadReceipts\", options);\n        try {\n            const iter = this.listReadReceiptsAll(updatedOptions);\n            return {\n                next() {\n                    return iter.next();\n                },\n                [Symbol.asyncIterator]() {\n                    return this;\n                },\n                byPage: (settings = {}) => {\n                    return this.listReadReceiptsPage(settings, updatedOptions);\n                },\n            };\n        }\n        catch (e) {\n            span.setStatus({\n                status: \"error\",\n                error: e,\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    canPostTypingNotification(dateNow) {\n        if (this.timeOfLastTypingRequest) {\n            const timeSinceLastRequestInMilliSeconds = dateNow.getTime() - this.timeOfLastTypingRequest.getTime();\n            if (timeSinceLastRequestInMilliSeconds < minimumTypingIntervalInMilliSeconds) {\n                logger.info(`Typing interval check failed. [last_request=${this.timeOfLastTypingRequest}]`);\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}