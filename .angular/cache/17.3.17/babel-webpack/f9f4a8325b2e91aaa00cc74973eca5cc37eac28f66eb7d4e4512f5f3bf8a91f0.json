{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport { tracingClient } from \"../tracing.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\n/** Class containing Chat operations. */\nexport class ChatImpl {\n  /**\n   * Initialize a new instance of the class Chat class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Creates a chat thread.\n   * @param createChatThreadRequest Request payload for creating a chat thread.\n   * @param options The options parameters.\n   */\n  createChatThread(createChatThreadRequest, options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.createChatThread\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (options) {\n          return _this.client.sendOperationRequest({\n            createChatThreadRequest,\n            options\n          }, createChatThreadOperationSpec);\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Gets the list of chat threads of a user.\n   * @param options The options parameters.\n   */\n  listChatThreads(options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatThreads\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (options) {\n          return _this2.client.sendOperationRequest({\n            options\n          }, listChatThreadsOperationSpec);\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Deletes a thread.\n   * @param chatThreadId Id of the thread to be deleted.\n   * @param options The options parameters.\n   */\n  deleteChatThread(chatThreadId, options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.deleteChatThread\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (options) {\n          return _this3.client.sendOperationRequest({\n            chatThreadId,\n            options\n          }, deleteChatThreadOperationSpec);\n        });\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * ListChatThreadsNext\n   * @param nextLink The nextLink from the previous successful call to the ListChatThreads method.\n   * @param options The options parameters.\n   */\n  listChatThreadsNext(nextLink, options) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatThreadsNext\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (options) {\n          return _this4.client.sendOperationRequest({\n            nextLink,\n            options\n          }, listChatThreadsNextOperationSpec);\n        });\n        return function (_x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */false);\nconst createChatThreadOperationSpec = {\n  path: \"/chat/threads\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.CreateChatThreadResult\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.createChatThreadRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType, Parameters.repeatabilityRequestId],\n  mediaType: \"json\",\n  serializer\n};\nconst listChatThreadsOperationSpec = {\n  path: \"/chat/threads\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatThreadsItemCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.maxPageSize, Parameters.apiVersion, Parameters.startTime],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteChatThreadOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listChatThreadsNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatThreadsItemCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n//# sourceMappingURL=chat.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}