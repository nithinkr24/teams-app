{"ast":null,"code":"import { sendAndHandleStatusAndReason as e } from \"../internal/communication.js\";\nimport { createTeamsDeepLinkForCalendar as t } from \"../internal/deepLinkUtilities.js\";\nimport { ensureInitialized as n } from \"../internal/internalAPIs.js\";\nimport { getApiVersionTag as r } from \"../internal/telemetry.js\";\nimport { FrameContexts as o } from \"./constants.js\";\nimport { runtime as i } from \"./runtime.js\";\nfunction m(t) {\n  return new Promise(m => {\n    if (n(i, o.content), !s()) throw new Error(\"Not supported\");\n    if (!t.itemId || !t.itemId.trim()) throw new Error(\"Must supply an itemId to openCalendarItem\");\n    m(e(r(\"v2\", \"calendar.openCalendarItem\"), \"calendar.openCalendarItem\", t));\n  });\n}\nfunction a(m) {\n  return new Promise(a => {\n    if (n(i, o.content), !s()) throw new Error(\"Not supported\");\n    const p = r(\"v2\", \"calendar.composeMeeting\");\n    i.isLegacyTeams ? a(e(p, \"executeDeepLink\", t(m.attendees, m.startTime, m.endTime, m.subject, m.content))) : a(e(p, \"calendar.composeMeeting\", m));\n  });\n}\nfunction s() {\n  return !(!n(i) || !i.supports.calendar);\n}\nexport { a as composeMeeting, s as isSupported, m as openCalendarItem };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}