{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject, takeUntil } from 'rxjs';\nimport { ThreadItemStatus } from '../../services/threads.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../teams-fx.service\";\nimport * as i2 from \"../../services/threads.service\";\nimport * as i3 from \"../../services/agent.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../chat-screen/chat-screen.component\";\nimport * as i6 from \"../thread-list/thread-list.component\";\nimport * as i7 from \"../error-screen/error-screen.component\";\nimport * as i8 from \"../toast-notification/toast-notification.component\";\nfunction AgentScreenComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelement(1, \"app-error-screen\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.errorMessage);\n  }\n}\nfunction AgentScreenComponent_div_2_app_toast_notification_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-toast-notification\", 9);\n    i0.ɵɵlistener(\"onViewThread\", function AgentScreenComponent_div_2_app_toast_notification_1_Template_app_toast_notification_onViewThread_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.handleOnViewThread($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"toasterId\", ctx_r0.resolvedThreadId)(\"showToast\", !!ctx_r0.resolvedThreadId)(\"toastBodyMessage\", ctx_r0.resolvedThreadCustomerDisplayName || \"\");\n  }\n}\nfunction AgentScreenComponent_div_2_app_chat_screen_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-chat-screen\", 10);\n    i0.ɵɵlistener(\"onResolveChat\", function AgentScreenComponent_div_2_app_chat_screen_4_Template_app_chat_screen_onResolveChat_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.handleOnResolveChat($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"token\", ctx_r0.token)(\"userId\", ctx_r0.userId)(\"displayName\", ctx_r0.displayName)(\"endpointUrl\", ctx_r0.endpointUrl)(\"threadId\", ctx_r0.selectedThreadId)(\"receiverName\", ctx_r0.getReceiverName())(\"threadStatus\", ctx_r0.getThreadStatus());\n  }\n}\nfunction AgentScreenComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, AgentScreenComponent_div_2_app_toast_notification_1_Template, 1, 3, \"app-toast-notification\", 5);\n    i0.ɵɵelementStart(2, \"app-thread-list\", 6);\n    i0.ɵɵlistener(\"onThreadSelected\", function AgentScreenComponent_div_2_Template_app_thread_list_onThreadSelected_2_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.setSelectedThreadId($event));\n    })(\"onStatusTabSelected\", function AgentScreenComponent_div_2_Template_app_thread_list_onStatusTabSelected_2_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.handleOnStatusTabSelected($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 7);\n    i0.ɵɵtemplate(4, AgentScreenComponent_div_2_app_chat_screen_4_Template, 1, 7, \"app-chat-screen\", 8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.resolvedThreadId);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"selectedThreadId\", ctx_r0.selectedThreadId)(\"threads\", ctx_r0.threads)(\"isLoading\", !ctx_r0.endpointUrl || ctx_r0.isLoading)(\"tabs\", ctx_r0.tabs)(\"selectedTab\", ctx_r0.selectedTab);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.selectedThreadId && ctx_r0.token && ctx_r0.endpointUrl && ctx_r0.userId && ctx_r0.displayName);\n  }\n}\nexport let AgentScreenComponent = /*#__PURE__*/(() => {\n  var _AgentScreenComponent;\n  class AgentScreenComponent {\n    constructor(teamsFxService, threadsService, agentService) {\n      this.teamsFxService = teamsFxService;\n      this.threadsService = threadsService;\n      this.agentService = agentService;\n      this.destroy$ = new Subject();\n      this.token = '';\n      this.userId = '';\n      this.displayName = '';\n      this.endpointUrl = '';\n      this.tabs = ['Active', 'Resolved'];\n      this.selectedTab = 'Active';\n      this.threads = [];\n      this.isLoading = false;\n    }\n    ngOnInit() {\n      this.initializeScreen();\n      this.subscribeToThreads();\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    initializeScreen() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const userInfo = yield _this.teamsFxService.getUserInfo();\n          if (!userInfo) {\n            _this.errorMessage = 'Failed to get Teams user info';\n            return;\n          }\n          const getSalesRepInfo = yield _this.agentService.getSalesRepInfo(userInfo.objectId);\n          if (!getSalesRepInfo) {\n            _this.errorMessage = 'Failed to get sales rep info';\n            return;\n          }\n          const agentACSUser = yield _this.agentService.getAgentACSUser(userInfo.objectId);\n          if (!agentACSUser) {\n            _this.errorMessage = 'Failed to link to ACS user';\n            return;\n          }\n          // this.endpointUrl = await this.agentService.getEndpointUrl();\n          _this.endpointUrl = 'https://teamspocbot.unitedstates.communication.azure.com';\n          const tokenResponse = yield _this.agentService.getToken(agentACSUser.acsUserId);\n          _this.token = tokenResponse.token;\n          _this.userId = agentACSUser.acsUserId;\n          _this.displayName = agentACSUser.displayName;\n          yield _this.threadsService.initializeChatClient(_this.userId, _this.token, _this.endpointUrl);\n        } catch (error) {\n          console.error('Failed to set screen state due to error: ', error);\n          _this.errorMessage = 'Failed to initialize screen';\n        }\n      })();\n    }\n    refreshThreads() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this2.threadsService.refreshThreads();\n        } catch (error) {\n          console.error('Failed to refresh threads:', error);\n          _this2.showErrorMessage('Failed to refresh threads. Please try again.');\n        }\n      })();\n    }\n    showErrorMessage(message) {\n      const errorDiv = document.createElement('div');\n      errorDiv.className = 'error-message';\n      errorDiv.textContent = message;\n      errorDiv.style.cssText = `\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: #d13438;\n      color: white;\n      padding: 12px 20px;\n      border-radius: 4px;\n      z-index: 1000;\n      font-size: 14px;\n    `;\n      document.body.appendChild(errorDiv);\n      // Remove after 3 seconds\n      setTimeout(() => {\n        if (errorDiv.parentNode) {\n          errorDiv.parentNode.removeChild(errorDiv);\n        }\n      }, 3000);\n    }\n    subscribeToThreads() {\n      this.threadsService.threads$.pipe(takeUntil(this.destroy$)).subscribe(threads => {\n        this.threads = threads;\n      });\n      this.threadsService.selectedThreadId$.pipe(takeUntil(this.destroy$)).subscribe(threadId => {\n        this.selectedThreadId = threadId;\n      });\n      this.threadsService.resolvedThreadId$.pipe(takeUntil(this.destroy$)).subscribe(threadId => {\n        console.log('Resolved thread ID changed to:', threadId);\n        this.resolvedThreadId = threadId;\n      });\n      this.threadsService.isLoading$.pipe(takeUntil(this.destroy$)).subscribe(loading => {\n        this.isLoading = loading;\n      });\n    }\n    setSelectedThreadId(threadId) {\n      console.log('Setting selected thread ID:', threadId);\n      this.threadsService.setSelectedThreadId(threadId);\n    }\n    handleOnResolveChat(threadId) {\n      console.log('Resolving chat for thread:', threadId);\n      // Update thread status to resolved\n      this.threadsService.updateThreadStatusExternal(threadId, ThreadItemStatus.RESOLVED);\n      // Get next active thread\n      const nextActiveThreadId = this.threadsService.getNextActiveThreadIdFromService(threadId);\n      if (nextActiveThreadId) {\n        console.log('Auto-selecting next active thread:', nextActiveThreadId);\n        this.setSelectedThreadId(nextActiveThreadId);\n      } else {\n        console.log('No next active thread found');\n      }\n    }\n    handleOnViewThread(threadId) {\n      console.log('Viewing resolved thread:', threadId);\n      this.setSelectedThreadId(threadId);\n      // Change tab to resolved if needed\n      const thread = this.threads.find(t => t.id === threadId);\n      if (thread && thread.status === ThreadItemStatus.RESOLVED) {\n        this.selectedTab = this.tabs[1]; // Resolved tab\n      }\n      // Clear resolved thread ID if it was this thread\n      if (this.resolvedThreadId === threadId) {\n        this.threadsService.setResolvedThreadId(undefined);\n      }\n    }\n    handleOnStatusTabSelected(tabValue) {\n      console.log('Status tab selected:', tabValue);\n      this.selectedTab = tabValue;\n      // Find first thread of selected status\n      const status = tabValue.toLowerCase();\n      const firstThreadOfSelectedTab = this.threads.find(thread => thread.status === status);\n      if (firstThreadOfSelectedTab) {\n        console.log('Selecting first thread of status:', status, firstThreadOfSelectedTab.id);\n        this.setSelectedThreadId(firstThreadOfSelectedTab.id);\n      } else {\n        console.log('No threads found for status:', status);\n        this.selectedThreadId = undefined;\n      }\n    }\n    getReceiverName() {\n      if (!this.selectedThreadId) return '';\n      const thread = this.threads.find(t => t.id === this.selectedThreadId);\n      return (thread === null || thread === void 0 ? void 0 : thread.topic) || '';\n    }\n    getThreadStatus() {\n      if (!this.selectedThreadId) return 'active';\n      const thread = this.threads.find(t => t.id === this.selectedThreadId);\n      return (thread === null || thread === void 0 ? void 0 : thread.status) || 'active';\n    }\n    get resolvedThreadCustomerDisplayName() {\n      if (!this.resolvedThreadId) return undefined;\n      const resolvedThread = this.threads.find(t => t.id === this.resolvedThreadId);\n      return resolvedThread === null || resolvedThread === void 0 ? void 0 : resolvedThread.topic;\n    }\n  }\n  _AgentScreenComponent = AgentScreenComponent;\n  _AgentScreenComponent.ɵfac = function AgentScreenComponent_Factory(t) {\n    return new (t || _AgentScreenComponent)(i0.ɵɵdirectiveInject(i1.TeamsFxService), i0.ɵɵdirectiveInject(i2.ThreadsService), i0.ɵɵdirectiveInject(i3.AgentService));\n  };\n  _AgentScreenComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _AgentScreenComponent,\n    selectors: [[\"app-agent-screen\"]],\n    decls: 3,\n    vars: 2,\n    consts: [[\"class\", \"error-container\", 4, \"ngIf\"], [\"class\", \"agent-screen-container\", 4, \"ngIf\"], [1, \"error-container\"], [3, \"errorMessage\"], [1, \"agent-screen-container\"], [3, \"toasterId\", \"showToast\", \"toastBodyMessage\", \"onViewThread\", 4, \"ngIf\"], [3, \"onThreadSelected\", \"onStatusTabSelected\", \"selectedThreadId\", \"threads\", \"isLoading\", \"tabs\", \"selectedTab\"], [1, \"chat-container\"], [3, \"token\", \"userId\", \"displayName\", \"endpointUrl\", \"threadId\", \"receiverName\", \"threadStatus\", \"onResolveChat\", 4, \"ngIf\"], [3, \"onViewThread\", \"toasterId\", \"showToast\", \"toastBodyMessage\"], [3, \"onResolveChat\", \"token\", \"userId\", \"displayName\", \"endpointUrl\", \"threadId\", \"receiverName\", \"threadStatus\"]],\n    template: function AgentScreenComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵtemplate(1, AgentScreenComponent_div_1_Template, 2, 1, \"div\", 0)(2, AgentScreenComponent_div_2_Template, 5, 7, \"div\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.errorMessage);\n      }\n    },\n    dependencies: [i4.NgIf, i5.ChatScreenComponent, i6.ThreadListComponent, i7.ErrorScreenComponent, i8.ToastNotificationComponent],\n    styles: [\".agent-screen-container[_ngcontent-%COMP%]{display:flex;height:100vh;min-height:500px;max-height:100vh;overflow:hidden}.chat-container[_ngcontent-%COMP%]{flex:1;display:flex;flex-direction:column;min-height:0;overflow:hidden}.error-container[_ngcontent-%COMP%]{height:100vh;display:flex;align-items:center;justify-content:center}@media (max-width: 768px){.agent-screen-container[_ngcontent-%COMP%]{min-height:400px}}@media (max-width: 480px){.agent-screen-container[_ngcontent-%COMP%]{min-height:300px}}\"]\n  });\n  return AgentScreenComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}