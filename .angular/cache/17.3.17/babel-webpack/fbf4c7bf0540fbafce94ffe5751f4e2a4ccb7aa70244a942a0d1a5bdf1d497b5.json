{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { parseConnectionString } from \"./connectionString.js\";\nconst isValidEndpoint = host => {\n  var _a;\n  const url = new URL(host);\n  return !!((_a = url.protocol) === null || _a === void 0 ? void 0 : _a.match(/^http[s]?/)) && url.host !== undefined && url.host !== \"\" && (url.pathname === undefined || url.pathname === \"\" || url.pathname === \"/\");\n};\nconst assertValidEndpoint = host => {\n  if (!isValidEndpoint(host)) {\n    throw new Error(`Invalid endpoint url ${host}`);\n  }\n};\n/**\n * Checks whether a value is a KeyCredential.\n *\n * @param credential - The credential being checked.\n */\nexport const isKeyCredential = credential => {\n  const castCredential = credential;\n  return castCredential && typeof castCredential.key === \"string\" && castCredential.getToken === undefined;\n};\n/**\n * Parses arguments passed to a communication client.\n * @hidden\n */\nexport const parseClientArguments = (connectionStringOrUrl, credentialOrOptions) => {\n  if (isKeyCredential(credentialOrOptions) || isTokenCredential(credentialOrOptions)) {\n    assertValidEndpoint(connectionStringOrUrl);\n    return {\n      url: connectionStringOrUrl,\n      credential: credentialOrOptions\n    };\n  } else {\n    const {\n      endpoint: host,\n      credential\n    } = parseConnectionString(connectionStringOrUrl);\n    assertValidEndpoint(host);\n    return {\n      url: host,\n      credential\n    };\n  }\n};","map":{"version":3,"names":["isTokenCredential","parseConnectionString","isValidEndpoint","host","_a","url","URL","protocol","match","undefined","pathname","assertValidEndpoint","Error","isKeyCredential","credential","castCredential","key","getToken","parseClientArguments","connectionStringOrUrl","credentialOrOptions","endpoint"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/communication-common/dist/browser/credential/clientArguments.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { parseConnectionString } from \"./connectionString.js\";\nconst isValidEndpoint = (host) => {\n    var _a;\n    const url = new URL(host);\n    return (!!((_a = url.protocol) === null || _a === void 0 ? void 0 : _a.match(/^http[s]?/)) &&\n        url.host !== undefined &&\n        url.host !== \"\" &&\n        (url.pathname === undefined || url.pathname === \"\" || url.pathname === \"/\"));\n};\nconst assertValidEndpoint = (host) => {\n    if (!isValidEndpoint(host)) {\n        throw new Error(`Invalid endpoint url ${host}`);\n    }\n};\n/**\n * Checks whether a value is a KeyCredential.\n *\n * @param credential - The credential being checked.\n */\nexport const isKeyCredential = (credential) => {\n    const castCredential = credential;\n    return (castCredential &&\n        typeof castCredential.key === \"string\" &&\n        castCredential.getToken === undefined);\n};\n/**\n * Parses arguments passed to a communication client.\n * @hidden\n */\nexport const parseClientArguments = (connectionStringOrUrl, credentialOrOptions) => {\n    if (isKeyCredential(credentialOrOptions) || isTokenCredential(credentialOrOptions)) {\n        assertValidEndpoint(connectionStringOrUrl);\n        return { url: connectionStringOrUrl, credential: credentialOrOptions };\n    }\n    else {\n        const { endpoint: host, credential } = parseConnectionString(connectionStringOrUrl);\n        assertValidEndpoint(host);\n        return { url: host, credential };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA,SAASA,iBAAiB,QAAQ,kBAAkB;AACpD,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,MAAMC,eAAe,GAAIC,IAAI,IAAK;EAC9B,IAAIC,EAAE;EACN,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACH,IAAI,CAAC;EACzB,OAAQ,CAAC,EAAE,CAACC,EAAE,GAAGC,GAAG,CAACE,QAAQ,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,KAAK,CAAC,WAAW,CAAC,CAAC,IACtFH,GAAG,CAACF,IAAI,KAAKM,SAAS,IACtBJ,GAAG,CAACF,IAAI,KAAK,EAAE,KACdE,GAAG,CAACK,QAAQ,KAAKD,SAAS,IAAIJ,GAAG,CAACK,QAAQ,KAAK,EAAE,IAAIL,GAAG,CAACK,QAAQ,KAAK,GAAG,CAAC;AACnF,CAAC;AACD,MAAMC,mBAAmB,GAAIR,IAAI,IAAK;EAClC,IAAI,CAACD,eAAe,CAACC,IAAI,CAAC,EAAE;IACxB,MAAM,IAAIS,KAAK,CAAC,wBAAwBT,IAAI,EAAE,CAAC;EACnD;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,eAAe,GAAIC,UAAU,IAAK;EAC3C,MAAMC,cAAc,GAAGD,UAAU;EACjC,OAAQC,cAAc,IAClB,OAAOA,cAAc,CAACC,GAAG,KAAK,QAAQ,IACtCD,cAAc,CAACE,QAAQ,KAAKR,SAAS;AAC7C,CAAC;AACD;AACA;AACA;AACA;AACA,OAAO,MAAMS,oBAAoB,GAAGA,CAACC,qBAAqB,EAAEC,mBAAmB,KAAK;EAChF,IAAIP,eAAe,CAACO,mBAAmB,CAAC,IAAIpB,iBAAiB,CAACoB,mBAAmB,CAAC,EAAE;IAChFT,mBAAmB,CAACQ,qBAAqB,CAAC;IAC1C,OAAO;MAAEd,GAAG,EAAEc,qBAAqB;MAAEL,UAAU,EAAEM;IAAoB,CAAC;EAC1E,CAAC,MACI;IACD,MAAM;MAAEC,QAAQ,EAAElB,IAAI;MAAEW;IAAW,CAAC,GAAGb,qBAAqB,CAACkB,qBAAqB,CAAC;IACnFR,mBAAmB,CAACR,IAAI,CAAC;IACzB,OAAO;MAAEE,GAAG,EAAEF,IAAI;MAAEW;IAAW,CAAC;EACpC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}