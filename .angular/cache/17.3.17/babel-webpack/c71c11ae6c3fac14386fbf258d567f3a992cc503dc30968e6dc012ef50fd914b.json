{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { multipartPolicyName as tspMultipartPolicyName, multipartPolicy as tspMultipartPolicy } from \"@typespec/ts-http-runtime/internal/policies\";\nimport { getRawContent, hasRawContent } from \"../util/file.js\";\n/**\n * Name of multipart policy\n */\nexport const multipartPolicyName = tspMultipartPolicyName;\n/**\n * Pipeline policy for multipart requests\n */\nexport function multipartPolicy() {\n  const tspPolicy = tspMultipartPolicy();\n  return {\n    name: multipartPolicyName,\n    sendRequest: function () {\n      var _ref = _asyncToGenerator(function* (request, next) {\n        if (request.multipartBody) {\n          for (const part of request.multipartBody.parts) {\n            if (hasRawContent(part.body)) {\n              part.body = getRawContent(part.body);\n            }\n          }\n        }\n        return tspPolicy.sendRequest(request, next);\n      });\n      return function sendRequest(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  };\n}","map":{"version":3,"names":["multipartPolicyName","tspMultipartPolicyName","multipartPolicy","tspMultipartPolicy","getRawContent","hasRawContent","tspPolicy","name","sendRequest","_ref","_asyncToGenerator","request","next","multipartBody","part","parts","body","_x","_x2","apply","arguments"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-rest-pipeline/dist/browser/policies/multipartPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { multipartPolicyName as tspMultipartPolicyName, multipartPolicy as tspMultipartPolicy, } from \"@typespec/ts-http-runtime/internal/policies\";\nimport { getRawContent, hasRawContent } from \"../util/file.js\";\n/**\n * Name of multipart policy\n */\nexport const multipartPolicyName = tspMultipartPolicyName;\n/**\n * Pipeline policy for multipart requests\n */\nexport function multipartPolicy() {\n    const tspPolicy = tspMultipartPolicy();\n    return {\n        name: multipartPolicyName,\n        sendRequest: async (request, next) => {\n            if (request.multipartBody) {\n                for (const part of request.multipartBody.parts) {\n                    if (hasRawContent(part.body)) {\n                        part.body = getRawContent(part.body);\n                    }\n                }\n            }\n            return tspPolicy.sendRequest(request, next);\n        },\n    };\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,mBAAmB,IAAIC,sBAAsB,EAAEC,eAAe,IAAIC,kBAAkB,QAAS,6CAA6C;AACnJ,SAASC,aAAa,EAAEC,aAAa,QAAQ,iBAAiB;AAC9D;AACA;AACA;AACA,OAAO,MAAML,mBAAmB,GAAGC,sBAAsB;AACzD;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAAA,EAAG;EAC9B,MAAMI,SAAS,GAAGH,kBAAkB,CAAC,CAAC;EACtC,OAAO;IACHI,IAAI,EAAEP,mBAAmB;IACzBQ,WAAW;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAE,WAAOC,OAAO,EAAEC,IAAI,EAAK;QAClC,IAAID,OAAO,CAACE,aAAa,EAAE;UACvB,KAAK,MAAMC,IAAI,IAAIH,OAAO,CAACE,aAAa,CAACE,KAAK,EAAE;YAC5C,IAAIV,aAAa,CAACS,IAAI,CAACE,IAAI,CAAC,EAAE;cAC1BF,IAAI,CAACE,IAAI,GAAGZ,aAAa,CAACU,IAAI,CAACE,IAAI,CAAC;YACxC;UACJ;QACJ;QACA,OAAOV,SAAS,CAACE,WAAW,CAACG,OAAO,EAAEC,IAAI,CAAC;MAC/C,CAAC;MAAA,gBATDJ,WAAWA,CAAAS,EAAA,EAAAC,GAAA;QAAA,OAAAT,IAAA,CAAAU,KAAA,OAAAC,SAAA;MAAA;IAAA;EAUf,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}