{"ast":null,"code":"import { sendAndHandleSdkError as t } from \"../internal/communication.js\";\nimport { peoplePickerRequiredVersion as e } from \"../internal/constants.js\";\nimport { ensureInitialized as r, isCurrentSDKVersionAtLeast as o } from \"../internal/internalAPIs.js\";\nimport { validatePeoplePickerInput as n } from \"../internal/mediaUtil.js\";\nimport { getApiVersionTag as i } from \"../internal/telemetry.js\";\nimport { callCallbackWithErrorOrResultFromPromiseAndReturnPromise as s } from \"../internal/utils.js\";\nimport { FrameContexts as m, errorNotSupportedOnPlatform as p } from \"./constants.js\";\nimport { ErrorCode as l } from \"./interfaces.js\";\nimport { runtime as f } from \"./runtime.js\";\nfunction a(t, e) {\n  let o, n;\n  r(f, m.content, m.task, m.settings);\n  let p = \"\";\n  return \"function\" == typeof t ? ([o, n] = [t, e], p = i(\"v1\", \"people.selectPeople\")) : (n = t, p = i(\"v2\", \"people.selectPeople\")), s(c, o, p, n);\n}\nfunction c(r, i) {\n  return new Promise(s => {\n    if (!o(e)) throw {\n      errorCode: l.OLD_PLATFORM\n    };\n    if (!n(i)) throw {\n      errorCode: l.INVALID_ARGUMENTS\n    };\n    if (!u()) throw p;\n    s(t(r, \"people.selectPeople\", i));\n  });\n}\nfunction u() {\n  return !(!r(f) || !f.supports.people);\n}\nexport { u as isSupported, a as selectPeople };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}