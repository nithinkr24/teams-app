{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nexport const redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nexport function redirectPolicy(options = {}) {\n  const {\n    maxRetries = 20\n  } = options;\n  return {\n    name: redirectPolicyName,\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        const response = yield next(request);\n        return handleRedirect(next, response, maxRetries);\n      })();\n    }\n  };\n}\nfunction handleRedirect(_x, _x2, _x3) {\n  return _handleRedirect.apply(this, arguments);\n} //# sourceMappingURL=redirectPolicy.js.map\nfunction _handleRedirect() {\n  _handleRedirect = _asyncToGenerator(function* (next, response, maxRetries, currentRetries = 0) {\n    const {\n      request,\n      status,\n      headers\n    } = response;\n    const locationHeader = headers.get(\"location\");\n    if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === \"POST\" || status === 307) && currentRetries < maxRetries) {\n      const url = new URL(locationHeader, request.url);\n      request.url = url.toString();\n      // POST request with Status code 303 should be converted into a\n      // redirected GET request if the redirect url is present in the location header\n      if (status === 303) {\n        request.method = \"GET\";\n        request.headers.delete(\"Content-Length\");\n        delete request.body;\n      }\n      request.headers.delete(\"Authorization\");\n      const res = yield next(request);\n      return handleRedirect(next, res, maxRetries, currentRetries + 1);\n    }\n    return response;\n  });\n  return _handleRedirect.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}