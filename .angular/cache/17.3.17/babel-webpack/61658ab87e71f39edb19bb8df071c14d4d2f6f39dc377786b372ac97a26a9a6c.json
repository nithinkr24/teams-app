{"ast":null,"code":"var _AuthInterceptor;\nimport { throwError, from } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/teams-auth.service\";\nexport class AuthInterceptor {\n  constructor(teamsAuthService) {\n    this.teamsAuthService = teamsAuthService;\n    this.token = '';\n  }\n  intercept(request, next) {\n    let authReq = this.addAuthHeaders(request);\n    return next.handle(authReq).pipe(catchError(error => {\n      if (error.status === 401 && !this.token) {\n        return this.handleUnauthorized(request, next);\n      }\n      return throwError(() => error);\n    }));\n  }\n  handleUnauthorized(originalRequest, next) {\n    if (this.token) {\n      return throwError(() => new Error('Authentication already in progress'));\n    }\n    return from(this.teamsAuthService.openLoginDialog()).pipe(switchMap(tokenValue => {\n      this.token = tokenValue;\n      if (this.token) {\n        const retryRequest = this.addAuthHeaders(originalRequest);\n        return next.handle(retryRequest);\n      } else {\n        console.error('Login failed or was cancelled');\n        return throwError(() => new Error('Authentication failed'));\n      }\n    }), catchError(error => {\n      this.token = '';\n      return throwError(() => error);\n    }));\n  }\n  addAuthHeaders(request) {\n    const authHeaders = {};\n    if (this.token) {\n      authHeaders['token'] = `${this.token}`; // Note: a 'token' header is non-standard. The standard is 'Authorization' with 'Bearer'.\n    }\n    if (Object.keys(authHeaders).length > 0) {\n      return request.clone({\n        setHeaders: authHeaders\n      });\n    }\n    return request;\n  }\n}\n_AuthInterceptor = AuthInterceptor;\n_AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || _AuthInterceptor)(i0.ɵɵinject(i1.TeamsAuthService));\n};\n_AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _AuthInterceptor,\n  factory: _AuthInterceptor.ɵfac\n});","map":{"version":3,"names":["throwError","from","catchError","switchMap","AuthInterceptor","constructor","teamsAuthService","token","intercept","request","next","authReq","addAuthHeaders","handle","pipe","error","status","handleUnauthorized","originalRequest","Error","openLoginDialog","tokenValue","retryRequest","console","authHeaders","Object","keys","length","clone","setHeaders","i0","ɵɵinject","i1","TeamsAuthService","factory","ɵfac"],"sources":["D:\\Project\\github-teams\\teams-app-new\\src\\app\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError, from } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { TeamsAuthService } from '../services/teams-auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  private token = '';\n\n  constructor(\n    private teamsAuthService: TeamsAuthService\n  ) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let authReq = this.addAuthHeaders(request);\n\n    return next.handle(authReq).pipe( \n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 401 && !this.token) {\n          return this.handleUnauthorized(request, next);\n        }\n        return throwError(() => error);\n      })\n    );\n  }\n\n  private handleUnauthorized(originalRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (this.token) {\n      return throwError(() => new Error('Authentication already in progress'));\n    }\n\n    return from(this.teamsAuthService.openLoginDialog()).pipe(\n      switchMap((tokenValue) => {\n        this.token = tokenValue;\n        if (this.token) {\n          const retryRequest = this.addAuthHeaders(originalRequest);\n          return next.handle(retryRequest);\n        } else {\n          console.error('Login failed or was cancelled');\n          return throwError(() => new Error('Authentication failed'));\n        }\n      }),\n      catchError((error) => {\n        this.token = ''; \n        return throwError(() => error);\n      })\n    );\n  }\n\n  private addAuthHeaders(request: HttpRequest<any>): HttpRequest<any> {\n    const authHeaders: { [key: string]: string } = {};\n    if (this.token) {\n      authHeaders['token'] = `${this.token}`; // Note: a 'token' header is non-standard. The standard is 'Authorization' with 'Bearer'.\n    }\n\n    if (Object.keys(authHeaders).length > 0) {\n      return request.clone({\n        setHeaders: authHeaders\n      });\n    }\n\n    return request;\n  }\n}"],"mappings":";AAEA,SAAqBA,UAAU,EAAEC,IAAI,QAAQ,MAAM;AACnD,SAASC,UAAU,EAAEC,SAAS,QAAQ,gBAAgB;;;AAItD,OAAM,MAAOC,eAAe;EAG1BC,YACUC,gBAAkC;IAAlC,KAAAA,gBAAgB,GAAhBA,gBAAgB;IAHlB,KAAAC,KAAK,GAAG,EAAE;EAId;EAEJC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IACpD,IAAIC,OAAO,GAAG,IAAI,CAACC,cAAc,CAACH,OAAO,CAAC;IAE1C,OAAOC,IAAI,CAACG,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BZ,UAAU,CAAEa,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAACT,KAAK,EAAE;QACvC,OAAO,IAAI,CAACU,kBAAkB,CAACR,OAAO,EAAEC,IAAI,CAAC;;MAE/C,OAAOV,UAAU,CAAC,MAAMe,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;EAEQE,kBAAkBA,CAACC,eAAiC,EAAER,IAAiB;IAC7E,IAAI,IAAI,CAACH,KAAK,EAAE;MACd,OAAOP,UAAU,CAAC,MAAM,IAAImB,KAAK,CAAC,oCAAoC,CAAC,CAAC;;IAG1E,OAAOlB,IAAI,CAAC,IAAI,CAACK,gBAAgB,CAACc,eAAe,EAAE,CAAC,CAACN,IAAI,CACvDX,SAAS,CAAEkB,UAAU,IAAI;MACvB,IAAI,CAACd,KAAK,GAAGc,UAAU;MACvB,IAAI,IAAI,CAACd,KAAK,EAAE;QACd,MAAMe,YAAY,GAAG,IAAI,CAACV,cAAc,CAACM,eAAe,CAAC;QACzD,OAAOR,IAAI,CAACG,MAAM,CAACS,YAAY,CAAC;OACjC,MAAM;QACLC,OAAO,CAACR,KAAK,CAAC,+BAA+B,CAAC;QAC9C,OAAOf,UAAU,CAAC,MAAM,IAAImB,KAAK,CAAC,uBAAuB,CAAC,CAAC;;IAE/D,CAAC,CAAC,EACFjB,UAAU,CAAEa,KAAK,IAAI;MACnB,IAAI,CAACR,KAAK,GAAG,EAAE;MACf,OAAOP,UAAU,CAAC,MAAMe,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;EAEQH,cAAcA,CAACH,OAAyB;IAC9C,MAAMe,WAAW,GAA8B,EAAE;IACjD,IAAI,IAAI,CAACjB,KAAK,EAAE;MACdiB,WAAW,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,CAACjB,KAAK,EAAE,CAAC,CAAC;;IAG1C,IAAIkB,MAAM,CAACC,IAAI,CAACF,WAAW,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;MACvC,OAAOlB,OAAO,CAACmB,KAAK,CAAC;QACnBC,UAAU,EAAEL;OACb,CAAC;;IAGJ,OAAOf,OAAO;EAChB;;mBAxDWL,eAAe;;mBAAfA,gBAAe,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA;AAAA;;SAAf7B,gBAAe;EAAA8B,OAAA,EAAf9B,gBAAe,CAAA+B;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}