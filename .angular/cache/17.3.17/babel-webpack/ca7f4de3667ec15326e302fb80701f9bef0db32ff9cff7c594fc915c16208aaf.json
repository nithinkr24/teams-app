{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AbortError } from \"@azure/abort-controller\";\n/**\n * Creates an abortable promise.\n * @param buildPromise - A function that takes the resolve and reject functions as parameters.\n * @param options - The options for the abortable promise.\n * @returns A promise that can be aborted.\n */\nexport function createAbortablePromise(buildPromise, options) {\n  const {\n    cleanupBeforeAbort,\n    abortSignal,\n    abortErrorMsg\n  } = options !== null && options !== void 0 ? options : {};\n  return new Promise((resolve, reject) => {\n    function rejectOnAbort() {\n      reject(new AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : \"The operation was aborted.\"));\n    }\n    function removeListeners() {\n      abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener(\"abort\", onAbort);\n    }\n    function onAbort() {\n      cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();\n      removeListeners();\n      rejectOnAbort();\n    }\n    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n      return rejectOnAbort();\n    }\n    try {\n      buildPromise(x => {\n        removeListeners();\n        resolve(x);\n      }, x => {\n        removeListeners();\n        reject(x);\n      });\n    } catch (err) {\n      reject(err);\n    }\n    abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener(\"abort\", onAbort);\n  });\n}\n//# sourceMappingURL=createAbortablePromise.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}