{"ast":null,"code":"import { getApiVersionTag as e } from \"./telemetry.js\";\nimport { VideoFrameTick as t } from \"./videoFrameTick.js\";\nimport { VideoPerformanceStatistics as r } from \"./videoPerformanceStatistics.js\";\nconst i = \"v2\";\nclass s {\n  constructor(t) {\n    this.reportPerformanceEvent = t, this.isFirstFrameProcessed = !1, this.frameProcessTimeLimit = 100, this.frameProcessingStartedAt = 0, this.frameProcessingTimeCost = 0, this.processedFrameCount = 0, this.performanceStatistics = new r(s.distributionBinSize, t => this.reportPerformanceEvent(e(i, \"videoPerformanceMonitor.performanceDataGenerated\"), \"video.performance.performanceDataGenerated\", [t]));\n  }\n  startMonitorSlowFrameProcessing() {\n    t.setInterval(() => {\n      if (0 === this.processedFrameCount) return;\n      const t = this.frameProcessingTimeCost / this.processedFrameCount;\n      t > this.frameProcessTimeLimit && this.reportPerformanceEvent(e(i, \"videoPerformanceMonitor.startMonitorSlowFrameProcessing\"), \"video.performance.frameProcessingSlow\", [t]), this.frameProcessingTimeCost = 0, this.processedFrameCount = 0;\n    }, s.calculateFPSInterval);\n  }\n  setFrameProcessTimeLimit(e) {\n    this.frameProcessTimeLimit = e;\n  }\n  reportApplyingVideoEffect(e, t) {\n    var r, i;\n    (null === (r = this.applyingEffect) || void 0 === r ? void 0 : r.effectId) === e && (null === (i = this.applyingEffect) || void 0 === i ? void 0 : i.effectParam) === t || (this.applyingEffect = {\n      effectId: e,\n      effectParam: t\n    }, this.appliedEffect = void 0);\n  }\n  reportVideoEffectChanged(e, t) {\n    void 0 === this.applyingEffect || this.applyingEffect.effectId !== e && this.applyingEffect.effectParam !== t || (this.appliedEffect = {\n      effectId: e,\n      effectParam: t\n    }, this.applyingEffect = void 0, this.isFirstFrameProcessed = !1);\n  }\n  reportStartFrameProcessing(e, r) {\n    t.tick(), this.appliedEffect && (this.frameProcessingStartedAt = performance.now(), this.performanceStatistics.processStarts(this.appliedEffect.effectId, e, r, this.appliedEffect.effectParam));\n  }\n  reportFrameProcessed() {\n    var t;\n    this.appliedEffect && (this.processedFrameCount++, this.frameProcessingTimeCost += performance.now() - this.frameProcessingStartedAt, this.performanceStatistics.processEnds(), this.isFirstFrameProcessed || (this.isFirstFrameProcessed = !0, this.reportPerformanceEvent(e(i, \"videoPerformanceMonitor.reportFrameProcessed\"), \"video.performance.firstFrameProcessed\", [Date.now(), this.appliedEffect.effectId, null === (t = this.appliedEffect) || void 0 === t ? void 0 : t.effectParam])));\n  }\n  reportGettingTextureStream(e) {\n    this.gettingTextureStreamStartedAt = performance.now(), this.currentStreamId = e;\n  }\n  reportTextureStreamAcquired() {\n    if (void 0 !== this.gettingTextureStreamStartedAt) {\n      const t = performance.now() - this.gettingTextureStreamStartedAt;\n      this.reportPerformanceEvent(e(i, \"videoPerformanceMonitor.reportTextureStreamAcquired\"), \"video.performance.textureStreamAcquired\", [this.currentStreamId, t]);\n    }\n  }\n}\ns.distributionBinSize = 1e3, s.calculateFPSInterval = 1e3;\nexport { s as VideoPerformanceMonitor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}