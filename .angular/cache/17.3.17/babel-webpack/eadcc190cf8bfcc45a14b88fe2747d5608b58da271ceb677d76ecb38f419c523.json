{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isWebReadableStream } from \"./typeGuards.js\";\n/**\n * Drain the content of the given ReadableStream into a Blob.\n * The blob's content may end up in memory or on disk dependent on size.\n */\nfunction drain(stream) {\n  return new Response(stream).blob();\n}\nfunction toBlobPart(_x) {\n  return _toBlobPart.apply(this, arguments);\n}\n/**\n * Utility function that concatenates a set of binary inputs into one combined output.\n *\n * @param sources - array of sources for the concatenation\n * @returns - in Node, a (() =\\> NodeJS.ReadableStream) which, when read, produces a concatenation of all the inputs.\n *           In browser, returns a `Blob` representing all the concatenated inputs.\n *\n * @internal\n */\nfunction _toBlobPart() {\n  _toBlobPart = _asyncToGenerator(function* (source) {\n    if (source instanceof Blob || source instanceof Uint8Array) {\n      return source;\n    }\n    if (isWebReadableStream(source)) {\n      return drain(source);\n    } else {\n      throw new Error(\"Unsupported source type. Only Blob, Uint8Array, and ReadableStream are supported in browser.\");\n    }\n  });\n  return _toBlobPart.apply(this, arguments);\n}\nexport function concat(_x2) {\n  return _concat.apply(this, arguments);\n}\n//# sourceMappingURL=concat.common.js.map\nfunction _concat() {\n  _concat = _asyncToGenerator(function* (sources) {\n    const parts = [];\n    for (const source of sources) {\n      parts.push(yield toBlobPart(typeof source === \"function\" ? source() : source));\n    }\n    return new Blob(parts);\n  });\n  return _concat.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}