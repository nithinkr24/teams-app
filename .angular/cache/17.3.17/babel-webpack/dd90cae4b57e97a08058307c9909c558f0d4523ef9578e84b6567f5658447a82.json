{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { state } from \"./state.js\";\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nexport function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n  let parameterPath = parameter.parameterPath;\n  const parameterMapper = parameter.mapper;\n  let value;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n        if (!propertySearchResult.propertyFound && fallbackObject) {\n          propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n        }\n        let useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue = parameterMapper.required || parameterPath[0] === \"options\" && parameterPath.length === 2;\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n    for (const propertyName in parameterPath) {\n      const propertyMapper = parameterMapper.type.modelProperties[propertyName];\n      const propertyPath = parameterPath[propertyName];\n      const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n        parameterPath: propertyPath,\n        mapper: propertyMapper\n      }, fallbackObject);\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n  const result = {\n    propertyFound: false\n  };\n  let i = 0;\n  for (; i < parameterPath.length; ++i) {\n    const parameterPathPart = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction hasOriginalRequest(request) {\n  return originalRequestSymbol in request;\n}\nexport function getOperationRequestInfo(request) {\n  if (hasOriginalRequest(request)) {\n    return getOperationRequestInfo(request[originalRequestSymbol]);\n  }\n  let info = state.operationRequestMap.get(request);\n  if (!info) {\n    info = {};\n    state.operationRequestMap.set(request, info);\n  }\n  return info;\n}","map":{"version":3,"names":["state","getOperationArgumentValueFromParameter","operationArguments","parameter","fallbackObject","parameterPath","parameterMapper","mapper","value","Array","isArray","length","isConstant","defaultValue","propertySearchResult","getPropertyFromParameterPath","propertyFound","useDefaultValue","required","propertyValue","propertyName","propertyMapper","type","modelProperties","propertyPath","undefined","parent","result","i","parameterPathPart","originalRequestSymbol","Symbol","for","hasOriginalRequest","request","getOperationRequestInfo","info","operationRequestMap","get","set"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-client/dist/browser/operationHelpers.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { state } from \"./state.js\";\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nexport function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n    let parameterPath = parameter.parameterPath;\n    const parameterMapper = parameter.mapper;\n    let value;\n    if (typeof parameterPath === \"string\") {\n        parameterPath = [parameterPath];\n    }\n    if (Array.isArray(parameterPath)) {\n        if (parameterPath.length > 0) {\n            if (parameterMapper.isConstant) {\n                value = parameterMapper.defaultValue;\n            }\n            else {\n                let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n                if (!propertySearchResult.propertyFound && fallbackObject) {\n                    propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n                }\n                let useDefaultValue = false;\n                if (!propertySearchResult.propertyFound) {\n                    useDefaultValue =\n                        parameterMapper.required ||\n                            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n                }\n                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n            }\n        }\n    }\n    else {\n        if (parameterMapper.required) {\n            value = {};\n        }\n        for (const propertyName in parameterPath) {\n            const propertyMapper = parameterMapper.type.modelProperties[propertyName];\n            const propertyPath = parameterPath[propertyName];\n            const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n                parameterPath: propertyPath,\n                mapper: propertyMapper,\n            }, fallbackObject);\n            if (propertyValue !== undefined) {\n                if (!value) {\n                    value = {};\n                }\n                value[propertyName] = propertyValue;\n            }\n        }\n    }\n    return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n    const result = { propertyFound: false };\n    let i = 0;\n    for (; i < parameterPath.length; ++i) {\n        const parameterPathPart = parameterPath[i];\n        // Make sure to check inherited properties too, so don't use hasOwnProperty().\n        if (parent && parameterPathPart in parent) {\n            parent = parent[parameterPathPart];\n        }\n        else {\n            break;\n        }\n    }\n    if (i === parameterPath.length) {\n        result.propertyValue = parent;\n        result.propertyFound = true;\n    }\n    return result;\n}\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction hasOriginalRequest(request) {\n    return originalRequestSymbol in request;\n}\nexport function getOperationRequestInfo(request) {\n    if (hasOriginalRequest(request)) {\n        return getOperationRequestInfo(request[originalRequestSymbol]);\n    }\n    let info = state.operationRequestMap.get(request);\n    if (!info) {\n        info = {};\n        state.operationRequestMap.set(request, info);\n    }\n    return info;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}