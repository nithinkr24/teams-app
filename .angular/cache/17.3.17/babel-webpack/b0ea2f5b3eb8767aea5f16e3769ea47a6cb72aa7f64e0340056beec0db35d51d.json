{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants.js\";\nimport { getUserAgentValue } from \"../util/userAgent.js\";\nimport { logger } from \"../log.js\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError.js\";\nimport { Sanitizer } from \"@typespec/ts-http-runtime/internal/util\";\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexport const tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nexport function tracingPolicy(options = {}) {\n  const userAgentPromise = getUserAgentValue(options.userAgentPrefix);\n  const sanitizer = new Sanitizer({\n    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters\n  });\n  const tracingClient = tryCreateTracingClient();\n  return {\n    name: tracingPolicyName,\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        var _a;\n        if (!tracingClient) {\n          return next(request);\n        }\n        const userAgent = yield userAgentPromise;\n        const spanAttributes = {\n          \"http.url\": sanitizer.sanitizeUrl(request.url),\n          \"http.method\": request.method,\n          \"http.user_agent\": userAgent,\n          requestId: request.requestId\n        };\n        if (userAgent) {\n          spanAttributes[\"http.user_agent\"] = userAgent;\n        }\n        const {\n          span,\n          tracingContext\n        } = (_a = tryCreateSpan(tracingClient, request, spanAttributes)) !== null && _a !== void 0 ? _a : {};\n        if (!span || !tracingContext) {\n          return next(request);\n        }\n        try {\n          const response = yield tracingClient.withContext(tracingContext, next, request);\n          tryProcessResponse(span, response);\n          return response;\n        } catch (err) {\n          tryProcessError(span, err);\n          throw err;\n        }\n      })();\n    }\n  };\n}\nfunction tryCreateTracingClient() {\n  try {\n    return createTracingClient({\n      namespace: \"\",\n      packageName: \"@azure/core-rest-pipeline\",\n      packageVersion: SDK_VERSION\n    });\n  } catch (e) {\n    logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\nfunction tryCreateSpan(tracingClient, request, spanAttributes) {\n  try {\n    // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n    const {\n      span,\n      updatedOptions\n    } = tracingClient.startSpan(`HTTP ${request.method}`, {\n      tracingOptions: request.tracingOptions\n    }, {\n      spanKind: \"client\",\n      spanAttributes\n    });\n    // If the span is not recording, don't do any more work.\n    if (!span.isRecording()) {\n      span.end();\n      return undefined;\n    }\n    // set headers\n    const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n    for (const [key, value] of Object.entries(headers)) {\n      request.headers.set(key, value);\n    }\n    return {\n      span,\n      tracingContext: updatedOptions.tracingOptions.tracingContext\n    };\n  } catch (e) {\n    logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\nfunction tryProcessError(span, error) {\n  try {\n    span.setStatus({\n      status: \"error\",\n      error: isError(error) ? error : undefined\n    });\n    if (isRestError(error) && error.statusCode) {\n      span.setAttribute(\"http.status_code\", error.statusCode);\n    }\n    span.end();\n  } catch (e) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\nfunction tryProcessResponse(span, response) {\n  try {\n    span.setAttribute(\"http.status_code\", response.status);\n    const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n    if (serviceRequestId) {\n      span.setAttribute(\"serviceRequestId\", serviceRequestId);\n    }\n    // Per semantic conventions, only set the status to error if the status code is 4xx or 5xx.\n    // Otherwise, the status MUST remain unset.\n    // https://opentelemetry.io/docs/specs/semconv/http/http-spans/#status\n    if (response.status >= 400) {\n      span.setStatus({\n        status: \"error\"\n      });\n    }\n    span.end();\n  } catch (e) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}","map":{"version":3,"names":["createTracingClient","SDK_VERSION","getUserAgentValue","logger","getErrorMessage","isError","isRestError","Sanitizer","tracingPolicyName","tracingPolicy","options","userAgentPromise","userAgentPrefix","sanitizer","additionalAllowedQueryParameters","tracingClient","tryCreateTracingClient","name","sendRequest","request","next","_asyncToGenerator","_a","userAgent","spanAttributes","sanitizeUrl","url","method","requestId","span","tracingContext","tryCreateSpan","response","withContext","tryProcessResponse","err","tryProcessError","namespace","packageName","packageVersion","e","warning","undefined","updatedOptions","startSpan","tracingOptions","spanKind","isRecording","end","headers","createRequestHeaders","key","value","Object","entries","set","error","setStatus","status","statusCode","setAttribute","serviceRequestId","get"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-rest-pipeline/dist/browser/policies/tracingPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createTracingClient, } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants.js\";\nimport { getUserAgentValue } from \"../util/userAgent.js\";\nimport { logger } from \"../log.js\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError.js\";\nimport { Sanitizer } from \"@typespec/ts-http-runtime/internal/util\";\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexport const tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nexport function tracingPolicy(options = {}) {\n    const userAgentPromise = getUserAgentValue(options.userAgentPrefix);\n    const sanitizer = new Sanitizer({\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    const tracingClient = tryCreateTracingClient();\n    return {\n        name: tracingPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!tracingClient) {\n                return next(request);\n            }\n            const userAgent = await userAgentPromise;\n            const spanAttributes = {\n                \"http.url\": sanitizer.sanitizeUrl(request.url),\n                \"http.method\": request.method,\n                \"http.user_agent\": userAgent,\n                requestId: request.requestId,\n            };\n            if (userAgent) {\n                spanAttributes[\"http.user_agent\"] = userAgent;\n            }\n            const { span, tracingContext } = (_a = tryCreateSpan(tracingClient, request, spanAttributes)) !== null && _a !== void 0 ? _a : {};\n            if (!span || !tracingContext) {\n                return next(request);\n            }\n            try {\n                const response = await tracingClient.withContext(tracingContext, next, request);\n                tryProcessResponse(span, response);\n                return response;\n            }\n            catch (err) {\n                tryProcessError(span, err);\n                throw err;\n            }\n        },\n    };\n}\nfunction tryCreateTracingClient() {\n    try {\n        return createTracingClient({\n            namespace: \"\",\n            packageName: \"@azure/core-rest-pipeline\",\n            packageVersion: SDK_VERSION,\n        });\n    }\n    catch (e) {\n        logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n        return undefined;\n    }\n}\nfunction tryCreateSpan(tracingClient, request, spanAttributes) {\n    try {\n        // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n        const { span, updatedOptions } = tracingClient.startSpan(`HTTP ${request.method}`, { tracingOptions: request.tracingOptions }, {\n            spanKind: \"client\",\n            spanAttributes,\n        });\n        // If the span is not recording, don't do any more work.\n        if (!span.isRecording()) {\n            span.end();\n            return undefined;\n        }\n        // set headers\n        const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n        for (const [key, value] of Object.entries(headers)) {\n            request.headers.set(key, value);\n        }\n        return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };\n    }\n    catch (e) {\n        logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n        return undefined;\n    }\n}\nfunction tryProcessError(span, error) {\n    try {\n        span.setStatus({\n            status: \"error\",\n            error: isError(error) ? error : undefined,\n        });\n        if (isRestError(error) && error.statusCode) {\n            span.setAttribute(\"http.status_code\", error.statusCode);\n        }\n        span.end();\n    }\n    catch (e) {\n        logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n    }\n}\nfunction tryProcessResponse(span, response) {\n    try {\n        span.setAttribute(\"http.status_code\", response.status);\n        const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n        if (serviceRequestId) {\n            span.setAttribute(\"serviceRequestId\", serviceRequestId);\n        }\n        // Per semantic conventions, only set the status to error if the status code is 4xx or 5xx.\n        // Otherwise, the status MUST remain unset.\n        // https://opentelemetry.io/docs/specs/semconv/http/http-spans/#status\n        if (response.status >= 400) {\n            span.setStatus({\n                status: \"error\",\n            });\n        }\n        span.end();\n    }\n    catch (e) {\n        logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}