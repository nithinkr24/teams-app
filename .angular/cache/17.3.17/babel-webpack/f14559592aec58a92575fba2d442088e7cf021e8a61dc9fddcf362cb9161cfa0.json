{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { parseConnectionString } from \"./connectionString.js\";\nconst isValidEndpoint = host => {\n  var _a;\n  const url = new URL(host);\n  return !!((_a = url.protocol) === null || _a === void 0 ? void 0 : _a.match(/^http[s]?/)) && url.host !== undefined && url.host !== \"\" && (url.pathname === undefined || url.pathname === \"\" || url.pathname === \"/\");\n};\nconst assertValidEndpoint = host => {\n  if (!isValidEndpoint(host)) {\n    throw new Error(`Invalid endpoint url ${host}`);\n  }\n};\n/**\n * Checks whether a value is a KeyCredential.\n *\n * @param credential - The credential being checked.\n */\nexport const isKeyCredential = credential => {\n  const castCredential = credential;\n  return castCredential && typeof castCredential.key === \"string\" && castCredential.getToken === undefined;\n};\n/**\n * Parses arguments passed to a communication client.\n * @hidden\n */\nexport const parseClientArguments = (connectionStringOrUrl, credentialOrOptions) => {\n  if (isKeyCredential(credentialOrOptions) || isTokenCredential(credentialOrOptions)) {\n    assertValidEndpoint(connectionStringOrUrl);\n    return {\n      url: connectionStringOrUrl,\n      credential: credentialOrOptions\n    };\n  } else {\n    const {\n      endpoint: host,\n      credential\n    } = parseConnectionString(connectionStringOrUrl);\n    assertValidEndpoint(host);\n    return {\n      url: host,\n      credential\n    };\n  }\n};\n//# sourceMappingURL=clientArguments.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}