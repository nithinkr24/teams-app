{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { wrapAbortSignalLike } from \"../util/wrapAbortSignal.js\";\nexport const wrapAbortSignalLikePolicyName = \"wrapAbortSignalLikePolicy\";\n/**\n * Policy that ensure that any AbortSignalLike is wrapped in a native AbortSignal for processing by the pipeline.\n * Since the ts-http-runtime expects a native AbortSignal, this policy is used to ensure that any AbortSignalLike is wrapped in a native AbortSignal.\n *\n * @returns - created policy\n */\nexport function wrapAbortSignalLikePolicy() {\n  return {\n    name: wrapAbortSignalLikePolicyName,\n    sendRequest: function () {\n      var _ref = _asyncToGenerator(function* (request, next) {\n        if (!request.abortSignal) {\n          return next(request);\n        }\n        const {\n          abortSignal,\n          cleanup\n        } = wrapAbortSignalLike(request.abortSignal);\n        // eslint-disable-next-line no-param-reassign\n        request.abortSignal = abortSignal;\n        try {\n          return yield next(request);\n        } finally {\n          cleanup === null || cleanup === void 0 ? void 0 : cleanup();\n        }\n      });\n      return function sendRequest(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  };\n}","map":{"version":3,"names":["wrapAbortSignalLike","wrapAbortSignalLikePolicyName","wrapAbortSignalLikePolicy","name","sendRequest","_ref","_asyncToGenerator","request","next","abortSignal","cleanup","_x","_x2","apply","arguments"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-rest-pipeline/dist/browser/policies/wrapAbortSignalLikePolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { wrapAbortSignalLike } from \"../util/wrapAbortSignal.js\";\nexport const wrapAbortSignalLikePolicyName = \"wrapAbortSignalLikePolicy\";\n/**\n * Policy that ensure that any AbortSignalLike is wrapped in a native AbortSignal for processing by the pipeline.\n * Since the ts-http-runtime expects a native AbortSignal, this policy is used to ensure that any AbortSignalLike is wrapped in a native AbortSignal.\n *\n * @returns - created policy\n */\nexport function wrapAbortSignalLikePolicy() {\n    return {\n        name: wrapAbortSignalLikePolicyName,\n        sendRequest: async (request, next) => {\n            if (!request.abortSignal) {\n                return next(request);\n            }\n            const { abortSignal, cleanup } = wrapAbortSignalLike(request.abortSignal);\n            // eslint-disable-next-line no-param-reassign\n            request.abortSignal = abortSignal;\n            try {\n                return await next(request);\n            }\n            finally {\n                cleanup === null || cleanup === void 0 ? void 0 : cleanup();\n            }\n        },\n    };\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,mBAAmB,QAAQ,4BAA4B;AAChE,OAAO,MAAMC,6BAA6B,GAAG,2BAA2B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAAA,EAAG;EACxC,OAAO;IACHC,IAAI,EAAEF,6BAA6B;IACnCG,WAAW;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAE,WAAOC,OAAO,EAAEC,IAAI,EAAK;QAClC,IAAI,CAACD,OAAO,CAACE,WAAW,EAAE;UACtB,OAAOD,IAAI,CAACD,OAAO,CAAC;QACxB;QACA,MAAM;UAAEE,WAAW;UAAEC;QAAQ,CAAC,GAAGV,mBAAmB,CAACO,OAAO,CAACE,WAAW,CAAC;QACzE;QACAF,OAAO,CAACE,WAAW,GAAGA,WAAW;QACjC,IAAI;UACA,aAAaD,IAAI,CAACD,OAAO,CAAC;QAC9B,CAAC,SACO;UACJG,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAC,CAAC;QAC/D;MACJ,CAAC;MAAA,gBAbDN,WAAWA,CAAAO,EAAA,EAAAC,GAAA;QAAA,OAAAP,IAAA,CAAAQ,KAAA,OAAAC,SAAA;MAAA;IAAA;EAcf,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}