{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createTracingContext } from \"./tracingContext.js\";\nimport { state } from \"./state.js\";\nexport function createDefaultTracingSpan() {\n  return {\n    end: () => {\n      // noop\n    },\n    isRecording: () => false,\n    recordException: () => {\n      // noop\n    },\n    setAttribute: () => {\n      // noop\n    },\n    setStatus: () => {\n      // noop\n    },\n    addEvent: () => {\n      // noop\n    }\n  };\n}\nexport function createDefaultInstrumenter() {\n  return {\n    createRequestHeaders: () => {\n      return {};\n    },\n    parseTraceparentHeader: () => {\n      return undefined;\n    },\n    startSpan: (_name, spanOptions) => {\n      return {\n        span: createDefaultTracingSpan(),\n        tracingContext: createTracingContext({\n          parentContext: spanOptions.tracingContext\n        })\n      };\n    },\n    withContext(_context, callback, ...callbackArgs) {\n      return callback(...callbackArgs);\n    }\n  };\n}\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nexport function useInstrumenter(instrumenter) {\n  state.instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nexport function getInstrumenter() {\n  if (!state.instrumenterImplementation) {\n    state.instrumenterImplementation = createDefaultInstrumenter();\n  }\n  return state.instrumenterImplementation;\n}\n//# sourceMappingURL=instrumenter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}