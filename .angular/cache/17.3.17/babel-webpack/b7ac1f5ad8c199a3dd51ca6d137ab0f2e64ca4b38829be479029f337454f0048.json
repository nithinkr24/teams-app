{"ast":null,"code":"import { shouldEventBeRelayedToChild as e, sendMessageEventToChild as t } from \"../../internal/childCommunication.js\";\nimport { sendMessageToParent as i } from \"../../internal/communication.js\";\nimport { registerHandler as n, registerHandlerHelper as s } from \"../../internal/handlers.js\";\nimport { ensureInitialized as o } from \"../../internal/internalAPIs.js\";\nimport { configSetValidityStateHelper as r, configSetConfigHelper as f, pagesTelemetryVersionNumber as a } from \"../../internal/pagesHelpers.js\";\nimport { getApiVersionTag as c } from \"../../internal/telemetry.js\";\nimport { isNullOrUndefined as g } from \"../../internal/typeCheckUtilities.js\";\nimport { FrameContexts as u, errorNotSupportedOnPlatform as m } from \"../constants.js\";\nimport { runtime as l } from \"../runtime.js\";\nlet p, v;\nfunction h() {\n  n(c(a, \"pages.config.registerSettingsSaveHandler\"), \"settings.save\", E, !1), n(c(a, \"pages.config.registerSettingsRemoveHandler\"), \"settings.remove\", F, !1);\n}\nfunction d(e) {\n  return r(c(a, \"pages.config.setValidityState\"), e);\n}\nfunction y(e) {\n  return f(c(a, \"pages.config.setConfig\"), e);\n}\nfunction S(e) {\n  N(c(a, \"pages.config.registerOnSaveHandler\"), e, () => {\n    if (!g(e) && !O()) throw m;\n  });\n}\nfunction N(e, t, n) {\n  !g(t) && o(l, u.settings), n && n(), p = t, !g(t) && i(e, \"registerHandler\", [\"save\"]);\n}\nfunction j(e) {\n  w(c(a, \"pages.config.registerOnRemoveHandler\"), e, () => {\n    if (!g(e) && !O()) throw m;\n  });\n}\nfunction w(e, t, n) {\n  !g(t) && o(l, u.remove, u.settings), n && n(), v = t, !g(t) && i(e, \"registerHandler\", [\"remove\"]);\n}\nfunction E(i) {\n  const n = new C(i);\n  p ? p(n) : e() ? t(\"settings.save\", [i]) : n.notifySuccess();\n}\nfunction H(e) {\n  s(c(a, \"pages.config.registerChangeConfigHandler\"), \"changeSettings\", e, [u.content], () => {\n    if (!O()) throw m;\n  });\n}\nclass C {\n  constructor(e) {\n    this.notified = !1, this.result = e || {};\n  }\n  notifySuccess() {\n    this.ensureNotNotified(), i(c(a, \"pages.saveEvent.notifySuccess\"), \"settings.save.success\"), this.notified = !0;\n  }\n  notifyFailure(e) {\n    this.ensureNotNotified(), i(c(a, \"pages.saveEvent.notifyFailure\"), \"settings.save.failure\", [e]), this.notified = !0;\n  }\n  ensureNotNotified() {\n    if (this.notified) throw new Error(\"The SaveEvent may only notify success or failure once.\");\n  }\n}\nfunction F() {\n  const i = new T();\n  v ? v(i) : e() ? t(\"settings.remove\", []) : i.notifySuccess();\n}\nclass T {\n  constructor() {\n    this.notified = !1;\n  }\n  notifySuccess() {\n    this.ensureNotNotified(), i(c(a, \"pages.removeEvent.notifySuccess\"), \"settings.remove.success\"), this.notified = !0;\n  }\n  notifyFailure(e) {\n    this.ensureNotNotified(), i(c(a, \"pages.removeEvent.notifyFailure\"), \"settings.remove.failure\", [e]), this.notified = !0;\n  }\n  ensureNotNotified() {\n    if (this.notified) throw new Error(\"The removeEventType may only notify success or failure once.\");\n  }\n}\nfunction O() {\n  return !(!o(l) || !l.supports.pages) && !!l.supports.pages.config;\n}\nexport { h as initialize, O as isSupported, H as registerChangeConfigHandler, j as registerOnRemoveHandler, w as registerOnRemoveHandlerHelper, S as registerOnSaveHandler, N as registerOnSaveHandlerHelper, y as setConfig, d as setValidityState };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}