{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { log } from \"./log.js\";\nconst debugEnvVariable = typeof process !== \"undefined\" && process.env && process.env.DEBUG || undefined;\nlet enabledString;\nlet enabledNamespaces = [];\nlet skippedNamespaces = [];\nconst debuggers = [];\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\nconst debugObj = Object.assign(namespace => {\n  return createDebugger(namespace);\n}, {\n  enable,\n  enabled,\n  disable,\n  log\n});\nfunction enable(namespaces) {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map(ns => ns.trim().replace(wildcard, \".*?\"));\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\nfunction enabled(namespace) {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n  for (const enabledNamespace of enabledNamespaces) {\n    if (enabledNamespace.test(namespace)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction disable() {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\nfunction createDebugger(namespace) {\n  const newDebugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend\n  });\n  function debug(...args) {\n    if (!newDebugger.enabled) {\n      return;\n    }\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n    newDebugger.log(...args);\n  }\n  debuggers.push(newDebugger);\n  return newDebugger;\n}\nfunction destroy() {\n  const index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\nfunction extend(namespace) {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\nexport default debugObj;","map":{"version":3,"names":["log","debugEnvVariable","process","env","DEBUG","undefined","enabledString","enabledNamespaces","skippedNamespaces","debuggers","enable","debugObj","Object","assign","namespace","createDebugger","enabled","disable","namespaces","wildcard","namespaceList","split","map","ns","trim","replace","startsWith","push","RegExp","substr","instance","endsWith","skipped","test","enabledNamespace","result","newDebugger","debug","destroy","extend","args","length","index","indexOf","splice"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/logger/debug.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { log } from \"./log.js\";\nconst debugEnvVariable = (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\nlet enabledString;\nlet enabledNamespaces = [];\nlet skippedNamespaces = [];\nconst debuggers = [];\nif (debugEnvVariable) {\n    enable(debugEnvVariable);\n}\nconst debugObj = Object.assign((namespace) => {\n    return createDebugger(namespace);\n}, {\n    enable,\n    enabled,\n    disable,\n    log,\n});\nfunction enable(namespaces) {\n    enabledString = namespaces;\n    enabledNamespaces = [];\n    skippedNamespaces = [];\n    const wildcard = /\\*/g;\n    const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n    for (const ns of namespaceList) {\n        if (ns.startsWith(\"-\")) {\n            skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n        }\n        else {\n            enabledNamespaces.push(new RegExp(`^${ns}$`));\n        }\n    }\n    for (const instance of debuggers) {\n        instance.enabled = enabled(instance.namespace);\n    }\n}\nfunction enabled(namespace) {\n    if (namespace.endsWith(\"*\")) {\n        return true;\n    }\n    for (const skipped of skippedNamespaces) {\n        if (skipped.test(namespace)) {\n            return false;\n        }\n    }\n    for (const enabledNamespace of enabledNamespaces) {\n        if (enabledNamespace.test(namespace)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction disable() {\n    const result = enabledString || \"\";\n    enable(\"\");\n    return result;\n}\nfunction createDebugger(namespace) {\n    const newDebugger = Object.assign(debug, {\n        enabled: enabled(namespace),\n        destroy,\n        log: debugObj.log,\n        namespace,\n        extend,\n    });\n    function debug(...args) {\n        if (!newDebugger.enabled) {\n            return;\n        }\n        if (args.length > 0) {\n            args[0] = `${namespace} ${args[0]}`;\n        }\n        newDebugger.log(...args);\n    }\n    debuggers.push(newDebugger);\n    return newDebugger;\n}\nfunction destroy() {\n    const index = debuggers.indexOf(this);\n    if (index >= 0) {\n        debuggers.splice(index, 1);\n        return true;\n    }\n    return false;\n}\nfunction extend(namespace) {\n    const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n    newDebugger.log = this.log;\n    return newDebugger;\n}\nexport default debugObj;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}