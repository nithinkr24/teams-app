{"ast":null,"code":"import { callFunctionInHost as o } from \"../../internal/communication.js\";\nimport { validateEmailAddress as t } from \"../../internal/emailAddressValidation.js\";\nimport { ensureInitialized as n } from \"../../internal/internalAPIs.js\";\nimport { getApiVersionTag as r } from \"../../internal/telemetry.js\";\nimport { FrameContexts as i } from \"../constants.js\";\nimport { runtime as e } from \"../runtime.js\";\nimport { ComposeMailType as a } from \"./mail.js\";\nfunction s(o) {\n  o && 0 !== o.length && o.forEach(o => {\n    t(o);\n  });\n}\nfunction m(t) {\n  if (n(e, i.content), !f()) throw new Error(\"Not supported\");\n  return function (o) {\n    if (!o.handoffId || 0 == o.handoffId.trim().length || \"\" === o.handoffId.trim()) throw new Error(\"handoffId should not be null or empty string.\");\n    const t = o.composeMailParams;\n    t.type === a.New && (s(t.toRecipients), s(t.ccRecipients), s(t.bccRecipients));\n  }(t), o(\"mail.handoff.composeMail\", [new c(t)], r(\"v2\", \"mail.handoff.composeMail\"));\n}\nfunction f() {\n  return !!(n(e) && e.supports.mail && e.supports.mail.handoff);\n}\nclass c {\n  constructor(o) {\n    this.composeMailParamsWithHandoff = o;\n  }\n  serialize() {\n    return this.composeMailParamsWithHandoff;\n  }\n}\nexport { m as composeMailWithHandoff, f as isSupported };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}