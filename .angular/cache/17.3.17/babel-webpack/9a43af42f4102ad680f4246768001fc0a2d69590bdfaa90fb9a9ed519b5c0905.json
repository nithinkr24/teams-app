{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport { Subject, takeUntil } from 'rxjs';\nimport { ThreadItemStatus } from '../../services/threads.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../teams-fx.service\";\nimport * as i2 from \"../../services/agent-work-item.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../chat-header/chat-header.component\";\nimport * as i5 from \"../chat-components/chat-components.component\";\nimport * as i6 from \"../loading-spinner/loading-spinner.component\";\nfunction ChatScreenComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"app-chat-header\", 3);\n    i0.ɵɵlistener(\"onResolveChat\", function ChatScreenComponent_ng_container_1_Template_app_chat_header_onResolveChat_1_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.handleOnResolveChat());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"div\", 4);\n    i0.ɵɵelement(3, \"app-chat-components\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"personaName\", ctx_r1.receiverName)(\"threadStatus\", ctx_r1.threadStatus);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"isDarkMode\", ctx_r1.isDarkMode)(\"threadId\", ctx_r1.threadId)(\"userId\", ctx_r1.userId)(\"token\", ctx_r1.token)(\"endpointUrl\", ctx_r1.endpointUrl)(\"displayName\", ctx_r1.displayName);\n  }\n}\nfunction ChatScreenComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-loading-spinner\");\n  }\n}\nexport let ChatScreenComponent = /*#__PURE__*/(() => {\n  var _ChatScreenComponent;\n  class ChatScreenComponent {\n    constructor(teamsFxService, agentWorkItemService) {\n      this.teamsFxService = teamsFxService;\n      this.agentWorkItemService = agentWorkItemService;\n      this.token = '';\n      this.userId = '';\n      this.displayName = '';\n      this.endpointUrl = '';\n      this.threadId = '';\n      this.receiverName = '';\n      this.threadStatus = '';\n      this.onResolveChat = new EventEmitter();\n      this.destroy$ = new Subject();\n      this.isLoading = true;\n      this.isDarkMode = false;\n    }\n    ngOnInit() {\n      this.initializeChat();\n      this.subscribeToTheme();\n    }\n    ngOnChanges(changes) {\n      if (changes['threadId'] && !changes['threadId'].firstChange) {}\n      if (changes['token'] || changes['userId'] || changes['endpointUrl'] || changes['threadId']) {\n        this.initializeChat();\n      }\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n      // Cleanup\n      // Restore body overflow\n      document.body.style.overflow = 'auto';\n    }\n    initializeChat() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          // Disable pull down to refresh\n          document.body.style.overflow = 'hidden';\n          // Set loading to false immediately since ChatComponents will handle its own initialization\n          _this.isLoading = false;\n        } catch (error) {\n          console.error('Failed to initialize chat screen:', error);\n          _this.isLoading = false;\n        }\n      })();\n    }\n    subscribeToTheme() {\n      this.teamsFxService.teamsContext$.pipe(takeUntil(this.destroy$)).subscribe(context => {\n        this.isDarkMode = context.themeString === 'dark';\n      });\n    }\n    handleOnResolveChat() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this2.agentWorkItemService.updateAgentWorkItem(_this2.threadId, ThreadItemStatus.RESOLVED);\n          _this2.onResolveChat.emit(_this2.threadId);\n        } catch (error) {\n          console.error('Failed to resolve chat:', error);\n        }\n      })();\n    }\n  }\n  _ChatScreenComponent = ChatScreenComponent;\n  _ChatScreenComponent.ɵfac = function ChatScreenComponent_Factory(t) {\n    return new (t || _ChatScreenComponent)(i0.ɵɵdirectiveInject(i1.TeamsFxService), i0.ɵɵdirectiveInject(i2.AgentWorkItemService));\n  };\n  _ChatScreenComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _ChatScreenComponent,\n    selectors: [[\"app-chat-screen\"]],\n    inputs: {\n      token: \"token\",\n      userId: \"userId\",\n      displayName: \"displayName\",\n      endpointUrl: \"endpointUrl\",\n      threadId: \"threadId\",\n      receiverName: \"receiverName\",\n      threadStatus: \"threadStatus\"\n    },\n    outputs: {\n      onResolveChat: \"onResolveChat\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 4,\n    vars: 2,\n    consts: [[\"loadingTemplate\", \"\"], [1, \"chat-screen-container\"], [4, \"ngIf\", \"ngIfElse\"], [3, \"onResolveChat\", \"personaName\", \"threadStatus\"], [1, \"chat-content\"], [3, \"isDarkMode\", \"threadId\", \"userId\", \"token\", \"endpointUrl\", \"displayName\"]],\n    template: function ChatScreenComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 1);\n        i0.ɵɵtemplate(1, ChatScreenComponent_ng_container_1_Template, 4, 8, \"ng-container\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, ChatScreenComponent_ng_template_2_Template, 1, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const loadingTemplate_r3 = i0.ɵɵreference(3);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoading)(\"ngIfElse\", loadingTemplate_r3);\n      }\n    },\n    dependencies: [i3.NgIf, i4.ChatHeaderComponent, i5.ChatComponentsComponent, i6.LoadingSpinnerComponent],\n    styles: [\".chat-screen-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:100%;min-height:400px;max-height:100vh;background-color:#fff;overflow:hidden}.chat-content[_ngcontent-%COMP%]{flex:1;display:flex;flex-direction:column;overflow:hidden;min-height:0}@media (max-width: 768px){.chat-screen-container[_ngcontent-%COMP%]{min-height:300px}}@media (max-width: 480px){.chat-screen-container[_ngcontent-%COMP%]{min-height:250px}}\"]\n  });\n  return ChatScreenComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}