{"ast":null,"code":"import { sendAndHandleSdkError as r } from \"../internal/communication.js\";\nimport { ensureInitialized as o } from \"../internal/internalAPIs.js\";\nimport { validateScanBarCodeInput as t } from \"../internal/mediaUtil.js\";\nimport { getApiVersionTag as n } from \"../internal/telemetry.js\";\nimport { FrameContexts as e, errorNotSupportedOnPlatform as s } from \"./constants.js\";\nimport { ErrorCode as i, DevicePermission as m } from \"./interfaces.js\";\nimport { runtime as a } from \"./runtime.js\";\nconst c = \"v2\";\nfunction f(m) {\n  return new Promise(f => {\n    if (o(a, e.content, e.task), !d()) throw s;\n    if (!t(m)) throw {\n      errorCode: i.INVALID_ARGUMENTS\n    };\n    f(r(n(c, \"barCode.scanBarCode\"), \"media.scanBarCode\", m));\n  });\n}\nfunction p() {\n  if (o(a, e.content, e.task), !d()) throw s;\n  const t = m.Media;\n  return new Promise(o => {\n    o(r(n(c, \"barCode.hasPermission\"), \"permissions.has\", t));\n  });\n}\nfunction u() {\n  if (o(a, e.content, e.task), !d()) throw s;\n  const t = m.Media;\n  return new Promise(o => {\n    o(r(n(c, \"barCode.requestPermission\"), \"permissions.request\", t));\n  });\n}\nfunction d() {\n  return !!(o(a) && a.supports.barCode && a.supports.permissions);\n}\nexport { p as hasPermission, d as isSupported, u as requestPermission, f as scanBarCode };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}