{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Creates a native AbortSignal which reflects the state of the provided AbortSignalLike.\n * If the AbortSignalLike is already a native AbortSignal, it is returned as is.\n * @param abortSignalLike - The AbortSignalLike to wrap.\n * @returns - An object containing the native AbortSignal and an optional cleanup function. The cleanup function should be called when the AbortSignal is no longer needed.\n */\nexport function wrapAbortSignalLike(abortSignalLike) {\n  if (abortSignalLike instanceof AbortSignal) {\n    return {\n      abortSignal: abortSignalLike\n    };\n  }\n  if (abortSignalLike.aborted) {\n    return {\n      abortSignal: AbortSignal.abort(abortSignalLike.reason)\n    };\n  }\n  const controller = new AbortController();\n  let needsCleanup = true;\n  function cleanup() {\n    if (needsCleanup) {\n      abortSignalLike.removeEventListener(\"abort\", listener);\n      needsCleanup = false;\n    }\n  }\n  function listener() {\n    controller.abort(abortSignalLike.reason);\n    cleanup();\n  }\n  abortSignalLike.addEventListener(\"abort\", listener);\n  return {\n    abortSignal: controller.signal,\n    cleanup\n  };\n}\n//# sourceMappingURL=wrapAbortSignal.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}