{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getIdentifierKind, getIdentifierRawId } from \"./identifierModels.js\";\nconst assertNotNullOrUndefined = (obj, prop) => {\n  const subObjName = Object.keys(obj)[0];\n  const subObj = obj[subObjName];\n  if (prop in subObj) {\n    return subObj[prop];\n  }\n  throw new Error(`Property ${prop} is required for identifier of type ${subObjName}.`);\n};\nconst assertMaximumOneNestedModel = identifier => {\n  const presentProperties = [];\n  if (identifier.communicationUser !== undefined) {\n    presentProperties.push(\"communicationUser\");\n  }\n  if (identifier.microsoftTeamsUser !== undefined) {\n    presentProperties.push(\"microsoftTeamsUser\");\n  }\n  if (identifier.microsoftTeamsApp !== undefined) {\n    presentProperties.push(\"microsoftTeamsApp\");\n  }\n  if (identifier.phoneNumber !== undefined) {\n    presentProperties.push(\"phoneNumber\");\n  }\n  if (identifier.teamsExtensionUser !== undefined) {\n    presentProperties.push(\"teamsExtensionUser\");\n  }\n  if (presentProperties.length > 1) {\n    throw new Error(`Only one of the properties in ${JSON.stringify(presentProperties)} should be present.`);\n  }\n};\n/**\n * @hidden\n * Translates a CommunicationIdentifier to its serialized format for sending a request.\n * @param identifier - The CommunicationIdentifier to be serialized.\n */\nexport const serializeCommunicationIdentifier = identifier => {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n  const identifierKind = getIdentifierKind(identifier);\n  switch (identifierKind.kind) {\n    case \"communicationUser\":\n      return {\n        rawId: getIdentifierRawId(identifierKind),\n        communicationUser: {\n          id: identifierKind.communicationUserId\n        }\n      };\n    case \"phoneNumber\":\n      return {\n        rawId: (_a = identifierKind.rawId) !== null && _a !== void 0 ? _a : getIdentifierRawId(identifierKind),\n        phoneNumber: {\n          value: identifierKind.phoneNumber,\n          isAnonymous: (_b = identifierKind.isAnonymous) !== null && _b !== void 0 ? _b : false,\n          assertedId: identifierKind.assertedId\n        }\n      };\n    case \"microsoftTeamsUser\":\n      return {\n        rawId: (_c = identifierKind.rawId) !== null && _c !== void 0 ? _c : getIdentifierRawId(identifierKind),\n        microsoftTeamsUser: {\n          userId: identifierKind.microsoftTeamsUserId,\n          isAnonymous: (_d = identifierKind.isAnonymous) !== null && _d !== void 0 ? _d : false,\n          cloud: (_e = identifierKind.cloud) !== null && _e !== void 0 ? _e : \"public\"\n        }\n      };\n    case \"microsoftTeamsApp\":\n      return {\n        rawId: (_f = identifierKind.rawId) !== null && _f !== void 0 ? _f : getIdentifierRawId(identifierKind),\n        microsoftTeamsApp: {\n          appId: identifierKind.teamsAppId,\n          cloud: (_g = identifierKind.cloud) !== null && _g !== void 0 ? _g : \"public\"\n        }\n      };\n    case \"teamsExtensionUser\":\n      return {\n        rawId: (_h = identifierKind.rawId) !== null && _h !== void 0 ? _h : getIdentifierRawId(identifierKind),\n        teamsExtensionUser: {\n          userId: identifierKind.userId,\n          tenantId: identifierKind.tenantId,\n          resourceId: identifierKind.resourceId,\n          cloud: (_j = identifierKind.cloud) !== null && _j !== void 0 ? _j : \"public\"\n        }\n      };\n    case \"unknown\":\n      return {\n        rawId: identifierKind.id\n      };\n    default:\n      throw new Error(`Can't serialize an identifier with kind ${identifierKind.kind}`);\n  }\n};\nconst getKind = serializedIdentifier => {\n  if (serializedIdentifier.communicationUser) {\n    return \"communicationUser\";\n  }\n  if (serializedIdentifier.phoneNumber) {\n    return \"phoneNumber\";\n  }\n  if (serializedIdentifier.microsoftTeamsUser) {\n    return \"microsoftTeamsUser\";\n  }\n  if (serializedIdentifier.microsoftTeamsApp) {\n    return \"microsoftTeamsApp\";\n  }\n  if (serializedIdentifier.teamsExtensionUser) {\n    return \"teamsExtensionUser\";\n  }\n  return \"unknown\";\n};\n/**\n * @hidden\n * Translates the serialized format of a communication identifier to CommunicationIdentifier.\n * @param serializedIdentifier - The SerializedCommunicationIdentifier to be deserialized.\n */\nexport const deserializeCommunicationIdentifier = serializedIdentifier => {\n  var _a, _b;\n  assertMaximumOneNestedModel(serializedIdentifier);\n  const communicationUser = serializedIdentifier.communicationUser;\n  const microsoftTeamsUser = serializedIdentifier.microsoftTeamsUser;\n  const microsoftTeamsApp = serializedIdentifier.microsoftTeamsApp;\n  const phoneNumber = serializedIdentifier.phoneNumber;\n  const teamsExtensionUser = serializedIdentifier.teamsExtensionUser;\n  const kind = (_a = serializedIdentifier.kind) !== null && _a !== void 0 ? _a : getKind(serializedIdentifier);\n  if (kind === \"communicationUser\" && communicationUser) {\n    return {\n      kind: \"communicationUser\",\n      communicationUserId: assertNotNullOrUndefined({\n        communicationUser\n      }, \"id\")\n    };\n  }\n  if (kind === \"phoneNumber\" && phoneNumber) {\n    return {\n      kind: \"phoneNumber\",\n      phoneNumber: assertNotNullOrUndefined({\n        phoneNumber\n      }, \"value\"),\n      rawId: assertNotNullOrUndefined({\n        phoneNumber: serializedIdentifier\n      }, \"rawId\"),\n      isAnonymous: (_b = phoneNumber.isAnonymous) !== null && _b !== void 0 ? _b : false,\n      assertedId: phoneNumber.assertedId\n    };\n  }\n  if (kind === \"microsoftTeamsUser\" && microsoftTeamsUser) {\n    return {\n      kind: \"microsoftTeamsUser\",\n      microsoftTeamsUserId: assertNotNullOrUndefined({\n        microsoftTeamsUser\n      }, \"userId\"),\n      isAnonymous: assertNotNullOrUndefined({\n        microsoftTeamsUser\n      }, \"isAnonymous\"),\n      cloud: assertNotNullOrUndefined({\n        microsoftTeamsUser\n      }, \"cloud\"),\n      rawId: assertNotNullOrUndefined({\n        microsoftTeamsUser: serializedIdentifier\n      }, \"rawId\")\n    };\n  }\n  if (kind === \"microsoftTeamsApp\" && microsoftTeamsApp) {\n    return {\n      kind: \"microsoftTeamsApp\",\n      teamsAppId: assertNotNullOrUndefined({\n        microsoftTeamsApp\n      }, \"appId\"),\n      cloud: assertNotNullOrUndefined({\n        microsoftTeamsApp\n      }, \"cloud\"),\n      rawId: assertNotNullOrUndefined({\n        microsoftTeamsApp: serializedIdentifier\n      }, \"rawId\")\n    };\n  }\n  if (kind === \"teamsExtensionUser\" && teamsExtensionUser) {\n    return {\n      kind: \"teamsExtensionUser\",\n      userId: assertNotNullOrUndefined({\n        teamsExtensionUser\n      }, \"userId\"),\n      tenantId: assertNotNullOrUndefined({\n        teamsExtensionUser\n      }, \"tenantId\"),\n      resourceId: assertNotNullOrUndefined({\n        teamsExtensionUser\n      }, \"resourceId\"),\n      cloud: assertNotNullOrUndefined({\n        teamsExtensionUser\n      }, \"cloud\"),\n      rawId: assertNotNullOrUndefined({\n        teamsExtensionUser: serializedIdentifier\n      }, \"rawId\")\n    };\n  }\n  return {\n    kind: \"unknown\",\n    id: assertNotNullOrUndefined({\n      unknown: serializedIdentifier\n    }, \"rawId\")\n  };\n};","map":{"version":3,"names":["getIdentifierKind","getIdentifierRawId","assertNotNullOrUndefined","obj","prop","subObjName","Object","keys","subObj","Error","assertMaximumOneNestedModel","identifier","presentProperties","communicationUser","undefined","push","microsoftTeamsUser","microsoftTeamsApp","phoneNumber","teamsExtensionUser","length","JSON","stringify","serializeCommunicationIdentifier","_a","_b","_c","_d","_e","_f","_g","_h","_j","identifierKind","kind","rawId","id","communicationUserId","value","isAnonymous","assertedId","userId","microsoftTeamsUserId","cloud","appId","teamsAppId","tenantId","resourceId","getKind","serializedIdentifier","deserializeCommunicationIdentifier","unknown"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/communication-common/dist/browser/identifierModelSerializer.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getIdentifierKind, getIdentifierRawId, } from \"./identifierModels.js\";\nconst assertNotNullOrUndefined = (obj, prop) => {\n    const subObjName = Object.keys(obj)[0];\n    const subObj = obj[subObjName];\n    if (prop in subObj) {\n        return subObj[prop];\n    }\n    throw new Error(`Property ${prop} is required for identifier of type ${subObjName}.`);\n};\nconst assertMaximumOneNestedModel = (identifier) => {\n    const presentProperties = [];\n    if (identifier.communicationUser !== undefined) {\n        presentProperties.push(\"communicationUser\");\n    }\n    if (identifier.microsoftTeamsUser !== undefined) {\n        presentProperties.push(\"microsoftTeamsUser\");\n    }\n    if (identifier.microsoftTeamsApp !== undefined) {\n        presentProperties.push(\"microsoftTeamsApp\");\n    }\n    if (identifier.phoneNumber !== undefined) {\n        presentProperties.push(\"phoneNumber\");\n    }\n    if (identifier.teamsExtensionUser !== undefined) {\n        presentProperties.push(\"teamsExtensionUser\");\n    }\n    if (presentProperties.length > 1) {\n        throw new Error(`Only one of the properties in ${JSON.stringify(presentProperties)} should be present.`);\n    }\n};\n/**\n * @hidden\n * Translates a CommunicationIdentifier to its serialized format for sending a request.\n * @param identifier - The CommunicationIdentifier to be serialized.\n */\nexport const serializeCommunicationIdentifier = (identifier) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    const identifierKind = getIdentifierKind(identifier);\n    switch (identifierKind.kind) {\n        case \"communicationUser\":\n            return {\n                rawId: getIdentifierRawId(identifierKind),\n                communicationUser: { id: identifierKind.communicationUserId },\n            };\n        case \"phoneNumber\":\n            return {\n                rawId: (_a = identifierKind.rawId) !== null && _a !== void 0 ? _a : getIdentifierRawId(identifierKind),\n                phoneNumber: {\n                    value: identifierKind.phoneNumber,\n                    isAnonymous: (_b = identifierKind.isAnonymous) !== null && _b !== void 0 ? _b : false,\n                    assertedId: identifierKind.assertedId,\n                },\n            };\n        case \"microsoftTeamsUser\":\n            return {\n                rawId: (_c = identifierKind.rawId) !== null && _c !== void 0 ? _c : getIdentifierRawId(identifierKind),\n                microsoftTeamsUser: {\n                    userId: identifierKind.microsoftTeamsUserId,\n                    isAnonymous: (_d = identifierKind.isAnonymous) !== null && _d !== void 0 ? _d : false,\n                    cloud: (_e = identifierKind.cloud) !== null && _e !== void 0 ? _e : \"public\",\n                },\n            };\n        case \"microsoftTeamsApp\":\n            return {\n                rawId: (_f = identifierKind.rawId) !== null && _f !== void 0 ? _f : getIdentifierRawId(identifierKind),\n                microsoftTeamsApp: {\n                    appId: identifierKind.teamsAppId,\n                    cloud: (_g = identifierKind.cloud) !== null && _g !== void 0 ? _g : \"public\",\n                },\n            };\n        case \"teamsExtensionUser\":\n            return {\n                rawId: (_h = identifierKind.rawId) !== null && _h !== void 0 ? _h : getIdentifierRawId(identifierKind),\n                teamsExtensionUser: {\n                    userId: identifierKind.userId,\n                    tenantId: identifierKind.tenantId,\n                    resourceId: identifierKind.resourceId,\n                    cloud: (_j = identifierKind.cloud) !== null && _j !== void 0 ? _j : \"public\",\n                },\n            };\n        case \"unknown\":\n            return { rawId: identifierKind.id };\n        default:\n            throw new Error(`Can't serialize an identifier with kind ${identifierKind.kind}`);\n    }\n};\nconst getKind = (serializedIdentifier) => {\n    if (serializedIdentifier.communicationUser) {\n        return \"communicationUser\";\n    }\n    if (serializedIdentifier.phoneNumber) {\n        return \"phoneNumber\";\n    }\n    if (serializedIdentifier.microsoftTeamsUser) {\n        return \"microsoftTeamsUser\";\n    }\n    if (serializedIdentifier.microsoftTeamsApp) {\n        return \"microsoftTeamsApp\";\n    }\n    if (serializedIdentifier.teamsExtensionUser) {\n        return \"teamsExtensionUser\";\n    }\n    return \"unknown\";\n};\n/**\n * @hidden\n * Translates the serialized format of a communication identifier to CommunicationIdentifier.\n * @param serializedIdentifier - The SerializedCommunicationIdentifier to be deserialized.\n */\nexport const deserializeCommunicationIdentifier = (serializedIdentifier) => {\n    var _a, _b;\n    assertMaximumOneNestedModel(serializedIdentifier);\n    const communicationUser = serializedIdentifier.communicationUser;\n    const microsoftTeamsUser = serializedIdentifier.microsoftTeamsUser;\n    const microsoftTeamsApp = serializedIdentifier.microsoftTeamsApp;\n    const phoneNumber = serializedIdentifier.phoneNumber;\n    const teamsExtensionUser = serializedIdentifier.teamsExtensionUser;\n    const kind = (_a = serializedIdentifier.kind) !== null && _a !== void 0 ? _a : getKind(serializedIdentifier);\n    if (kind === \"communicationUser\" && communicationUser) {\n        return {\n            kind: \"communicationUser\",\n            communicationUserId: assertNotNullOrUndefined({ communicationUser }, \"id\"),\n        };\n    }\n    if (kind === \"phoneNumber\" && phoneNumber) {\n        return {\n            kind: \"phoneNumber\",\n            phoneNumber: assertNotNullOrUndefined({ phoneNumber }, \"value\"),\n            rawId: assertNotNullOrUndefined({ phoneNumber: serializedIdentifier }, \"rawId\"),\n            isAnonymous: (_b = phoneNumber.isAnonymous) !== null && _b !== void 0 ? _b : false,\n            assertedId: phoneNumber.assertedId,\n        };\n    }\n    if (kind === \"microsoftTeamsUser\" && microsoftTeamsUser) {\n        return {\n            kind: \"microsoftTeamsUser\",\n            microsoftTeamsUserId: assertNotNullOrUndefined({ microsoftTeamsUser }, \"userId\"),\n            isAnonymous: assertNotNullOrUndefined({ microsoftTeamsUser }, \"isAnonymous\"),\n            cloud: assertNotNullOrUndefined({ microsoftTeamsUser }, \"cloud\"),\n            rawId: assertNotNullOrUndefined({ microsoftTeamsUser: serializedIdentifier }, \"rawId\"),\n        };\n    }\n    if (kind === \"microsoftTeamsApp\" && microsoftTeamsApp) {\n        return {\n            kind: \"microsoftTeamsApp\",\n            teamsAppId: assertNotNullOrUndefined({ microsoftTeamsApp }, \"appId\"),\n            cloud: assertNotNullOrUndefined({ microsoftTeamsApp }, \"cloud\"),\n            rawId: assertNotNullOrUndefined({ microsoftTeamsApp: serializedIdentifier }, \"rawId\"),\n        };\n    }\n    if (kind === \"teamsExtensionUser\" && teamsExtensionUser) {\n        return {\n            kind: \"teamsExtensionUser\",\n            userId: assertNotNullOrUndefined({ teamsExtensionUser }, \"userId\"),\n            tenantId: assertNotNullOrUndefined({ teamsExtensionUser }, \"tenantId\"),\n            resourceId: assertNotNullOrUndefined({ teamsExtensionUser }, \"resourceId\"),\n            cloud: assertNotNullOrUndefined({ teamsExtensionUser }, \"cloud\"),\n            rawId: assertNotNullOrUndefined({ teamsExtensionUser: serializedIdentifier }, \"rawId\"),\n        };\n    }\n    return {\n        kind: \"unknown\",\n        id: assertNotNullOrUndefined({ unknown: serializedIdentifier }, \"rawId\"),\n    };\n};\n"],"mappings":"AAAA;AACA;AACA,SAASA,iBAAiB,EAAEC,kBAAkB,QAAS,uBAAuB;AAC9E,MAAMC,wBAAwB,GAAGA,CAACC,GAAG,EAAEC,IAAI,KAAK;EAC5C,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACJ,GAAG,CAAC,CAAC,CAAC,CAAC;EACtC,MAAMK,MAAM,GAAGL,GAAG,CAACE,UAAU,CAAC;EAC9B,IAAID,IAAI,IAAII,MAAM,EAAE;IAChB,OAAOA,MAAM,CAACJ,IAAI,CAAC;EACvB;EACA,MAAM,IAAIK,KAAK,CAAC,YAAYL,IAAI,uCAAuCC,UAAU,GAAG,CAAC;AACzF,CAAC;AACD,MAAMK,2BAA2B,GAAIC,UAAU,IAAK;EAChD,MAAMC,iBAAiB,GAAG,EAAE;EAC5B,IAAID,UAAU,CAACE,iBAAiB,KAAKC,SAAS,EAAE;IAC5CF,iBAAiB,CAACG,IAAI,CAAC,mBAAmB,CAAC;EAC/C;EACA,IAAIJ,UAAU,CAACK,kBAAkB,KAAKF,SAAS,EAAE;IAC7CF,iBAAiB,CAACG,IAAI,CAAC,oBAAoB,CAAC;EAChD;EACA,IAAIJ,UAAU,CAACM,iBAAiB,KAAKH,SAAS,EAAE;IAC5CF,iBAAiB,CAACG,IAAI,CAAC,mBAAmB,CAAC;EAC/C;EACA,IAAIJ,UAAU,CAACO,WAAW,KAAKJ,SAAS,EAAE;IACtCF,iBAAiB,CAACG,IAAI,CAAC,aAAa,CAAC;EACzC;EACA,IAAIJ,UAAU,CAACQ,kBAAkB,KAAKL,SAAS,EAAE;IAC7CF,iBAAiB,CAACG,IAAI,CAAC,oBAAoB,CAAC;EAChD;EACA,IAAIH,iBAAiB,CAACQ,MAAM,GAAG,CAAC,EAAE;IAC9B,MAAM,IAAIX,KAAK,CAAC,iCAAiCY,IAAI,CAACC,SAAS,CAACV,iBAAiB,CAAC,qBAAqB,CAAC;EAC5G;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMW,gCAAgC,GAAIZ,UAAU,IAAK;EAC5D,IAAIa,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;EACtC,MAAMC,cAAc,GAAGjC,iBAAiB,CAACW,UAAU,CAAC;EACpD,QAAQsB,cAAc,CAACC,IAAI;IACvB,KAAK,mBAAmB;MACpB,OAAO;QACHC,KAAK,EAAElC,kBAAkB,CAACgC,cAAc,CAAC;QACzCpB,iBAAiB,EAAE;UAAEuB,EAAE,EAAEH,cAAc,CAACI;QAAoB;MAChE,CAAC;IACL,KAAK,aAAa;MACd,OAAO;QACHF,KAAK,EAAE,CAACX,EAAE,GAAGS,cAAc,CAACE,KAAK,MAAM,IAAI,IAAIX,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGvB,kBAAkB,CAACgC,cAAc,CAAC;QACtGf,WAAW,EAAE;UACToB,KAAK,EAAEL,cAAc,CAACf,WAAW;UACjCqB,WAAW,EAAE,CAACd,EAAE,GAAGQ,cAAc,CAACM,WAAW,MAAM,IAAI,IAAId,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,KAAK;UACrFe,UAAU,EAAEP,cAAc,CAACO;QAC/B;MACJ,CAAC;IACL,KAAK,oBAAoB;MACrB,OAAO;QACHL,KAAK,EAAE,CAACT,EAAE,GAAGO,cAAc,CAACE,KAAK,MAAM,IAAI,IAAIT,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGzB,kBAAkB,CAACgC,cAAc,CAAC;QACtGjB,kBAAkB,EAAE;UAChByB,MAAM,EAAER,cAAc,CAACS,oBAAoB;UAC3CH,WAAW,EAAE,CAACZ,EAAE,GAAGM,cAAc,CAACM,WAAW,MAAM,IAAI,IAAIZ,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,KAAK;UACrFgB,KAAK,EAAE,CAACf,EAAE,GAAGK,cAAc,CAACU,KAAK,MAAM,IAAI,IAAIf,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG;QACxE;MACJ,CAAC;IACL,KAAK,mBAAmB;MACpB,OAAO;QACHO,KAAK,EAAE,CAACN,EAAE,GAAGI,cAAc,CAACE,KAAK,MAAM,IAAI,IAAIN,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG5B,kBAAkB,CAACgC,cAAc,CAAC;QACtGhB,iBAAiB,EAAE;UACf2B,KAAK,EAAEX,cAAc,CAACY,UAAU;UAChCF,KAAK,EAAE,CAACb,EAAE,GAAGG,cAAc,CAACU,KAAK,MAAM,IAAI,IAAIb,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG;QACxE;MACJ,CAAC;IACL,KAAK,oBAAoB;MACrB,OAAO;QACHK,KAAK,EAAE,CAACJ,EAAE,GAAGE,cAAc,CAACE,KAAK,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG9B,kBAAkB,CAACgC,cAAc,CAAC;QACtGd,kBAAkB,EAAE;UAChBsB,MAAM,EAAER,cAAc,CAACQ,MAAM;UAC7BK,QAAQ,EAAEb,cAAc,CAACa,QAAQ;UACjCC,UAAU,EAAEd,cAAc,CAACc,UAAU;UACrCJ,KAAK,EAAE,CAACX,EAAE,GAAGC,cAAc,CAACU,KAAK,MAAM,IAAI,IAAIX,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG;QACxE;MACJ,CAAC;IACL,KAAK,SAAS;MACV,OAAO;QAAEG,KAAK,EAAEF,cAAc,CAACG;MAAG,CAAC;IACvC;MACI,MAAM,IAAI3B,KAAK,CAAC,2CAA2CwB,cAAc,CAACC,IAAI,EAAE,CAAC;EACzF;AACJ,CAAC;AACD,MAAMc,OAAO,GAAIC,oBAAoB,IAAK;EACtC,IAAIA,oBAAoB,CAACpC,iBAAiB,EAAE;IACxC,OAAO,mBAAmB;EAC9B;EACA,IAAIoC,oBAAoB,CAAC/B,WAAW,EAAE;IAClC,OAAO,aAAa;EACxB;EACA,IAAI+B,oBAAoB,CAACjC,kBAAkB,EAAE;IACzC,OAAO,oBAAoB;EAC/B;EACA,IAAIiC,oBAAoB,CAAChC,iBAAiB,EAAE;IACxC,OAAO,mBAAmB;EAC9B;EACA,IAAIgC,oBAAoB,CAAC9B,kBAAkB,EAAE;IACzC,OAAO,oBAAoB;EAC/B;EACA,OAAO,SAAS;AACpB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM+B,kCAAkC,GAAID,oBAAoB,IAAK;EACxE,IAAIzB,EAAE,EAAEC,EAAE;EACVf,2BAA2B,CAACuC,oBAAoB,CAAC;EACjD,MAAMpC,iBAAiB,GAAGoC,oBAAoB,CAACpC,iBAAiB;EAChE,MAAMG,kBAAkB,GAAGiC,oBAAoB,CAACjC,kBAAkB;EAClE,MAAMC,iBAAiB,GAAGgC,oBAAoB,CAAChC,iBAAiB;EAChE,MAAMC,WAAW,GAAG+B,oBAAoB,CAAC/B,WAAW;EACpD,MAAMC,kBAAkB,GAAG8B,oBAAoB,CAAC9B,kBAAkB;EAClE,MAAMe,IAAI,GAAG,CAACV,EAAE,GAAGyB,oBAAoB,CAACf,IAAI,MAAM,IAAI,IAAIV,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGwB,OAAO,CAACC,oBAAoB,CAAC;EAC5G,IAAIf,IAAI,KAAK,mBAAmB,IAAIrB,iBAAiB,EAAE;IACnD,OAAO;MACHqB,IAAI,EAAE,mBAAmB;MACzBG,mBAAmB,EAAEnC,wBAAwB,CAAC;QAAEW;MAAkB,CAAC,EAAE,IAAI;IAC7E,CAAC;EACL;EACA,IAAIqB,IAAI,KAAK,aAAa,IAAIhB,WAAW,EAAE;IACvC,OAAO;MACHgB,IAAI,EAAE,aAAa;MACnBhB,WAAW,EAAEhB,wBAAwB,CAAC;QAAEgB;MAAY,CAAC,EAAE,OAAO,CAAC;MAC/DiB,KAAK,EAAEjC,wBAAwB,CAAC;QAAEgB,WAAW,EAAE+B;MAAqB,CAAC,EAAE,OAAO,CAAC;MAC/EV,WAAW,EAAE,CAACd,EAAE,GAAGP,WAAW,CAACqB,WAAW,MAAM,IAAI,IAAId,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,KAAK;MAClFe,UAAU,EAAEtB,WAAW,CAACsB;IAC5B,CAAC;EACL;EACA,IAAIN,IAAI,KAAK,oBAAoB,IAAIlB,kBAAkB,EAAE;IACrD,OAAO;MACHkB,IAAI,EAAE,oBAAoB;MAC1BQ,oBAAoB,EAAExC,wBAAwB,CAAC;QAAEc;MAAmB,CAAC,EAAE,QAAQ,CAAC;MAChFuB,WAAW,EAAErC,wBAAwB,CAAC;QAAEc;MAAmB,CAAC,EAAE,aAAa,CAAC;MAC5E2B,KAAK,EAAEzC,wBAAwB,CAAC;QAAEc;MAAmB,CAAC,EAAE,OAAO,CAAC;MAChEmB,KAAK,EAAEjC,wBAAwB,CAAC;QAAEc,kBAAkB,EAAEiC;MAAqB,CAAC,EAAE,OAAO;IACzF,CAAC;EACL;EACA,IAAIf,IAAI,KAAK,mBAAmB,IAAIjB,iBAAiB,EAAE;IACnD,OAAO;MACHiB,IAAI,EAAE,mBAAmB;MACzBW,UAAU,EAAE3C,wBAAwB,CAAC;QAAEe;MAAkB,CAAC,EAAE,OAAO,CAAC;MACpE0B,KAAK,EAAEzC,wBAAwB,CAAC;QAAEe;MAAkB,CAAC,EAAE,OAAO,CAAC;MAC/DkB,KAAK,EAAEjC,wBAAwB,CAAC;QAAEe,iBAAiB,EAAEgC;MAAqB,CAAC,EAAE,OAAO;IACxF,CAAC;EACL;EACA,IAAIf,IAAI,KAAK,oBAAoB,IAAIf,kBAAkB,EAAE;IACrD,OAAO;MACHe,IAAI,EAAE,oBAAoB;MAC1BO,MAAM,EAAEvC,wBAAwB,CAAC;QAAEiB;MAAmB,CAAC,EAAE,QAAQ,CAAC;MAClE2B,QAAQ,EAAE5C,wBAAwB,CAAC;QAAEiB;MAAmB,CAAC,EAAE,UAAU,CAAC;MACtE4B,UAAU,EAAE7C,wBAAwB,CAAC;QAAEiB;MAAmB,CAAC,EAAE,YAAY,CAAC;MAC1EwB,KAAK,EAAEzC,wBAAwB,CAAC;QAAEiB;MAAmB,CAAC,EAAE,OAAO,CAAC;MAChEgB,KAAK,EAAEjC,wBAAwB,CAAC;QAAEiB,kBAAkB,EAAE8B;MAAqB,CAAC,EAAE,OAAO;IACzF,CAAC;EACL;EACA,OAAO;IACHf,IAAI,EAAE,SAAS;IACfE,EAAE,EAAElC,wBAAwB,CAAC;MAAEiD,OAAO,EAAEF;IAAqB,CAAC,EAAE,OAAO;EAC3E,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}