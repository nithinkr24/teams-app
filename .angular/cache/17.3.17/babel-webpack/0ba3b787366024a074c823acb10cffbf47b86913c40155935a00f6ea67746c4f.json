{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Tests an Identifier to determine whether it implements CommunicationUserIdentifier.\n *\n * @param identifier - The assumed CommunicationUserIdentifier to be tested.\n */\nexport const isCommunicationUserIdentifier = identifier => {\n  return typeof identifier.communicationUserId === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements PhoneNumberIdentifier.\n *\n * @param identifier - The assumed PhoneNumberIdentifier to be tested.\n */\nexport const isPhoneNumberIdentifier = identifier => {\n  return typeof identifier.phoneNumber === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements MicrosoftTeamsUserIdentifier.\n *\n * @param identifier - The assumed available to be tested.\n */\nexport const isMicrosoftTeamsUserIdentifier = identifier => {\n  return typeof identifier.microsoftTeamsUserId === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements MicrosoftTeamsAppIdentifier.\n *\n * @param identifier - The assumed available to be tested.\n */\nexport const isMicrosoftTeamsAppIdentifier = identifier => {\n  return typeof identifier.teamsAppId === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements TeamsExtensionUserIdentifier.\n *\n * @param identifier - The assumed available to be tested.\n */\nexport const isTeamsExtensionUserIdentifier = identifier => {\n  const userIdExists = typeof identifier.userId === \"string\";\n  const tenantIdExists = typeof identifier.tenantId === \"string\";\n  const resourceIdExists = typeof identifier.resourceId === \"string\";\n  return userIdExists && tenantIdExists && resourceIdExists;\n};\n/**\n * Tests an Identifier to determine whether it implements UnknownIdentifier.\n *\n * @param identifier - The assumed UnknownIdentifier to be tested.\n */\nexport const isUnknownIdentifier = identifier => {\n  return typeof identifier.id === \"string\";\n};\n/**\n * Returns the CommunicationIdentifierKind for a given CommunicationIdentifier. Returns undefined if the kind couldn't be inferred.\n *\n * @param identifier - The identifier whose kind is to be inferred.\n */\nexport const getIdentifierKind = identifier => {\n  if (isCommunicationUserIdentifier(identifier)) {\n    return Object.assign(Object.assign({}, identifier), {\n      kind: \"communicationUser\"\n    });\n  }\n  if (isPhoneNumberIdentifier(identifier)) {\n    return Object.assign(Object.assign({}, identifier), {\n      kind: \"phoneNumber\"\n    });\n  }\n  if (isMicrosoftTeamsUserIdentifier(identifier)) {\n    return Object.assign(Object.assign({}, identifier), {\n      kind: \"microsoftTeamsUser\"\n    });\n  }\n  if (isMicrosoftTeamsAppIdentifier(identifier)) {\n    return Object.assign(Object.assign({}, identifier), {\n      kind: \"microsoftTeamsApp\"\n    });\n  }\n  if (isTeamsExtensionUserIdentifier(identifier)) {\n    return Object.assign(Object.assign({}, identifier), {\n      kind: \"teamsExtensionUser\"\n    });\n  }\n  return Object.assign(Object.assign({}, identifier), {\n    kind: \"unknown\"\n  });\n};\n/**\n * Returns the rawId for a given CommunicationIdentifier. You can use the rawId for encoding the identifier and then use it as a key in a database.\n *\n * @param identifier - The identifier to be translated to its rawId.\n */\nexport const getIdentifierRawId = identifier => {\n  const identifierKind = getIdentifierKind(identifier);\n  switch (identifierKind.kind) {\n    case \"communicationUser\":\n      return identifierKind.communicationUserId;\n    case \"microsoftTeamsUser\":\n      {\n        const {\n          microsoftTeamsUserId,\n          rawId,\n          cloud,\n          isAnonymous\n        } = identifierKind;\n        if (rawId) return rawId;\n        if (isAnonymous) return `8:teamsvisitor:${microsoftTeamsUserId}`;\n        switch (cloud) {\n          case \"dod\":\n            return `8:dod:${microsoftTeamsUserId}`;\n          case \"gcch\":\n            return `8:gcch:${microsoftTeamsUserId}`;\n          case \"public\":\n            return `8:orgid:${microsoftTeamsUserId}`;\n        }\n        return `8:orgid:${microsoftTeamsUserId}`;\n      }\n    case \"microsoftTeamsApp\":\n      {\n        const {\n          teamsAppId,\n          rawId,\n          cloud\n        } = identifierKind;\n        if (rawId) return rawId;\n        switch (cloud) {\n          case \"dod\":\n            return `28:dod:${teamsAppId}`;\n          case \"gcch\":\n            return `28:gcch:${teamsAppId}`;\n        }\n        return `28:orgid:${teamsAppId}`;\n      }\n    case \"phoneNumber\":\n      {\n        const {\n          phoneNumber,\n          rawId\n        } = identifierKind;\n        if (rawId) return rawId;\n        return `4:${phoneNumber}`;\n      }\n    case \"teamsExtensionUser\":\n      {\n        const {\n          userId,\n          tenantId,\n          resourceId,\n          rawId,\n          cloud\n        } = identifierKind;\n        if (rawId) return rawId;\n        switch (cloud) {\n          case \"dod\":\n            return `8:dod-acs:${resourceId}_${tenantId}_${userId}`;\n          case \"gcch\":\n            return `8:gcch-acs:${resourceId}_${tenantId}_${userId}`;\n        }\n        return `8:acs:${resourceId}_${tenantId}_${userId}`;\n      }\n    case \"unknown\":\n      {\n        return identifierKind.id;\n      }\n  }\n};\nconst buildMicrosoftTeamsAppIdentifier = (teamsAppId, cloud) => {\n  return {\n    kind: \"microsoftTeamsApp\",\n    teamsAppId: teamsAppId,\n    cloud: cloud\n  };\n};\nconst buildMicrosoftTeamsUserIdentifier = (id, cloud, isAnonymous) => {\n  return {\n    kind: \"microsoftTeamsUser\",\n    microsoftTeamsUserId: id,\n    isAnonymous: isAnonymous,\n    cloud: cloud\n  };\n};\nconst buildTeamsExtensionUserOrCommunicationUserIdentifier = (rawId, suffix, cloud) => {\n  const segments = suffix.split(\"_\");\n  if (segments.length !== 3) {\n    return {\n      kind: \"communicationUser\",\n      communicationUserId: rawId\n    };\n  }\n  const resourceId = segments[0];\n  const tenantId = segments[1];\n  const userId = segments[2];\n  return {\n    kind: \"teamsExtensionUser\",\n    userId: userId,\n    tenantId: tenantId,\n    resourceId: resourceId,\n    cloud: cloud\n  };\n};\nconst buildPhoneNumberIdentifier = rawId => {\n  const phoneNumber = rawId.substring(\"4:\".length);\n  const isAnonymous = phoneNumber === \"anonymous\";\n  const assertedIdIndex = isAnonymous ? -1 : phoneNumber.lastIndexOf(\"_\") + 1;\n  const hasAssertedId = assertedIdIndex > 0 && assertedIdIndex < phoneNumber.length;\n  const assertedId = hasAssertedId ? phoneNumber.substring(assertedIdIndex) : undefined;\n  return {\n    kind: \"phoneNumber\",\n    phoneNumber: phoneNumber,\n    isAnonymous: isAnonymous,\n    assertedId: assertedId\n  };\n};\n/**\n * Creates a CommunicationIdentifierKind from a given rawId. When storing rawIds use this function to restore the identifier that was encoded in the rawId.\n *\n * @param rawId - The rawId to be translated to its identifier representation.\n */\nexport const createIdentifierFromRawId = rawId => {\n  if (rawId.startsWith(\"4:\")) {\n    return buildPhoneNumberIdentifier(rawId);\n  }\n  const segments = rawId.split(\":\");\n  if (segments.length !== 3) {\n    return {\n      kind: \"unknown\",\n      id: rawId\n    };\n  }\n  const prefix = `${segments[0]}:${segments[1]}:`;\n  const suffix = segments[2];\n  switch (prefix) {\n    case \"8:teamsvisitor:\":\n      return {\n        kind: \"microsoftTeamsUser\",\n        microsoftTeamsUserId: suffix,\n        isAnonymous: true\n      };\n    case \"8:orgid:\":\n      return buildMicrosoftTeamsUserIdentifier(suffix, \"public\", false);\n    case \"8:dod:\":\n      return buildMicrosoftTeamsUserIdentifier(suffix, \"dod\", false);\n    case \"8:gcch:\":\n      return buildMicrosoftTeamsUserIdentifier(suffix, \"gcch\", false);\n    case \"8:acs:\":\n      return buildTeamsExtensionUserOrCommunicationUserIdentifier(rawId, suffix, \"public\");\n    case \"8:dod-acs:\":\n      return buildTeamsExtensionUserOrCommunicationUserIdentifier(rawId, suffix, \"dod\");\n    case \"8:gcch-acs:\":\n      return buildTeamsExtensionUserOrCommunicationUserIdentifier(rawId, suffix, \"gcch\");\n    case \"8:spool:\":\n      return {\n        kind: \"communicationUser\",\n        communicationUserId: rawId\n      };\n    case \"28:orgid:\":\n      return buildMicrosoftTeamsAppIdentifier(suffix, \"public\");\n    case \"28:gcch:\":\n      return buildMicrosoftTeamsAppIdentifier(suffix, \"gcch\");\n    case \"28:dod:\":\n      return buildMicrosoftTeamsAppIdentifier(suffix, \"dod\");\n  }\n  return {\n    kind: \"unknown\",\n    id: rawId\n  };\n};","map":{"version":3,"names":["isCommunicationUserIdentifier","identifier","communicationUserId","isPhoneNumberIdentifier","phoneNumber","isMicrosoftTeamsUserIdentifier","microsoftTeamsUserId","isMicrosoftTeamsAppIdentifier","teamsAppId","isTeamsExtensionUserIdentifier","userIdExists","userId","tenantIdExists","tenantId","resourceIdExists","resourceId","isUnknownIdentifier","id","getIdentifierKind","Object","assign","kind","getIdentifierRawId","identifierKind","rawId","cloud","isAnonymous","buildMicrosoftTeamsAppIdentifier","buildMicrosoftTeamsUserIdentifier","buildTeamsExtensionUserOrCommunicationUserIdentifier","suffix","segments","split","length","buildPhoneNumberIdentifier","substring","assertedIdIndex","lastIndexOf","hasAssertedId","assertedId","undefined","createIdentifierFromRawId","startsWith","prefix"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/communication-common/dist/browser/identifierModels.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Tests an Identifier to determine whether it implements CommunicationUserIdentifier.\n *\n * @param identifier - The assumed CommunicationUserIdentifier to be tested.\n */\nexport const isCommunicationUserIdentifier = (identifier) => {\n    return typeof identifier.communicationUserId === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements PhoneNumberIdentifier.\n *\n * @param identifier - The assumed PhoneNumberIdentifier to be tested.\n */\nexport const isPhoneNumberIdentifier = (identifier) => {\n    return typeof identifier.phoneNumber === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements MicrosoftTeamsUserIdentifier.\n *\n * @param identifier - The assumed available to be tested.\n */\nexport const isMicrosoftTeamsUserIdentifier = (identifier) => {\n    return typeof identifier.microsoftTeamsUserId === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements MicrosoftTeamsAppIdentifier.\n *\n * @param identifier - The assumed available to be tested.\n */\nexport const isMicrosoftTeamsAppIdentifier = (identifier) => {\n    return typeof identifier.teamsAppId === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements TeamsExtensionUserIdentifier.\n *\n * @param identifier - The assumed available to be tested.\n */\nexport const isTeamsExtensionUserIdentifier = (identifier) => {\n    const userIdExists = typeof identifier.userId === \"string\";\n    const tenantIdExists = typeof identifier.tenantId === \"string\";\n    const resourceIdExists = typeof identifier.resourceId === \"string\";\n    return userIdExists && tenantIdExists && resourceIdExists;\n};\n/**\n * Tests an Identifier to determine whether it implements UnknownIdentifier.\n *\n * @param identifier - The assumed UnknownIdentifier to be tested.\n */\nexport const isUnknownIdentifier = (identifier) => {\n    return typeof identifier.id === \"string\";\n};\n/**\n * Returns the CommunicationIdentifierKind for a given CommunicationIdentifier. Returns undefined if the kind couldn't be inferred.\n *\n * @param identifier - The identifier whose kind is to be inferred.\n */\nexport const getIdentifierKind = (identifier) => {\n    if (isCommunicationUserIdentifier(identifier)) {\n        return Object.assign(Object.assign({}, identifier), { kind: \"communicationUser\" });\n    }\n    if (isPhoneNumberIdentifier(identifier)) {\n        return Object.assign(Object.assign({}, identifier), { kind: \"phoneNumber\" });\n    }\n    if (isMicrosoftTeamsUserIdentifier(identifier)) {\n        return Object.assign(Object.assign({}, identifier), { kind: \"microsoftTeamsUser\" });\n    }\n    if (isMicrosoftTeamsAppIdentifier(identifier)) {\n        return Object.assign(Object.assign({}, identifier), { kind: \"microsoftTeamsApp\" });\n    }\n    if (isTeamsExtensionUserIdentifier(identifier)) {\n        return Object.assign(Object.assign({}, identifier), { kind: \"teamsExtensionUser\" });\n    }\n    return Object.assign(Object.assign({}, identifier), { kind: \"unknown\" });\n};\n/**\n * Returns the rawId for a given CommunicationIdentifier. You can use the rawId for encoding the identifier and then use it as a key in a database.\n *\n * @param identifier - The identifier to be translated to its rawId.\n */\nexport const getIdentifierRawId = (identifier) => {\n    const identifierKind = getIdentifierKind(identifier);\n    switch (identifierKind.kind) {\n        case \"communicationUser\":\n            return identifierKind.communicationUserId;\n        case \"microsoftTeamsUser\": {\n            const { microsoftTeamsUserId, rawId, cloud, isAnonymous } = identifierKind;\n            if (rawId)\n                return rawId;\n            if (isAnonymous)\n                return `8:teamsvisitor:${microsoftTeamsUserId}`;\n            switch (cloud) {\n                case \"dod\":\n                    return `8:dod:${microsoftTeamsUserId}`;\n                case \"gcch\":\n                    return `8:gcch:${microsoftTeamsUserId}`;\n                case \"public\":\n                    return `8:orgid:${microsoftTeamsUserId}`;\n            }\n            return `8:orgid:${microsoftTeamsUserId}`;\n        }\n        case \"microsoftTeamsApp\": {\n            const { teamsAppId, rawId, cloud } = identifierKind;\n            if (rawId)\n                return rawId;\n            switch (cloud) {\n                case \"dod\":\n                    return `28:dod:${teamsAppId}`;\n                case \"gcch\":\n                    return `28:gcch:${teamsAppId}`;\n            }\n            return `28:orgid:${teamsAppId}`;\n        }\n        case \"phoneNumber\": {\n            const { phoneNumber, rawId } = identifierKind;\n            if (rawId)\n                return rawId;\n            return `4:${phoneNumber}`;\n        }\n        case \"teamsExtensionUser\": {\n            const { userId, tenantId, resourceId, rawId, cloud } = identifierKind;\n            if (rawId)\n                return rawId;\n            switch (cloud) {\n                case \"dod\":\n                    return `8:dod-acs:${resourceId}_${tenantId}_${userId}`;\n                case \"gcch\":\n                    return `8:gcch-acs:${resourceId}_${tenantId}_${userId}`;\n            }\n            return `8:acs:${resourceId}_${tenantId}_${userId}`;\n        }\n        case \"unknown\": {\n            return identifierKind.id;\n        }\n    }\n};\nconst buildMicrosoftTeamsAppIdentifier = (teamsAppId, cloud) => {\n    return {\n        kind: \"microsoftTeamsApp\",\n        teamsAppId: teamsAppId,\n        cloud: cloud,\n    };\n};\nconst buildMicrosoftTeamsUserIdentifier = (id, cloud, isAnonymous) => {\n    return {\n        kind: \"microsoftTeamsUser\",\n        microsoftTeamsUserId: id,\n        isAnonymous: isAnonymous,\n        cloud: cloud,\n    };\n};\nconst buildTeamsExtensionUserOrCommunicationUserIdentifier = (rawId, suffix, cloud) => {\n    const segments = suffix.split(\"_\");\n    if (segments.length !== 3) {\n        return { kind: \"communicationUser\", communicationUserId: rawId };\n    }\n    const resourceId = segments[0];\n    const tenantId = segments[1];\n    const userId = segments[2];\n    return {\n        kind: \"teamsExtensionUser\",\n        userId: userId,\n        tenantId: tenantId,\n        resourceId: resourceId,\n        cloud: cloud,\n    };\n};\nconst buildPhoneNumberIdentifier = (rawId) => {\n    const phoneNumber = rawId.substring(\"4:\".length);\n    const isAnonymous = phoneNumber === \"anonymous\";\n    const assertedIdIndex = isAnonymous ? -1 : phoneNumber.lastIndexOf(\"_\") + 1;\n    const hasAssertedId = assertedIdIndex > 0 && assertedIdIndex < phoneNumber.length;\n    const assertedId = hasAssertedId ? phoneNumber.substring(assertedIdIndex) : undefined;\n    return {\n        kind: \"phoneNumber\",\n        phoneNumber: phoneNumber,\n        isAnonymous: isAnonymous,\n        assertedId: assertedId,\n    };\n};\n/**\n * Creates a CommunicationIdentifierKind from a given rawId. When storing rawIds use this function to restore the identifier that was encoded in the rawId.\n *\n * @param rawId - The rawId to be translated to its identifier representation.\n */\nexport const createIdentifierFromRawId = (rawId) => {\n    if (rawId.startsWith(\"4:\")) {\n        return buildPhoneNumberIdentifier(rawId);\n    }\n    const segments = rawId.split(\":\");\n    if (segments.length !== 3) {\n        return { kind: \"unknown\", id: rawId };\n    }\n    const prefix = `${segments[0]}:${segments[1]}:`;\n    const suffix = segments[2];\n    switch (prefix) {\n        case \"8:teamsvisitor:\":\n            return { kind: \"microsoftTeamsUser\", microsoftTeamsUserId: suffix, isAnonymous: true };\n        case \"8:orgid:\":\n            return buildMicrosoftTeamsUserIdentifier(suffix, \"public\", false);\n        case \"8:dod:\":\n            return buildMicrosoftTeamsUserIdentifier(suffix, \"dod\", false);\n        case \"8:gcch:\":\n            return buildMicrosoftTeamsUserIdentifier(suffix, \"gcch\", false);\n        case \"8:acs:\":\n            return buildTeamsExtensionUserOrCommunicationUserIdentifier(rawId, suffix, \"public\");\n        case \"8:dod-acs:\":\n            return buildTeamsExtensionUserOrCommunicationUserIdentifier(rawId, suffix, \"dod\");\n        case \"8:gcch-acs:\":\n            return buildTeamsExtensionUserOrCommunicationUserIdentifier(rawId, suffix, \"gcch\");\n        case \"8:spool:\":\n            return { kind: \"communicationUser\", communicationUserId: rawId };\n        case \"28:orgid:\":\n            return buildMicrosoftTeamsAppIdentifier(suffix, \"public\");\n        case \"28:gcch:\":\n            return buildMicrosoftTeamsAppIdentifier(suffix, \"gcch\");\n        case \"28:dod:\":\n            return buildMicrosoftTeamsAppIdentifier(suffix, \"dod\");\n    }\n    return { kind: \"unknown\", id: rawId };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}