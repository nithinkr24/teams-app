{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { createCommunicationAccessKeyCredentialPolicy } from \"./communicationAccessKeyCredentialPolicy.js\";\n/**\n * Creates a pipeline policy to authenticate request based\n * on the credential passed in.\n * @hidden\n *\n * @param credential - The KeyCredential or TokenCredential.\n */\nexport function createCommunicationAuthPolicy(credential) {\n  if (isTokenCredential(credential)) {\n    const policyOptions = {\n      credential: credential,\n      scopes: [\"https://communication.azure.com//.default\"]\n    };\n    return bearerTokenAuthenticationPolicy(policyOptions);\n  } else {\n    return createCommunicationAccessKeyCredentialPolicy(credential);\n  }\n}","map":{"version":3,"names":["bearerTokenAuthenticationPolicy","isTokenCredential","createCommunicationAccessKeyCredentialPolicy","createCommunicationAuthPolicy","credential","policyOptions","scopes"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/communication-common/dist/browser/credential/communicationAuthPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { bearerTokenAuthenticationPolicy, } from \"@azure/core-rest-pipeline\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { createCommunicationAccessKeyCredentialPolicy } from \"./communicationAccessKeyCredentialPolicy.js\";\n/**\n * Creates a pipeline policy to authenticate request based\n * on the credential passed in.\n * @hidden\n *\n * @param credential - The KeyCredential or TokenCredential.\n */\nexport function createCommunicationAuthPolicy(credential) {\n    if (isTokenCredential(credential)) {\n        const policyOptions = {\n            credential: credential,\n            scopes: [\"https://communication.azure.com//.default\"],\n        };\n        return bearerTokenAuthenticationPolicy(policyOptions);\n    }\n    else {\n        return createCommunicationAccessKeyCredentialPolicy(credential);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,+BAA+B,QAAS,2BAA2B;AAC5E,SAASC,iBAAiB,QAAQ,kBAAkB;AACpD,SAASC,4CAA4C,QAAQ,6CAA6C;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,6BAA6BA,CAACC,UAAU,EAAE;EACtD,IAAIH,iBAAiB,CAACG,UAAU,CAAC,EAAE;IAC/B,MAAMC,aAAa,GAAG;MAClBD,UAAU,EAAEA,UAAU;MACtBE,MAAM,EAAE,CAAC,2CAA2C;IACxD,CAAC;IACD,OAAON,+BAA+B,CAACK,aAAa,CAAC;EACzD,CAAC,MACI;IACD,OAAOH,4CAA4C,CAACE,UAAU,CAAC;EACnE;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}