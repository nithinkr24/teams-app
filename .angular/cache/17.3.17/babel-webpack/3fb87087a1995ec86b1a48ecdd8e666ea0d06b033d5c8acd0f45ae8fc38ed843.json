{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Creates a native AbortSignal which reflects the state of the provided AbortSignalLike.\n * If the AbortSignalLike is already a native AbortSignal, it is returned as is.\n * @param abortSignalLike - The AbortSignalLike to wrap.\n * @returns - An object containing the native AbortSignal and an optional cleanup function. The cleanup function should be called when the AbortSignal is no longer needed.\n */\nexport function wrapAbortSignalLike(abortSignalLike) {\n  if (abortSignalLike instanceof AbortSignal) {\n    return {\n      abortSignal: abortSignalLike\n    };\n  }\n  if (abortSignalLike.aborted) {\n    return {\n      abortSignal: AbortSignal.abort(abortSignalLike.reason)\n    };\n  }\n  const controller = new AbortController();\n  let needsCleanup = true;\n  function cleanup() {\n    if (needsCleanup) {\n      abortSignalLike.removeEventListener(\"abort\", listener);\n      needsCleanup = false;\n    }\n  }\n  function listener() {\n    controller.abort(abortSignalLike.reason);\n    cleanup();\n  }\n  abortSignalLike.addEventListener(\"abort\", listener);\n  return {\n    abortSignal: controller.signal,\n    cleanup\n  };\n}","map":{"version":3,"names":["wrapAbortSignalLike","abortSignalLike","AbortSignal","abortSignal","aborted","abort","reason","controller","AbortController","needsCleanup","cleanup","removeEventListener","listener","addEventListener","signal"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-rest-pipeline/dist/browser/util/wrapAbortSignal.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Creates a native AbortSignal which reflects the state of the provided AbortSignalLike.\n * If the AbortSignalLike is already a native AbortSignal, it is returned as is.\n * @param abortSignalLike - The AbortSignalLike to wrap.\n * @returns - An object containing the native AbortSignal and an optional cleanup function. The cleanup function should be called when the AbortSignal is no longer needed.\n */\nexport function wrapAbortSignalLike(abortSignalLike) {\n    if (abortSignalLike instanceof AbortSignal) {\n        return { abortSignal: abortSignalLike };\n    }\n    if (abortSignalLike.aborted) {\n        return { abortSignal: AbortSignal.abort(abortSignalLike.reason) };\n    }\n    const controller = new AbortController();\n    let needsCleanup = true;\n    function cleanup() {\n        if (needsCleanup) {\n            abortSignalLike.removeEventListener(\"abort\", listener);\n            needsCleanup = false;\n        }\n    }\n    function listener() {\n        controller.abort(abortSignalLike.reason);\n        cleanup();\n    }\n    abortSignalLike.addEventListener(\"abort\", listener);\n    return { abortSignal: controller.signal, cleanup };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,mBAAmBA,CAACC,eAAe,EAAE;EACjD,IAAIA,eAAe,YAAYC,WAAW,EAAE;IACxC,OAAO;MAAEC,WAAW,EAAEF;IAAgB,CAAC;EAC3C;EACA,IAAIA,eAAe,CAACG,OAAO,EAAE;IACzB,OAAO;MAAED,WAAW,EAAED,WAAW,CAACG,KAAK,CAACJ,eAAe,CAACK,MAAM;IAAE,CAAC;EACrE;EACA,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;EACxC,IAAIC,YAAY,GAAG,IAAI;EACvB,SAASC,OAAOA,CAAA,EAAG;IACf,IAAID,YAAY,EAAE;MACdR,eAAe,CAACU,mBAAmB,CAAC,OAAO,EAAEC,QAAQ,CAAC;MACtDH,YAAY,GAAG,KAAK;IACxB;EACJ;EACA,SAASG,QAAQA,CAAA,EAAG;IAChBL,UAAU,CAACF,KAAK,CAACJ,eAAe,CAACK,MAAM,CAAC;IACxCI,OAAO,CAAC,CAAC;EACb;EACAT,eAAe,CAACY,gBAAgB,CAAC,OAAO,EAAED,QAAQ,CAAC;EACnD,OAAO;IAAET,WAAW,EAAEI,UAAU,CAACO,MAAM;IAAEJ;EAAQ,CAAC;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}