{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { proxyPolicy as tspProxyPolicy, proxyPolicyName as tspProxyPolicyName, getDefaultProxySettings as tspGetDefaultProxySettings } from \"@typespec/ts-http-runtime/internal/policies\";\n/**\n * The programmatic identifier of the proxyPolicy.\n */\nexport const proxyPolicyName = tspProxyPolicyName;\n/**\n * This method converts a proxy url into `ProxySettings` for use with ProxyPolicy.\n * If no argument is given, it attempts to parse a proxy URL from the environment\n * variables `HTTPS_PROXY` or `HTTP_PROXY`.\n * @param proxyUrl - The url of the proxy to use. May contain authentication information.\n * @deprecated - Internally this method is no longer necessary when setting proxy information.\n */\nexport function getDefaultProxySettings(proxyUrl) {\n  return tspGetDefaultProxySettings(proxyUrl);\n}\n/**\n * A policy that allows one to apply proxy settings to all requests.\n * If not passed static settings, they will be retrieved from the HTTPS_PROXY\n * or HTTP_PROXY environment variables.\n * @param proxySettings - ProxySettings to use on each request.\n * @param options - additional settings, for example, custom NO_PROXY patterns\n */\nexport function proxyPolicy(proxySettings, options) {\n  return tspProxyPolicy(proxySettings, options);\n}","map":{"version":3,"names":["proxyPolicy","tspProxyPolicy","proxyPolicyName","tspProxyPolicyName","getDefaultProxySettings","tspGetDefaultProxySettings","proxyUrl","proxySettings","options"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { proxyPolicy as tspProxyPolicy, proxyPolicyName as tspProxyPolicyName, getDefaultProxySettings as tspGetDefaultProxySettings, } from \"@typespec/ts-http-runtime/internal/policies\";\n/**\n * The programmatic identifier of the proxyPolicy.\n */\nexport const proxyPolicyName = tspProxyPolicyName;\n/**\n * This method converts a proxy url into `ProxySettings` for use with ProxyPolicy.\n * If no argument is given, it attempts to parse a proxy URL from the environment\n * variables `HTTPS_PROXY` or `HTTP_PROXY`.\n * @param proxyUrl - The url of the proxy to use. May contain authentication information.\n * @deprecated - Internally this method is no longer necessary when setting proxy information.\n */\nexport function getDefaultProxySettings(proxyUrl) {\n    return tspGetDefaultProxySettings(proxyUrl);\n}\n/**\n * A policy that allows one to apply proxy settings to all requests.\n * If not passed static settings, they will be retrieved from the HTTPS_PROXY\n * or HTTP_PROXY environment variables.\n * @param proxySettings - ProxySettings to use on each request.\n * @param options - additional settings, for example, custom NO_PROXY patterns\n */\nexport function proxyPolicy(proxySettings, options) {\n    return tspProxyPolicy(proxySettings, options);\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,WAAW,IAAIC,cAAc,EAAEC,eAAe,IAAIC,kBAAkB,EAAEC,uBAAuB,IAAIC,0BAA0B,QAAS,6CAA6C;AAC1L;AACA;AACA;AACA,OAAO,MAAMH,eAAe,GAAGC,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAACE,QAAQ,EAAE;EAC9C,OAAOD,0BAA0B,CAACC,QAAQ,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASN,WAAWA,CAACO,aAAa,EAAEC,OAAO,EAAE;EAChD,OAAOP,cAAc,CAACM,aAAa,EAAEC,OAAO,CAAC;AACjD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}