{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isWebReadableStream } from \"./typeGuards.js\";\n/**\n * Drain the content of the given ReadableStream into a Blob.\n * The blob's content may end up in memory or on disk dependent on size.\n */\nfunction drain(stream) {\n  return new Response(stream).blob();\n}\nfunction toBlobPart(_x) {\n  return _toBlobPart.apply(this, arguments);\n}\n/**\n * Utility function that concatenates a set of binary inputs into one combined output.\n *\n * @param sources - array of sources for the concatenation\n * @returns - in Node, a (() =\\> NodeJS.ReadableStream) which, when read, produces a concatenation of all the inputs.\n *           In browser, returns a `Blob` representing all the concatenated inputs.\n *\n * @internal\n */\nfunction _toBlobPart() {\n  _toBlobPart = _asyncToGenerator(function* (source) {\n    if (source instanceof Blob || source instanceof Uint8Array) {\n      return source;\n    }\n    if (isWebReadableStream(source)) {\n      return drain(source);\n    } else {\n      throw new Error(\"Unsupported source type. Only Blob, Uint8Array, and ReadableStream are supported in browser.\");\n    }\n  });\n  return _toBlobPart.apply(this, arguments);\n}\nexport function concat(_x2) {\n  return _concat.apply(this, arguments);\n}\nfunction _concat() {\n  _concat = _asyncToGenerator(function* (sources) {\n    const parts = [];\n    for (const source of sources) {\n      parts.push(yield toBlobPart(typeof source === \"function\" ? source() : source));\n    }\n    return new Blob(parts);\n  });\n  return _concat.apply(this, arguments);\n}","map":{"version":3,"names":["isWebReadableStream","drain","stream","Response","blob","toBlobPart","_x","_toBlobPart","apply","arguments","_asyncToGenerator","source","Blob","Uint8Array","Error","concat","_x2","_concat","sources","parts","push"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/util/concat.common.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isWebReadableStream } from \"./typeGuards.js\";\n/**\n * Drain the content of the given ReadableStream into a Blob.\n * The blob's content may end up in memory or on disk dependent on size.\n */\nfunction drain(stream) {\n    return new Response(stream).blob();\n}\nasync function toBlobPart(source) {\n    if (source instanceof Blob || source instanceof Uint8Array) {\n        return source;\n    }\n    if (isWebReadableStream(source)) {\n        return drain(source);\n    }\n    else {\n        throw new Error(\"Unsupported source type. Only Blob, Uint8Array, and ReadableStream are supported in browser.\");\n    }\n}\n/**\n * Utility function that concatenates a set of binary inputs into one combined output.\n *\n * @param sources - array of sources for the concatenation\n * @returns - in Node, a (() =\\> NodeJS.ReadableStream) which, when read, produces a concatenation of all the inputs.\n *           In browser, returns a `Blob` representing all the concatenated inputs.\n *\n * @internal\n */\nexport async function concat(sources) {\n    const parts = [];\n    for (const source of sources) {\n        parts.push(await toBlobPart(typeof source === \"function\" ? source() : source));\n    }\n    return new Blob(parts);\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,mBAAmB,QAAQ,iBAAiB;AACrD;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAACC,MAAM,EAAE;EACnB,OAAO,IAAIC,QAAQ,CAACD,MAAM,CAAC,CAACE,IAAI,CAAC,CAAC;AACtC;AAAC,SACcC,UAAUA,CAAAC,EAAA;EAAA,OAAAC,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAWzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAF,YAAA;EAAAA,WAAA,GAAAG,iBAAA,CAXA,WAA0BC,MAAM,EAAE;IAC9B,IAAIA,MAAM,YAAYC,IAAI,IAAID,MAAM,YAAYE,UAAU,EAAE;MACxD,OAAOF,MAAM;IACjB;IACA,IAAIX,mBAAmB,CAACW,MAAM,CAAC,EAAE;MAC7B,OAAOV,KAAK,CAACU,MAAM,CAAC;IACxB,CAAC,MACI;MACD,MAAM,IAAIG,KAAK,CAAC,8FAA8F,CAAC;IACnH;EACJ,CAAC;EAAA,OAAAP,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAUD,gBAAsBM,MAAMA,CAAAC,GAAA;EAAA,OAAAC,OAAA,CAAAT,KAAA,OAAAC,SAAA;AAAA;AAM3B,SAAAQ,QAAA;EAAAA,OAAA,GAAAP,iBAAA,CANM,WAAsBQ,OAAO,EAAE;IAClC,MAAMC,KAAK,GAAG,EAAE;IAChB,KAAK,MAAMR,MAAM,IAAIO,OAAO,EAAE;MAC1BC,KAAK,CAACC,IAAI,OAAOf,UAAU,CAAC,OAAOM,MAAM,KAAK,UAAU,GAAGA,MAAM,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC;IAClF;IACA,OAAO,IAAIC,IAAI,CAACO,KAAK,CAAC;EAC1B,CAAC;EAAA,OAAAF,OAAA,CAAAT,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}