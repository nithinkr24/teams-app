{"ast":null,"code":"import { GlobalVars as e } from \"./globalVars.js\";\nimport { getLogger as t, getApiVersionTag as n } from \"./telemetry.js\";\nconst s = t(\"nestedAppAuthUtils\"),\n  r = s.extend(\"tryPolyfillWithNestedAppAuthBridge\"),\n  o = \"v2\";\nfunction i(t, s, i) {\n  var p;\n  const u = r;\n  if (e.isFramelessWindow) return void u(\"Cannot polyfill nestedAppAuthBridge as current window is frameless\");\n  if (!s) return void u(\"Cannot polyfill nestedAppAuthBridge as current window does not exist\");\n  if (s.parent !== s.top) return void u(\"Default NAA bridge injection not supported in nested iframe. Use standalone NAA bridge instead.\");\n  const a = (() => {\n    try {\n      return JSON.parse(t);\n    } catch (e) {\n      return null;\n    }\n  })();\n  if (!a || !(null === (p = a.supports) || void 0 === p ? void 0 : p.nestedAppAuth)) return void u(\"Cannot polyfill nestedAppAuthBridge as current hub does not support nested app auth\");\n  const l = s;\n  if (l.nestedAppAuthBridge) return void u(\"nestedAppAuthBridge already exists on current window, skipping polyfill\");\n  const A = function (e, t) {\n    const s = d;\n    if (!e) return s(\"nestedAppAuthBridge cannot be created as current window does not exist\"), null;\n    const {\n        onMessage: r,\n        sendPostMessage: i\n      } = t,\n      p = e => t => r(t, e);\n    return {\n      addEventListener: (t, n) => {\n        \"message\" === t ? e.addEventListener(t, p(n)) : s(`Event ${t} is not supported by nestedAppAuthBridge`);\n      },\n      postMessage: e => {\n        const t = (() => {\n          try {\n            return JSON.parse(e);\n          } catch (e) {\n            return null;\n          }\n        })();\n        if (!t || \"object\" != typeof t || \"NestedAppAuthRequest\" !== t.messageType) return void s(\"Unrecognized data format received by app, message being ignored. Message: %o\", e);\n        const r = n(o, \"nestedAppAuth.execute\");\n        i(e, r);\n      },\n      removeEventListener: (t, n) => {\n        e.removeEventListener(t, p(n));\n      }\n    };\n  }(l, i);\n  A && (l.nestedAppAuthBridge = A);\n}\nconst d = s.extend(\"createNestedAppAuthBridge\");\nexport { o as nestedAppAuthTelemetryVersionNumber, i as tryPolyfillWithNestedAppAuthBridge };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}