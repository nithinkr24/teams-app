{"ast":null,"code":"import { __awaiter as t } from \"../../../../node_modules/.pnpm/@rollup_plugin-typescript@11.1.6_rollup@4.24.4_tslib@2.6.3_typescript@4.9.5/node_modules/tslib/tslib.es6.js\";\nimport { sendAndHandleSdkError as r } from \"../internal/communication.js\";\nimport { GlobalVars as e } from \"../internal/globalVars.js\";\nimport { ensureInitialized as o } from \"../internal/internalAPIs.js\";\nimport { getApiVersionTag as i } from \"../internal/telemetry.js\";\nimport { getBase64StringFromBlob as n, base64ToBlob as s } from \"../internal/utils.js\";\nimport { FrameContexts as p, errorNotSupportedOnPlatform as a } from \"./constants.js\";\nimport { ClipboardSupportedMimeType as l } from \"./interfaces.js\";\nimport { runtime as m } from \"./runtime.js\";\nfunction c(e) {\n  return t(this, void 0, void 0, function* () {\n    if (o(m, p.content, p.meetingStage, p.task, p.settings, p.stage, p.sidePanel), !u()) throw a;\n    if (!e.type || !Object.values(l).includes(e.type)) throw new Error(`Blob type ${e.type} is not supported. Supported blob types are ${Object.values(l)}`);\n    const t = yield n(e),\n      s = {\n        mimeType: e.type,\n        content: t\n      };\n    return r(i(\"v2\", \"clipboard.write\"), \"clipboard.writeToClipboard\", s);\n  });\n}\nfunction d() {\n  return t(this, void 0, void 0, function* () {\n    o(m, p.content, p.meetingStage, p.task, p.settings, p.stage, p.sidePanel);\n    const t = i(\"v2\", \"clipboard.read\");\n    if (!u()) throw a;\n    const e = yield r(t, \"clipboard.readFromClipboard\");\n    if (\"string\" == typeof e) {\n      const t = JSON.parse(e);\n      return s(t.mimeType, t.content);\n    }\n    return e;\n  });\n}\nfunction u() {\n  return e.isFramelessWindow ? !(!o(m) || !m.supports.clipboard) : !!(o(m) && navigator && navigator.clipboard && m.supports.clipboard);\n}\nexport { u as isSupported, d as read, c as write };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}