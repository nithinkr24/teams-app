{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport { tracingClient } from \"../tracing.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\n/** Class containing ChatThread operations. */\nexport class ChatThreadImpl {\n  /**\n   * Initialize a new instance of the class ChatThread class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Gets chat message read receipts for a thread.\n   * @param chatThreadId Thread id to get the chat message read receipts for.\n   * @param options The options parameters.\n   */\n  listChatReadReceipts(chatThreadId, options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatReadReceipts\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (options) {\n          return _this.client.sendOperationRequest({\n            chatThreadId,\n            options\n          }, listChatReadReceiptsOperationSpec);\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Sends a read receipt event to a thread, on behalf of a user.\n   * @param chatThreadId Thread id to send the read receipt event to.\n   * @param sendReadReceiptRequest Read receipt details.\n   * @param options The options parameters.\n   */\n  sendChatReadReceipt(chatThreadId, sendReadReceiptRequest, options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.sendChatReadReceipt\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (options) {\n          return _this2.client.sendOperationRequest({\n            chatThreadId,\n            sendReadReceiptRequest,\n            options\n          }, sendChatReadReceiptOperationSpec);\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Sends a message to a thread.\n   * @param chatThreadId The thread id to send the message to.\n   * @param sendChatMessageRequest Details of the message to send.\n   * @param options The options parameters.\n   */\n  sendChatMessage(chatThreadId, sendChatMessageRequest, options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.sendChatMessage\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (options) {\n          return _this3.client.sendOperationRequest({\n            chatThreadId,\n            sendChatMessageRequest,\n            options\n          }, sendChatMessageOperationSpec);\n        });\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Gets a list of messages from a thread.\n   * @param chatThreadId The thread id of the message.\n   * @param options The options parameters.\n   */\n  listChatMessages(chatThreadId, options) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatMessages\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (options) {\n          return _this4.client.sendOperationRequest({\n            chatThreadId,\n            options\n          }, listChatMessagesOperationSpec);\n        });\n        return function (_x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Gets a message by id.\n   * @param chatThreadId The thread id to which the message was sent.\n   * @param chatMessageId The message id.\n   * @param options The options parameters.\n   */\n  getChatMessage(chatThreadId, chatMessageId, options) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.getChatMessage\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator(function* (options) {\n          return _this5.client.sendOperationRequest({\n            chatThreadId,\n            chatMessageId,\n            options\n          }, getChatMessageOperationSpec);\n        });\n        return function (_x5) {\n          return _ref5.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Updates a message.\n   * @param chatThreadId The thread id to which the message was sent.\n   * @param chatMessageId The message id.\n   * @param updateChatMessageRequest Details of the request to update the message.\n   * @param options The options parameters.\n   */\n  updateChatMessage(chatThreadId, chatMessageId, updateChatMessageRequest, options) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.updateChatMessage\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref6 = _asyncToGenerator(function* (options) {\n          return _this6.client.sendOperationRequest({\n            chatThreadId,\n            chatMessageId,\n            updateChatMessageRequest,\n            options\n          }, updateChatMessageOperationSpec);\n        });\n        return function (_x6) {\n          return _ref6.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Deletes a message.\n   * @param chatThreadId The thread id to which the message was sent.\n   * @param chatMessageId The message id.\n   * @param options The options parameters.\n   */\n  deleteChatMessage(chatThreadId, chatMessageId, options) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.deleteChatMessage\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref7 = _asyncToGenerator(function* (options) {\n          return _this7.client.sendOperationRequest({\n            chatThreadId,\n            chatMessageId,\n            options\n          }, deleteChatMessageOperationSpec);\n        });\n        return function (_x7) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Gets the participants of a thread.\n   * @param chatThreadId Thread id to get participants for.\n   * @param options The options parameters.\n   */\n  listChatParticipants(chatThreadId, options) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatParticipants\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref8 = _asyncToGenerator(function* (options) {\n          return _this8.client.sendOperationRequest({\n            chatThreadId,\n            options\n          }, listChatParticipantsOperationSpec);\n        });\n        return function (_x8) {\n          return _ref8.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Remove a participant from a thread.\n   * @param chatThreadId Thread id to remove the participant from.\n   * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.\n   * @param options The options parameters.\n   */\n  removeChatParticipant(chatThreadId, participantCommunicationIdentifier, options) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.removeChatParticipant\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref9 = _asyncToGenerator(function* (options) {\n          return _this9.client.sendOperationRequest({\n            chatThreadId,\n            participantCommunicationIdentifier,\n            options\n          }, removeChatParticipantOperationSpec);\n        });\n        return function (_x9) {\n          return _ref9.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Adds thread participants to a thread. If participants already exist, no change occurs.\n   * @param chatThreadId Id of the thread to add participants to.\n   * @param addChatParticipantsRequest Thread participants to be added to the thread.\n   * @param options The options parameters.\n   */\n  addChatParticipants(chatThreadId, addChatParticipantsRequest, options) {\n    var _this0 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.addChatParticipants\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref0 = _asyncToGenerator(function* (options) {\n          return _this0.client.sendOperationRequest({\n            chatThreadId,\n            addChatParticipantsRequest,\n            options\n          }, addChatParticipantsOperationSpec);\n        });\n        return function (_x0) {\n          return _ref0.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Updates a thread's properties.\n   * @param chatThreadId The id of the thread to update.\n   * @param updateChatThreadRequest Request payload for updating a chat thread.\n   * @param options The options parameters.\n   */\n  updateChatThreadProperties(chatThreadId, updateChatThreadRequest, options) {\n    var _this1 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.updateChatThreadProperties\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref1 = _asyncToGenerator(function* (options) {\n          return _this1.client.sendOperationRequest({\n            chatThreadId,\n            updateChatThreadRequest,\n            options\n          }, updateChatThreadPropertiesOperationSpec);\n        });\n        return function (_x1) {\n          return _ref1.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Gets a chat thread's properties.\n   * @param chatThreadId Id of the thread.\n   * @param options The options parameters.\n   */\n  getChatThreadProperties(chatThreadId, options) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.getChatThreadProperties\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref10 = _asyncToGenerator(function* (options) {\n          return _this10.client.sendOperationRequest({\n            chatThreadId,\n            options\n          }, getChatThreadPropertiesOperationSpec);\n        });\n        return function (_x10) {\n          return _ref10.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Posts a typing event to a thread, on behalf of a user.\n   * @param chatThreadId Id of the thread.\n   * @param options The options parameters.\n   */\n  sendTypingNotification(chatThreadId, options) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.sendTypingNotification\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref11 = _asyncToGenerator(function* (options) {\n          return _this11.client.sendOperationRequest({\n            chatThreadId,\n            options\n          }, sendTypingNotificationOperationSpec);\n        });\n        return function (_x11) {\n          return _ref11.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * ListChatReadReceiptsNext\n   * @param chatThreadId Thread id to get the chat message read receipts for.\n   * @param nextLink The nextLink from the previous successful call to the ListChatReadReceipts method.\n   * @param options The options parameters.\n   */\n  listChatReadReceiptsNext(chatThreadId, nextLink, options) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatReadReceiptsNext\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref12 = _asyncToGenerator(function* (options) {\n          return _this12.client.sendOperationRequest({\n            chatThreadId,\n            nextLink,\n            options\n          }, listChatReadReceiptsNextOperationSpec);\n        });\n        return function (_x12) {\n          return _ref12.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * ListChatMessagesNext\n   * @param chatThreadId The thread id of the message.\n   * @param nextLink The nextLink from the previous successful call to the ListChatMessages method.\n   * @param options The options parameters.\n   */\n  listChatMessagesNext(chatThreadId, nextLink, options) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatMessagesNext\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref13 = _asyncToGenerator(function* (options) {\n          return _this13.client.sendOperationRequest({\n            chatThreadId,\n            nextLink,\n            options\n          }, listChatMessagesNextOperationSpec);\n        });\n        return function (_x13) {\n          return _ref13.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * ListChatParticipantsNext\n   * @param chatThreadId Thread id to get participants for.\n   * @param nextLink The nextLink from the previous successful call to the ListChatParticipants method.\n   * @param options The options parameters.\n   */\n  listChatParticipantsNext(chatThreadId, nextLink, options) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatParticipantsNext\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref14 = _asyncToGenerator(function* (options) {\n          return _this14.client.sendOperationRequest({\n            chatThreadId,\n            nextLink,\n            options\n          }, listChatParticipantsNextOperationSpec);\n        });\n        return function (_x14) {\n          return _ref14.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */false);\nconst listChatReadReceiptsOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/readReceipts\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessageReadReceiptsCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.maxPageSize, Parameters.skip, Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst sendChatReadReceiptOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/readReceipts\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.sendReadReceiptRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst sendChatMessageOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.SendChatMessageResult\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.sendChatMessageRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listChatMessagesOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessagesCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.maxPageSize, Parameters.apiVersion, Parameters.startTime],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChatMessageOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessage\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.chatMessageId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateChatMessageOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.updateChatMessageRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.chatMessageId],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteChatMessageOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.chatMessageId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listChatParticipantsOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/participants\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatParticipantsCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.maxPageSize, Parameters.skip, Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst removeChatParticipantOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/participants/:remove\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.participantCommunicationIdentifier,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst addChatParticipantsOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/participants/:add\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.AddChatParticipantsResult\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.addChatParticipantsRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst updateChatThreadPropertiesOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.updateChatThreadRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst getChatThreadPropertiesOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatThreadProperties\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst sendTypingNotificationOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/typing\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.sendTypingNotificationRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listChatReadReceiptsNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessageReadReceiptsCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listChatMessagesNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessagesCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listChatParticipantsNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatParticipantsCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};","map":{"version":3,"names":["tracingClient","coreClient","Mappers","Parameters","ChatThreadImpl","constructor","client","listChatReadReceipts","chatThreadId","options","_this","_asyncToGenerator","withSpan","_ref","sendOperationRequest","listChatReadReceiptsOperationSpec","_x","apply","arguments","sendChatReadReceipt","sendReadReceiptRequest","_this2","_ref2","sendChatReadReceiptOperationSpec","_x2","sendChatMessage","sendChatMessageRequest","_this3","_ref3","sendChatMessageOperationSpec","_x3","listChatMessages","_this4","_ref4","listChatMessagesOperationSpec","_x4","getChatMessage","chatMessageId","_this5","_ref5","getChatMessageOperationSpec","_x5","updateChatMessage","updateChatMessageRequest","_this6","_ref6","updateChatMessageOperationSpec","_x6","deleteChatMessage","_this7","_ref7","deleteChatMessageOperationSpec","_x7","listChatParticipants","_this8","_ref8","listChatParticipantsOperationSpec","_x8","removeChatParticipant","participantCommunicationIdentifier","_this9","_ref9","removeChatParticipantOperationSpec","_x9","addChatParticipants","addChatParticipantsRequest","_this0","_ref0","addChatParticipantsOperationSpec","_x0","updateChatThreadProperties","updateChatThreadRequest","_this1","_ref1","updateChatThreadPropertiesOperationSpec","_x1","getChatThreadProperties","_this10","_ref10","getChatThreadPropertiesOperationSpec","_x10","sendTypingNotification","_this11","_ref11","sendTypingNotificationOperationSpec","_x11","listChatReadReceiptsNext","nextLink","_this12","_ref12","listChatReadReceiptsNextOperationSpec","_x12","listChatMessagesNext","_this13","_ref13","listChatMessagesNextOperationSpec","_x13","listChatParticipantsNext","_this14","_ref14","listChatParticipantsNextOperationSpec","_x14","serializer","createSerializer","path","httpMethod","responses","bodyMapper","ChatMessageReadReceiptsCollection","CommunicationErrorResponse","isError","queryParameters","maxPageSize","skip","apiVersion","urlParameters","endpoint","headerParameters","accept","requestBody","contentType","mediaType","SendChatMessageResult","ChatMessagesCollection","startTime","ChatMessage","contentType1","ChatParticipantsCollection","AddChatParticipantsResult","ChatThreadProperties","sendTypingNotificationRequest"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/communication-chat/dist/browser/generated/src/operations/chatThread.js"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport { tracingClient } from \"../tracing.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\n/** Class containing ChatThread operations. */\nexport class ChatThreadImpl {\n    /**\n     * Initialize a new instance of the class ChatThread class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Gets chat message read receipts for a thread.\n     * @param chatThreadId Thread id to get the chat message read receipts for.\n     * @param options The options parameters.\n     */\n    async listChatReadReceipts(chatThreadId, options) {\n        return tracingClient.withSpan(\"ChatApiClient.listChatReadReceipts\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, options }, listChatReadReceiptsOperationSpec);\n        });\n    }\n    /**\n     * Sends a read receipt event to a thread, on behalf of a user.\n     * @param chatThreadId Thread id to send the read receipt event to.\n     * @param sendReadReceiptRequest Read receipt details.\n     * @param options The options parameters.\n     */\n    async sendChatReadReceipt(chatThreadId, sendReadReceiptRequest, options) {\n        return tracingClient.withSpan(\"ChatApiClient.sendChatReadReceipt\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, sendReadReceiptRequest, options }, sendChatReadReceiptOperationSpec);\n        });\n    }\n    /**\n     * Sends a message to a thread.\n     * @param chatThreadId The thread id to send the message to.\n     * @param sendChatMessageRequest Details of the message to send.\n     * @param options The options parameters.\n     */\n    async sendChatMessage(chatThreadId, sendChatMessageRequest, options) {\n        return tracingClient.withSpan(\"ChatApiClient.sendChatMessage\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, sendChatMessageRequest, options }, sendChatMessageOperationSpec);\n        });\n    }\n    /**\n     * Gets a list of messages from a thread.\n     * @param chatThreadId The thread id of the message.\n     * @param options The options parameters.\n     */\n    async listChatMessages(chatThreadId, options) {\n        return tracingClient.withSpan(\"ChatApiClient.listChatMessages\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, options }, listChatMessagesOperationSpec);\n        });\n    }\n    /**\n     * Gets a message by id.\n     * @param chatThreadId The thread id to which the message was sent.\n     * @param chatMessageId The message id.\n     * @param options The options parameters.\n     */\n    async getChatMessage(chatThreadId, chatMessageId, options) {\n        return tracingClient.withSpan(\"ChatApiClient.getChatMessage\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, chatMessageId, options }, getChatMessageOperationSpec);\n        });\n    }\n    /**\n     * Updates a message.\n     * @param chatThreadId The thread id to which the message was sent.\n     * @param chatMessageId The message id.\n     * @param updateChatMessageRequest Details of the request to update the message.\n     * @param options The options parameters.\n     */\n    async updateChatMessage(chatThreadId, chatMessageId, updateChatMessageRequest, options) {\n        return tracingClient.withSpan(\"ChatApiClient.updateChatMessage\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, chatMessageId, updateChatMessageRequest, options }, updateChatMessageOperationSpec);\n        });\n    }\n    /**\n     * Deletes a message.\n     * @param chatThreadId The thread id to which the message was sent.\n     * @param chatMessageId The message id.\n     * @param options The options parameters.\n     */\n    async deleteChatMessage(chatThreadId, chatMessageId, options) {\n        return tracingClient.withSpan(\"ChatApiClient.deleteChatMessage\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, chatMessageId, options }, deleteChatMessageOperationSpec);\n        });\n    }\n    /**\n     * Gets the participants of a thread.\n     * @param chatThreadId Thread id to get participants for.\n     * @param options The options parameters.\n     */\n    async listChatParticipants(chatThreadId, options) {\n        return tracingClient.withSpan(\"ChatApiClient.listChatParticipants\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, options }, listChatParticipantsOperationSpec);\n        });\n    }\n    /**\n     * Remove a participant from a thread.\n     * @param chatThreadId Thread id to remove the participant from.\n     * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.\n     * @param options The options parameters.\n     */\n    async removeChatParticipant(chatThreadId, participantCommunicationIdentifier, options) {\n        return tracingClient.withSpan(\"ChatApiClient.removeChatParticipant\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, participantCommunicationIdentifier, options }, removeChatParticipantOperationSpec);\n        });\n    }\n    /**\n     * Adds thread participants to a thread. If participants already exist, no change occurs.\n     * @param chatThreadId Id of the thread to add participants to.\n     * @param addChatParticipantsRequest Thread participants to be added to the thread.\n     * @param options The options parameters.\n     */\n    async addChatParticipants(chatThreadId, addChatParticipantsRequest, options) {\n        return tracingClient.withSpan(\"ChatApiClient.addChatParticipants\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, addChatParticipantsRequest, options }, addChatParticipantsOperationSpec);\n        });\n    }\n    /**\n     * Updates a thread's properties.\n     * @param chatThreadId The id of the thread to update.\n     * @param updateChatThreadRequest Request payload for updating a chat thread.\n     * @param options The options parameters.\n     */\n    async updateChatThreadProperties(chatThreadId, updateChatThreadRequest, options) {\n        return tracingClient.withSpan(\"ChatApiClient.updateChatThreadProperties\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, updateChatThreadRequest, options }, updateChatThreadPropertiesOperationSpec);\n        });\n    }\n    /**\n     * Gets a chat thread's properties.\n     * @param chatThreadId Id of the thread.\n     * @param options The options parameters.\n     */\n    async getChatThreadProperties(chatThreadId, options) {\n        return tracingClient.withSpan(\"ChatApiClient.getChatThreadProperties\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, options }, getChatThreadPropertiesOperationSpec);\n        });\n    }\n    /**\n     * Posts a typing event to a thread, on behalf of a user.\n     * @param chatThreadId Id of the thread.\n     * @param options The options parameters.\n     */\n    async sendTypingNotification(chatThreadId, options) {\n        return tracingClient.withSpan(\"ChatApiClient.sendTypingNotification\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, options }, sendTypingNotificationOperationSpec);\n        });\n    }\n    /**\n     * ListChatReadReceiptsNext\n     * @param chatThreadId Thread id to get the chat message read receipts for.\n     * @param nextLink The nextLink from the previous successful call to the ListChatReadReceipts method.\n     * @param options The options parameters.\n     */\n    async listChatReadReceiptsNext(chatThreadId, nextLink, options) {\n        return tracingClient.withSpan(\"ChatApiClient.listChatReadReceiptsNext\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, nextLink, options }, listChatReadReceiptsNextOperationSpec);\n        });\n    }\n    /**\n     * ListChatMessagesNext\n     * @param chatThreadId The thread id of the message.\n     * @param nextLink The nextLink from the previous successful call to the ListChatMessages method.\n     * @param options The options parameters.\n     */\n    async listChatMessagesNext(chatThreadId, nextLink, options) {\n        return tracingClient.withSpan(\"ChatApiClient.listChatMessagesNext\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, nextLink, options }, listChatMessagesNextOperationSpec);\n        });\n    }\n    /**\n     * ListChatParticipantsNext\n     * @param chatThreadId Thread id to get participants for.\n     * @param nextLink The nextLink from the previous successful call to the ListChatParticipants method.\n     * @param options The options parameters.\n     */\n    async listChatParticipantsNext(chatThreadId, nextLink, options) {\n        return tracingClient.withSpan(\"ChatApiClient.listChatParticipantsNext\", options !== null && options !== void 0 ? options : {}, async (options) => {\n            return this.client.sendOperationRequest({ chatThreadId, nextLink, options }, listChatParticipantsNextOperationSpec);\n        });\n    }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\nconst listChatReadReceiptsOperationSpec = {\n    path: \"/chat/threads/{chatThreadId}/readReceipts\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ChatMessageReadReceiptsCollection,\n        },\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    queryParameters: [\n        Parameters.maxPageSize,\n        Parameters.skip,\n        Parameters.apiVersion,\n    ],\n    urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n    headerParameters: [Parameters.accept],\n    serializer,\n};\nconst sendChatReadReceiptOperationSpec = {\n    path: \"/chat/threads/{chatThreadId}/readReceipts\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {},\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    requestBody: Parameters.sendReadReceiptRequest,\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n    headerParameters: [Parameters.accept, Parameters.contentType],\n    mediaType: \"json\",\n    serializer,\n};\nconst sendChatMessageOperationSpec = {\n    path: \"/chat/threads/{chatThreadId}/messages\",\n    httpMethod: \"POST\",\n    responses: {\n        201: {\n            bodyMapper: Mappers.SendChatMessageResult,\n        },\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    requestBody: Parameters.sendChatMessageRequest,\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n    headerParameters: [Parameters.accept, Parameters.contentType],\n    mediaType: \"json\",\n    serializer,\n};\nconst listChatMessagesOperationSpec = {\n    path: \"/chat/threads/{chatThreadId}/messages\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ChatMessagesCollection,\n        },\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    queryParameters: [\n        Parameters.maxPageSize,\n        Parameters.apiVersion,\n        Parameters.startTime,\n    ],\n    urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n    headerParameters: [Parameters.accept],\n    serializer,\n};\nconst getChatMessageOperationSpec = {\n    path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ChatMessage,\n        },\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [\n        Parameters.endpoint,\n        Parameters.chatThreadId,\n        Parameters.chatMessageId,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n};\nconst updateChatMessageOperationSpec = {\n    path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n    httpMethod: \"PATCH\",\n    responses: {\n        204: {},\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    requestBody: Parameters.updateChatMessageRequest,\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [\n        Parameters.endpoint,\n        Parameters.chatThreadId,\n        Parameters.chatMessageId,\n    ],\n    headerParameters: [Parameters.accept, Parameters.contentType1],\n    mediaType: \"json\",\n    serializer,\n};\nconst deleteChatMessageOperationSpec = {\n    path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        204: {},\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [\n        Parameters.endpoint,\n        Parameters.chatThreadId,\n        Parameters.chatMessageId,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n};\nconst listChatParticipantsOperationSpec = {\n    path: \"/chat/threads/{chatThreadId}/participants\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ChatParticipantsCollection,\n        },\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    queryParameters: [\n        Parameters.maxPageSize,\n        Parameters.skip,\n        Parameters.apiVersion,\n    ],\n    urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n    headerParameters: [Parameters.accept],\n    serializer,\n};\nconst removeChatParticipantOperationSpec = {\n    path: \"/chat/threads/{chatThreadId}/participants/:remove\",\n    httpMethod: \"POST\",\n    responses: {\n        204: {},\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    requestBody: Parameters.participantCommunicationIdentifier,\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n    headerParameters: [Parameters.accept, Parameters.contentType],\n    mediaType: \"json\",\n    serializer,\n};\nconst addChatParticipantsOperationSpec = {\n    path: \"/chat/threads/{chatThreadId}/participants/:add\",\n    httpMethod: \"POST\",\n    responses: {\n        201: {\n            bodyMapper: Mappers.AddChatParticipantsResult,\n        },\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    requestBody: Parameters.addChatParticipantsRequest,\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n    headerParameters: [Parameters.accept, Parameters.contentType],\n    mediaType: \"json\",\n    serializer,\n};\nconst updateChatThreadPropertiesOperationSpec = {\n    path: \"/chat/threads/{chatThreadId}\",\n    httpMethod: \"PATCH\",\n    responses: {\n        204: {},\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    requestBody: Parameters.updateChatThreadRequest,\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n    headerParameters: [Parameters.accept, Parameters.contentType1],\n    mediaType: \"json\",\n    serializer,\n};\nconst getChatThreadPropertiesOperationSpec = {\n    path: \"/chat/threads/{chatThreadId}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ChatThreadProperties,\n        },\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n    headerParameters: [Parameters.accept],\n    serializer,\n};\nconst sendTypingNotificationOperationSpec = {\n    path: \"/chat/threads/{chatThreadId}/typing\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {},\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    requestBody: Parameters.sendTypingNotificationRequest,\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n    headerParameters: [Parameters.accept, Parameters.contentType],\n    mediaType: \"json\",\n    serializer,\n};\nconst listChatReadReceiptsNextOperationSpec = {\n    path: \"{nextLink}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ChatMessageReadReceiptsCollection,\n        },\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    urlParameters: [\n        Parameters.endpoint,\n        Parameters.chatThreadId,\n        Parameters.nextLink,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n};\nconst listChatMessagesNextOperationSpec = {\n    path: \"{nextLink}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ChatMessagesCollection,\n        },\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    urlParameters: [\n        Parameters.endpoint,\n        Parameters.chatThreadId,\n        Parameters.nextLink,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n};\nconst listChatParticipantsNextOperationSpec = {\n    path: \"{nextLink}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ChatParticipantsCollection,\n        },\n        401: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        403: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        429: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n        503: {\n            bodyMapper: Mappers.CommunicationErrorResponse,\n            isError: true,\n        },\n    },\n    urlParameters: [\n        Parameters.endpoint,\n        Parameters.chatThreadId,\n        Parameters.nextLink,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}