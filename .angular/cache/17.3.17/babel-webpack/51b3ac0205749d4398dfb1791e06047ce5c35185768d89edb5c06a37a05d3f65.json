{"ast":null,"code":"import { sendAndHandleSdkError as e } from \"../../internal/communication.js\";\nimport { ensureInitialized as t } from \"../../internal/internalAPIs.js\";\nimport { getApiVersionTag as n } from \"../../internal/telemetry.js\";\nimport { callCallbackWithSdkErrorFromPromiseAndReturnPromise as r } from \"../../internal/utils.js\";\nimport { FrameContexts as o, errorNotSupportedOnPlatform as s } from \"../constants.js\";\nimport { ErrorCode as i } from \"../interfaces.js\";\nimport { runtime as m } from \"../runtime.js\";\nimport * as a from \"./history.js\";\nexport { a as history };\nconst c = {\n  shareWebContent: \"sharing.shareWebContent\"\n};\nfunction f(e, s) {\n  try {\n    !function (e) {\n      if (!(e && e.content && e.content.length)) {\n        throw {\n          errorCode: i.INVALID_ARGUMENTS,\n          message: \"Shared content is missing\"\n        };\n      }\n    }(e), function (e) {\n      let t;\n      if (e.content.some(e => !e.type)) throw t = {\n        errorCode: i.INVALID_ARGUMENTS,\n        message: \"Shared content type cannot be undefined\"\n      }, t;\n      if (e.content.some(t => t.type !== e.content[0].type)) throw t = {\n        errorCode: i.INVALID_ARGUMENTS,\n        message: \"Shared content must be of the same type\"\n      }, t;\n    }(e), function (e) {\n      let t;\n      if (\"URL\" !== e.content[0].type) throw t = {\n        errorCode: i.INVALID_ARGUMENTS,\n        message: \"Content type is unsupported\"\n      }, t;\n      if (e.content.some(e => !e.url)) throw t = {\n        errorCode: i.INVALID_ARGUMENTS,\n        message: \"URLs are required for URL content types\"\n      }, t;\n    }(e);\n  } catch (e) {\n    return r(() => Promise.reject(e), s);\n  }\n  t(m, o.content, o.sidePanel, o.task, o.stage, o.meetingStage);\n  const a = n(s ? \"v1\" : \"v2\", \"sharing.shareWebContent\");\n  return r(p, s, a, e);\n}\nfunction p(t, n) {\n  return new Promise(r => {\n    if (!h()) throw s;\n    r(e(t, c.shareWebContent, n));\n  });\n}\nfunction h() {\n  return !(!t(m) || !m.supports.sharing);\n}\nexport { c as SharingAPIMessages, h as isSupported, f as shareWebContent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}