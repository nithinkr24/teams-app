{"ast":null,"code":"import { sendMessageToParent as e } from \"../internal/communication.js\";\nimport { registerHandler as s } from \"../internal/handlers.js\";\nimport { ensureInitialized as t } from \"../internal/internalAPIs.js\";\nimport { getApiVersionTag as n } from \"../internal/telemetry.js\";\nimport { getGenericOnCompleteHandler as a } from \"../internal/utils.js\";\nimport { FrameContexts as i } from \"./constants.js\";\nimport { runtime as r } from \"./runtime.js\";\nconst o = \"v1\";\nclass p {\n  postMessage(s, i) {\n    t(r), e(n(o, \"appWindow.childAppWindow.postMessage\"), \"messageForChild\", [s], i || a());\n  }\n  addEventListener(e, a) {\n    t(r), \"message\" === e && s(n(o, \"appWindow.childAppWindow.addEventListener\"), \"messageForParent\", a);\n  }\n}\nclass m {\n  static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n  postMessage(s, p) {\n    t(r, i.task), e(n(o, \"appWindow.parentAppWindow.postMessage\"), \"messageForParent\", [s], p || a());\n  }\n  addEventListener(e, a) {\n    t(r, i.task), \"message\" === e && s(n(o, \"appWindow.parentAppWindow.addEventListener\"), \"messageForChild\", a);\n  }\n}\nexport { p as ChildAppWindow, m as ParentAppWindow };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}