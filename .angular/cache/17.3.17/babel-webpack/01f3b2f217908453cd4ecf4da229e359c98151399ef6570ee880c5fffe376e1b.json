{"ast":null,"code":"import { sendAndUnwrap as t, sendMessageToParent as n } from \"../internal/communication.js\";\nimport { errorCallNotStarted as r } from \"../internal/constants.js\";\nimport { createTeamsDeepLinkForCall as e } from \"../internal/deepLinkUtilities.js\";\nimport { ensureInitialized as i } from \"../internal/internalAPIs.js\";\nimport { getApiVersionTag as o } from \"../internal/telemetry.js\";\nimport { FrameContexts as a, errorNotSupportedOnPlatform as s } from \"./constants.js\";\nimport { runtime as l } from \"./runtime.js\";\nvar m;\nfunction c(c) {\n  const d = o(\"v2\", \"call.startCall\");\n  return new Promise(o => {\n    var f;\n    if (i(l, a.content, a.task), !u()) throw s;\n    if (!l.isLegacyTeams) return n(d, \"call.startCall\", [c], o);\n    o(t(d, \"executeDeepLink\", e(c.targets, null === (f = c.requestedModalities) || void 0 === f ? void 0 : f.includes(m.Video), c.source)).then(t => {\n      if (!t) throw new Error(r);\n      return t;\n    }));\n  });\n}\nfunction u() {\n  return !(!i(l) || !l.supports.call);\n}\n!function (t) {\n  t.Unknown = \"unknown\", t.Audio = \"audio\", t.Video = \"video\", t.VideoBasedScreenSharing = \"videoBasedScreenSharing\", t.Data = \"data\";\n}(m || (m = {}));\nexport { m as CallModalities, u as isSupported, c as startCall };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}