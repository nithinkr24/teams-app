{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport * as base64 from \"./base64.js\";\nimport { XML_ATTRKEY, XML_CHARKEY } from \"./interfaces.js\";\nimport { isDuration, isValidUuid } from \"./utils.js\";\nclass SerializerImpl {\n  constructor(modelMappers = {}, isXML = false) {\n    this.modelMappers = modelMappers;\n    this.isXML = isXML;\n  }\n  /**\n   * @deprecated Removing the constraints validation on client side.\n   */\n  validateConstraints(mapper, value, objectName) {\n    const failValidation = (constraintName, constraintValue) => {\n      throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n    };\n    if (mapper.constraints && value !== undefined && value !== null) {\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems\n      } = mapper.constraints;\n      if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      if (MaxItems !== undefined && value.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength !== undefined && value.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems !== undefined && value.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength !== undefined && value.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if (typeof value !== \"string\" || value.match(pattern) === null) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (UniqueItems && value.some((item, i, ar) => ar.indexOf(item) !== i)) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n  /**\n   * Serialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   *\n   * @param object - A valid Javascript object to be serialized\n   *\n   * @param objectName - Name of the serialized object\n   *\n   * @param options - additional options to serialization\n   *\n   * @returns A valid serialized Javascript object\n   */\n  serialize(mapper, object, objectName, options = {\n    xml: {}\n  }) {\n    var _a, _b, _c;\n    const updatedOptions = {\n      xml: {\n        rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n        includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n        xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n      }\n    };\n    let payload = {};\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName;\n    }\n    if (mapperType.match(/^Sequence$/i) !== null) {\n      payload = [];\n    }\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n    const {\n      required,\n      nullable\n    } = mapper;\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && (object === undefined || object === null)) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n    if (object === undefined || object === null) {\n      payload = object;\n    } else {\n      if (mapperType.match(/^any$/i) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/i) !== null) {\n        const enumMapper = mapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = serializeByteArrayType(objectName, object);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = serializeBase64UrlType(objectName, object);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n      } else if (mapperType.match(/^Composite$/i) !== null) {\n        payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n      }\n    }\n    return payload;\n  }\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   *\n   * @param responseBody - A valid Javascript entity to be deserialized\n   *\n   * @param objectName - Name of the deserialized object\n   *\n   * @param options - Controls behavior of XML parser and builder.\n   *\n   * @returns A valid deserialized Javascript object\n   */\n  deserialize(mapper, responseBody, objectName, options = {\n    xml: {}\n  }) {\n    var _a, _b, _c, _d;\n    const updatedOptions = {\n      xml: {\n        rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n        includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n        xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n      },\n      ignoreUnknownProperties: (_d = options.ignoreUnknownProperties) !== null && _d !== void 0 ? _d : false\n    };\n    if (responseBody === undefined || responseBody === null) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n    let payload;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName;\n    }\n    if (mapperType.match(/^Composite$/i) !== null) {\n      payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n    } else {\n      if (this.isXML) {\n        const xmlCharKey = updatedOptions.xml.xmlCharKey;\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n         * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n         */\n        if (responseBody[XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n          responseBody = responseBody[xmlCharKey];\n        }\n      }\n      if (mapperType.match(/^Number$/i) !== null) {\n        payload = parseFloat(responseBody);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/i) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n        payload = new Date(responseBody);\n      } else if (mapperType.match(/^UnixTime$/i) !== null) {\n        payload = unixTimeToDate(responseBody);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = base64.decodeString(responseBody);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = base64UrlToByteArray(responseBody);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n      }\n    }\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n    return payload;\n  }\n}\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nexport function createSerializer(modelMappers = {}, isXML = false) {\n  return new SerializerImpl(modelMappers, isXML);\n}\nfunction trimEnd(str, ch) {\n  let len = str.length;\n  while (len - 1 >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\nfunction bufferToBase64Url(buffer) {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64UrlToByteArray(str) {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\nfunction splitSerializeName(prop) {\n  const classes = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n  return classes;\n}\nfunction dateToUnixTime(d) {\n  if (!d) {\n    return undefined;\n  }\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d);\n  }\n  return Math.floor(d.getTime() / 1000);\n}\nfunction unixTimeToDate(n) {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\nfunction serializeBasicTypes(typeName, objectName, value) {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/i) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/i) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/i) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && isValidUuid(value))) {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n      }\n    } else if (typeName.match(/^Boolean$/i) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/i) !== null) {\n      const objectType = typeof value;\n      if (objectType !== \"string\" && typeof value.pipe !== \"function\" &&\n      // NodeJS.ReadableStream\n      typeof value.tee !== \"function\" &&\n      // browser ReadableStream\n      !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) &&\n      // File objects count as a type of Blob, so we want to use instanceof explicitly\n      !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob) && objectType !== \"function\") {\n        throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);\n      }\n    }\n  }\n  return value;\n}\nfunction serializeEnumType(objectName, allowedValues, value) {\n  if (!allowedValues) {\n    throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n  }\n  const isPresent = allowedValues.some(item => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n  }\n  return value;\n}\nfunction serializeByteArrayType(objectName, value) {\n  if (value !== undefined && value !== null) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = base64.encodeByteArray(value);\n  }\n  return value;\n}\nfunction serializeBase64UrlType(objectName, value) {\n  if (value !== undefined && value !== null) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = bufferToBase64Url(value);\n  }\n  return value;\n}\nfunction serializeDateTypes(typeName, value, objectName) {\n  if (value !== undefined && value !== null) {\n    if (typeName.match(/^Date$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` + `for it to be serialized in UnixTime/Epoch format.`);\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/i) !== null) {\n      if (!isDuration(value)) {\n        throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n      }\n    }\n  }\n  return value;\n}\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n  var _a;\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  let elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  // Quirk: Composite mappers referenced by `element` might\n  // not have *all* properties declared (like uberParent),\n  // so let's try to look up the full definition by name.\n  if (elementType.type.name === \"Composite\" && elementType.type.className) {\n    elementType = (_a = serializer.modelMappers[elementType.type.className]) !== null && _a !== void 0 ? _a : elementType;\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n    if (isXml && elementType.xmlNamespace) {\n      const xmlnsKey = elementType.xmlNamespacePrefix ? `xmlns:${elementType.xmlNamespacePrefix}` : \"xmlns\";\n      if (elementType.type.name === \"Composite\") {\n        tempArray[i] = Object.assign({}, serializedValue);\n        tempArray[i][XML_ATTRKEY] = {\n          [xmlnsKey]: elementType.xmlNamespace\n        };\n      } else {\n        tempArray[i] = {};\n        tempArray[i][options.xml.xmlCharKey] = serializedValue;\n        tempArray[i][XML_ATTRKEY] = {\n          [xmlnsKey]: elementType.xmlNamespace\n        };\n      }\n    } else {\n      tempArray[i] = serializedValue;\n    }\n  }\n  return tempArray;\n}\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  const tempDictionary = {};\n  for (const key of Object.keys(object)) {\n    const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n    // If the element needs an XML namespace we need to add it within the $ property\n    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n  }\n  // Add the namespace to the root element if needed\n  if (isXml && mapper.xmlNamespace) {\n    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n    const result = tempDictionary;\n    result[XML_ATTRKEY] = {\n      [xmlnsKey]: mapper.xmlNamespace\n    };\n    return result;\n  }\n  return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(serializer, mapper, objectName) {\n  const additionalProperties = mapper.type.additionalProperties;\n  if (!additionalProperties && mapper.type.className) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n  }\n  return additionalProperties;\n}\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(serializer, mapper, objectName) {\n  const className = mapper.type.className;\n  if (!className) {\n    throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n  }\n  return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer, mapper, objectName) {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n    }\n    modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(`modelProperties cannot be null or undefined in the ` + `mapper \"${JSON.stringify(modelMapper)}\" of type \"${mapper.type.className}\" for object \"${objectName}\".`);\n    }\n  }\n  return modelProps;\n}\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n  if (object !== undefined && object !== null) {\n    const payload = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n      let propName;\n      let parentObject = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName);\n        propName = paths.pop();\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if ((childObject === undefined || childObject === null) && (object[key] !== undefined && object[key] !== null || propertyMapper.defaultValue !== undefined)) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n      if (parentObject !== undefined && parentObject !== null) {\n        if (isXml && mapper.xmlNamespace) {\n          const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n          parentObject[XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[XML_ATTRKEY]), {\n            [xmlnsKey]: mapper.xmlNamespace\n          });\n        }\n        const propertyObjectName = propertyMapper.serializedName !== \"\" ? objectName + \".\" + propertyMapper.serializedName : objectName;\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && (toSerialize === undefined || toSerialize === null)) {\n          toSerialize = mapper.serializedName;\n        }\n        const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n        if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n          if (isXml && propertyMapper.xmlIsAttribute) {\n            // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n            parentObject[XML_ATTRKEY][propName] = serializedValue;\n          } else if (isXml && propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = {\n              [propertyMapper.xmlElementName]: value\n            };\n          } else {\n            parentObject[propName] = value;\n          }\n        }\n      }\n    }\n    const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every(pn => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n        }\n      }\n    }\n    return payload;\n  }\n  return object;\n}\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n  if (!isXml || !propertyMapper.xmlNamespace) {\n    return serializedValue;\n  }\n  const xmlnsKey = propertyMapper.xmlNamespacePrefix ? `xmlns:${propertyMapper.xmlNamespacePrefix}` : \"xmlns\";\n  const xmlNamespace = {\n    [xmlnsKey]: propertyMapper.xmlNamespace\n  };\n  if ([\"Composite\"].includes(propertyMapper.type.name)) {\n    if (serializedValue[XML_ATTRKEY]) {\n      return serializedValue;\n    } else {\n      const result = Object.assign({}, serializedValue);\n      result[XML_ATTRKEY] = xmlNamespace;\n      return result;\n    }\n  }\n  const result = {};\n  result[options.xml.xmlCharKey] = serializedValue;\n  result[XML_ATTRKEY] = xmlNamespace;\n  return result;\n}\nfunction isSpecialXmlProperty(propertyName, options) {\n  return [XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n  var _a, _b;\n  const xmlCharKey = (_a = options.xml.xmlCharKey) !== null && _a !== void 0 ? _a : XML_CHARKEY;\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance = {};\n  const handledPropertyNames = [];\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName);\n    handledPropertyNames.push(paths[0]);\n    const {\n      serializedName,\n      xmlName,\n      xmlElementName\n    } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n    const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n        }\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n        instance[key] = serializer.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options);\n      } else if (propertyMapper.xmlIsMsText) {\n        if (responseBody[xmlCharKey] !== undefined) {\n          instance[key] = responseBody[xmlCharKey];\n        } else if (typeof responseBody === \"string\") {\n          // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n          //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n          instance[key] = responseBody;\n        }\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        if (propertyMapper.xmlIsWrapped) {\n          /* a list of <xmlElementName> wrapped by <xmlName>\n            For the xml example below\n              <Cors>\n                <CorsRule>...</CorsRule>\n                <CorsRule>...</CorsRule>\n              </Cors>\n            the responseBody has\n              {\n                Cors: {\n                  CorsRule: [{...}, {...}]\n                }\n              }\n            xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n          */\n          const wrapped = responseBody[xmlName];\n          const elementList = (_b = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b !== void 0 ? _b : [];\n          instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n          handledPropertyNames.push(xmlName);\n        } else {\n          const property = responseBody[propertyName];\n          instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n          handledPropertyNames.push(propertyName);\n        }\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      let steps = 0;\n      for (const item of paths) {\n        if (!res) break;\n        steps++;\n        res = res[item];\n      }\n      // only accept null when reaching the last position of object otherwise it would be undefined\n      if (res === null && steps < paths.length) {\n        res = undefined;\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && (propertyInstance === undefined || propertyInstance === null)) {\n        propertyInstance = mapper.serializedName;\n      }\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n        // Copy over any properties that have already been added into the instance, where they do\n        // not exist on the newly de-serialized array\n        for (const [k, v] of Object.entries(instance)) {\n          if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n            arrayInstance[k] = v;\n          }\n        }\n        instance = arrayInstance;\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n        instance[key] = serializedValue;\n      }\n    }\n  }\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = responsePropName => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n      }\n    }\n  } else if (responseBody && !options.ignoreUnknownProperties) {\n    for (const key of Object.keys(responseBody)) {\n      if (instance[key] === undefined && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key, options)) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n  return instance;\n}\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n  /* jshint validthis: true */\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    const tempDictionary = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n  var _a;\n  let element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (element.type.name === \"Composite\" && element.type.className) {\n      element = (_a = serializer.modelMappers[element.type.className]) !== null && _a !== void 0 ? _a : element;\n    }\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\nfunction getIndexDiscriminator(discriminators, discriminatorValue, typeName) {\n  const typeNamesToCheck = [typeName];\n  while (typeNamesToCheck.length) {\n    const currentName = typeNamesToCheck.shift();\n    const indexDiscriminator = discriminatorValue === currentName ? discriminatorValue : currentName + \".\" + discriminatorValue;\n    if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {\n      return discriminators[indexDiscriminator];\n    } else {\n      for (const [name, mapper] of Object.entries(discriminators)) {\n        if (name.startsWith(currentName + \".\") && mapper.type.uberParent === currentName && mapper.type.className) {\n          typeNamesToCheck.push(mapper.type.className);\n        }\n      }\n    }\n  }\n  return undefined;\n}\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n  var _a;\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n  if (polymorphicDiscriminator) {\n    let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName) {\n      // The serializedName might have \\\\, which we just want to ignore\n      if (polymorphicPropertyName === \"serializedName\") {\n        discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n      }\n      const discriminatorValue = object[discriminatorName];\n      const typeName = (_a = mapper.type.uberParent) !== null && _a !== void 0 ? _a : mapper.type.className;\n      if (typeof discriminatorValue === \"string\" && typeName) {\n        const polymorphicMapper = getIndexDiscriminator(serializer.modelMappers.discriminators, discriminatorValue, typeName);\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n  return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);\n}\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n  return typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator;\n}\n/**\n * Known types of Mappers\n */\nexport const MapperTypeNames = {\n  Base64Url: \"Base64Url\",\n  Boolean: \"Boolean\",\n  ByteArray: \"ByteArray\",\n  Composite: \"Composite\",\n  Date: \"Date\",\n  DateTime: \"DateTime\",\n  DateTimeRfc1123: \"DateTimeRfc1123\",\n  Dictionary: \"Dictionary\",\n  Enum: \"Enum\",\n  Number: \"Number\",\n  Object: \"Object\",\n  Sequence: \"Sequence\",\n  String: \"String\",\n  Stream: \"Stream\",\n  TimeSpan: \"TimeSpan\",\n  UnixTime: \"UnixTime\"\n};","map":{"version":3,"names":["base64","XML_ATTRKEY","XML_CHARKEY","isDuration","isValidUuid","SerializerImpl","constructor","modelMappers","isXML","validateConstraints","mapper","value","objectName","failValidation","constraintName","constraintValue","Error","constraints","undefined","ExclusiveMaximum","ExclusiveMinimum","InclusiveMaximum","InclusiveMinimum","MaxItems","MaxLength","MinItems","MinLength","MultipleOf","Pattern","UniqueItems","length","pattern","RegExp","match","some","item","i","ar","indexOf","serialize","object","options","xml","_a","_b","_c","updatedOptions","rootName","includeRoot","xmlCharKey","payload","mapperType","type","name","serializedName","isConstant","defaultValue","required","nullable","serializeBasicTypes","enumMapper","serializeEnumType","allowedValues","serializeDateTypes","serializeByteArrayType","serializeBase64UrlType","serializeSequenceType","Boolean","serializeDictionaryType","serializeCompositeType","deserialize","responseBody","_d","ignoreUnknownProperties","xmlIsWrapped","deserializeCompositeType","parseFloat","isNaN","Date","unixTimeToDate","decodeString","base64UrlToByteArray","deserializeSequenceType","deserializeDictionaryType","createSerializer","trimEnd","str","ch","len","substr","bufferToBase64Url","buffer","Uint8Array","encodeByteArray","replace","valueOf","splitSerializeName","prop","classes","partialclass","subwords","split","charAt","push","dateToUnixTime","d","Math","floor","getTime","n","typeName","objectType","pipe","tee","ArrayBuffer","isView","Blob","isPresent","toLowerCase","JSON","stringify","parse","toISOString","substring","toUTCString","serializer","isXml","Array","isArray","elementType","element","className","tempArray","serializedValue","xmlNamespace","xmlnsKey","xmlNamespacePrefix","Object","assign","valueType","tempDictionary","key","keys","getXmlObjectValue","result","resolveAdditionalProperties","additionalProperties","modelMapper","resolveReferencedMapper","resolveModelProperties","modelProps","modelProperties","getPolymorphicDiscriminatorRecursively","getPolymorphicMapper","propertyMapper","readOnly","propName","parentObject","xmlName","xmlElementName","paths","pop","pathName","childObject","propertyObjectName","toSerialize","polymorphicDiscriminator","clientName","xmlIsAttribute","additionalPropertiesMapper","propNames","clientPropName","isAdditionalProperty","every","pn","includes","isSpecialXmlProperty","propertyName","instance","handledPropertyNames","headerCollectionPrefix","dictionary","headerKey","startsWith","xmlIsMsText","wrapped","elementList","property","propertyInstance","res","steps","arrayInstance","k","v","entries","prototype","hasOwnProperty","call","responsePropName","getIndexDiscriminator","discriminators","discriminatorValue","typeNamesToCheck","currentName","shift","indexDiscriminator","uberParent","polymorphicPropertyName","discriminatorName","polymorphicMapper","getPolymorphicDiscriminatorSafely","MapperTypeNames","Base64Url","ByteArray","Composite","DateTime","DateTimeRfc1123","Dictionary","Enum","Number","Sequence","String","Stream","TimeSpan","UnixTime"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-client/dist/browser/serializer.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport * as base64 from \"./base64.js\";\nimport { XML_ATTRKEY, XML_CHARKEY } from \"./interfaces.js\";\nimport { isDuration, isValidUuid } from \"./utils.js\";\nclass SerializerImpl {\n    constructor(modelMappers = {}, isXML = false) {\n        this.modelMappers = modelMappers;\n        this.isXML = isXML;\n    }\n    /**\n     * @deprecated Removing the constraints validation on client side.\n     */\n    validateConstraints(mapper, value, objectName) {\n        const failValidation = (constraintName, constraintValue) => {\n            throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n        };\n        if (mapper.constraints && value !== undefined && value !== null) {\n            const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems, } = mapper.constraints;\n            if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n                failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n            }\n            if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n                failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n            }\n            if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n                failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n            }\n            if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n                failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n            }\n            if (MaxItems !== undefined && value.length > MaxItems) {\n                failValidation(\"MaxItems\", MaxItems);\n            }\n            if (MaxLength !== undefined && value.length > MaxLength) {\n                failValidation(\"MaxLength\", MaxLength);\n            }\n            if (MinItems !== undefined && value.length < MinItems) {\n                failValidation(\"MinItems\", MinItems);\n            }\n            if (MinLength !== undefined && value.length < MinLength) {\n                failValidation(\"MinLength\", MinLength);\n            }\n            if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n                failValidation(\"MultipleOf\", MultipleOf);\n            }\n            if (Pattern) {\n                const pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n                if (typeof value !== \"string\" || value.match(pattern) === null) {\n                    failValidation(\"Pattern\", Pattern);\n                }\n            }\n            if (UniqueItems &&\n                value.some((item, i, ar) => ar.indexOf(item) !== i)) {\n                failValidation(\"UniqueItems\", UniqueItems);\n            }\n        }\n    }\n    /**\n     * Serialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param object - A valid Javascript object to be serialized\n     *\n     * @param objectName - Name of the serialized object\n     *\n     * @param options - additional options to serialization\n     *\n     * @returns A valid serialized Javascript object\n     */\n    serialize(mapper, object, objectName, options = { xml: {} }) {\n        var _a, _b, _c;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY,\n            },\n        };\n        let payload = {};\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Sequence$/i) !== null) {\n            payload = [];\n        }\n        if (mapper.isConstant) {\n            object = mapper.defaultValue;\n        }\n        // This table of allowed values should help explain\n        // the mapper.required and mapper.nullable properties.\n        // X means \"neither undefined or null are allowed\".\n        //           || required\n        //           || true      | false\n        //  nullable || ==========================\n        //      true || null      | undefined/null\n        //     false || X         | undefined\n        // undefined || X         | undefined/null\n        const { required, nullable } = mapper;\n        if (required && nullable && object === undefined) {\n            throw new Error(`${objectName} cannot be undefined.`);\n        }\n        if (required && !nullable && (object === undefined || object === null)) {\n            throw new Error(`${objectName} cannot be null or undefined.`);\n        }\n        if (!required && nullable === false && object === null) {\n            throw new Error(`${objectName} cannot be null.`);\n        }\n        if (object === undefined || object === null) {\n            payload = object;\n        }\n        else {\n            if (mapperType.match(/^any$/i) !== null) {\n                payload = object;\n            }\n            else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n                payload = serializeBasicTypes(mapperType, objectName, object);\n            }\n            else if (mapperType.match(/^Enum$/i) !== null) {\n                const enumMapper = mapper;\n                payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n            }\n            else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n                payload = serializeDateTypes(mapperType, object, objectName);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = serializeByteArrayType(objectName, object);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = serializeBase64UrlType(objectName, object);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Composite$/i) !== null) {\n                payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n        }\n        return payload;\n    }\n    /**\n     * Deserialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param responseBody - A valid Javascript entity to be deserialized\n     *\n     * @param objectName - Name of the deserialized object\n     *\n     * @param options - Controls behavior of XML parser and builder.\n     *\n     * @returns A valid deserialized Javascript object\n     */\n    deserialize(mapper, responseBody, objectName, options = { xml: {} }) {\n        var _a, _b, _c, _d;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY,\n            },\n            ignoreUnknownProperties: (_d = options.ignoreUnknownProperties) !== null && _d !== void 0 ? _d : false,\n        };\n        if (responseBody === undefined || responseBody === null) {\n            if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n                // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n                // between the list being empty versus being missing,\n                // so let's do the more user-friendly thing and return an empty list.\n                responseBody = [];\n            }\n            // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n            if (mapper.defaultValue !== undefined) {\n                responseBody = mapper.defaultValue;\n            }\n            return responseBody;\n        }\n        let payload;\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Composite$/i) !== null) {\n            payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n        }\n        else {\n            if (this.isXML) {\n                const xmlCharKey = updatedOptions.xml.xmlCharKey;\n                /**\n                 * If the mapper specifies this as a non-composite type value but the responseBody contains\n                 * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n                 * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n                 */\n                if (responseBody[XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n                    responseBody = responseBody[xmlCharKey];\n                }\n            }\n            if (mapperType.match(/^Number$/i) !== null) {\n                payload = parseFloat(responseBody);\n                if (isNaN(payload)) {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^Boolean$/i) !== null) {\n                if (responseBody === \"true\") {\n                    payload = true;\n                }\n                else if (responseBody === \"false\") {\n                    payload = false;\n                }\n                else {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n                payload = responseBody;\n            }\n            else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n                payload = new Date(responseBody);\n            }\n            else if (mapperType.match(/^UnixTime$/i) !== null) {\n                payload = unixTimeToDate(responseBody);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = base64.decodeString(responseBody);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = base64UrlToByteArray(responseBody);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n        }\n        if (mapper.isConstant) {\n            payload = mapper.defaultValue;\n        }\n        return payload;\n    }\n}\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nexport function createSerializer(modelMappers = {}, isXML = false) {\n    return new SerializerImpl(modelMappers, isXML);\n}\nfunction trimEnd(str, ch) {\n    let len = str.length;\n    while (len - 1 >= 0 && str[len - 1] === ch) {\n        --len;\n    }\n    return str.substr(0, len);\n}\nfunction bufferToBase64Url(buffer) {\n    if (!buffer) {\n        return undefined;\n    }\n    if (!(buffer instanceof Uint8Array)) {\n        throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n    }\n    // Uint8Array to Base64.\n    const str = base64.encodeByteArray(buffer);\n    // Base64 to Base64Url.\n    return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64UrlToByteArray(str) {\n    if (!str) {\n        return undefined;\n    }\n    if (str && typeof str.valueOf() !== \"string\") {\n        throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n    }\n    // Base64Url to Base64.\n    str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    // Base64 to Uint8Array.\n    return base64.decodeString(str);\n}\nfunction splitSerializeName(prop) {\n    const classes = [];\n    let partialclass = \"\";\n    if (prop) {\n        const subwords = prop.split(\".\");\n        for (const item of subwords) {\n            if (item.charAt(item.length - 1) === \"\\\\\") {\n                partialclass += item.substr(0, item.length - 1) + \".\";\n            }\n            else {\n                partialclass += item;\n                classes.push(partialclass);\n                partialclass = \"\";\n            }\n        }\n    }\n    return classes;\n}\nfunction dateToUnixTime(d) {\n    if (!d) {\n        return undefined;\n    }\n    if (typeof d.valueOf() === \"string\") {\n        d = new Date(d);\n    }\n    return Math.floor(d.getTime() / 1000);\n}\nfunction unixTimeToDate(n) {\n    if (!n) {\n        return undefined;\n    }\n    return new Date(n * 1000);\n}\nfunction serializeBasicTypes(typeName, objectName, value) {\n    if (value !== null && value !== undefined) {\n        if (typeName.match(/^Number$/i) !== null) {\n            if (typeof value !== \"number\") {\n                throw new Error(`${objectName} with value ${value} must be of type number.`);\n            }\n        }\n        else if (typeName.match(/^String$/i) !== null) {\n            if (typeof value.valueOf() !== \"string\") {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n            }\n        }\n        else if (typeName.match(/^Uuid$/i) !== null) {\n            if (!(typeof value.valueOf() === \"string\" && isValidUuid(value))) {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n            }\n        }\n        else if (typeName.match(/^Boolean$/i) !== null) {\n            if (typeof value !== \"boolean\") {\n                throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n            }\n        }\n        else if (typeName.match(/^Stream$/i) !== null) {\n            const objectType = typeof value;\n            if (objectType !== \"string\" &&\n                typeof value.pipe !== \"function\" && // NodeJS.ReadableStream\n                typeof value.tee !== \"function\" && // browser ReadableStream\n                !(value instanceof ArrayBuffer) &&\n                !ArrayBuffer.isView(value) &&\n                // File objects count as a type of Blob, so we want to use instanceof explicitly\n                !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob) &&\n                objectType !== \"function\") {\n                throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeEnumType(objectName, allowedValues, value) {\n    if (!allowedValues) {\n        throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n    }\n    const isPresent = allowedValues.some((item) => {\n        if (typeof item.valueOf() === \"string\") {\n            return item.toLowerCase() === value.toLowerCase();\n        }\n        return item === value;\n    });\n    if (!isPresent) {\n        throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n    }\n    return value;\n}\nfunction serializeByteArrayType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = base64.encodeByteArray(value);\n    }\n    return value;\n}\nfunction serializeBase64UrlType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = bufferToBase64Url(value);\n    }\n    return value;\n}\nfunction serializeDateTypes(typeName, value, objectName) {\n    if (value !== undefined && value !== null) {\n        if (typeName.match(/^Date$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value =\n                value instanceof Date\n                    ? value.toISOString().substring(0, 10)\n                    : new Date(value).toISOString().substring(0, 10);\n        }\n        else if (typeName.match(/^DateTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n        }\n        else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n            }\n            value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n        }\n        else if (typeName.match(/^UnixTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n                    `for it to be serialized in UnixTime/Epoch format.`);\n            }\n            value = dateToUnixTime(value);\n        }\n        else if (typeName.match(/^TimeSpan$/i) !== null) {\n            if (!isDuration(value)) {\n                throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n    var _a;\n    if (!Array.isArray(object)) {\n        throw new Error(`${objectName} must be of type Array.`);\n    }\n    let elementType = mapper.type.element;\n    if (!elementType || typeof elementType !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (elementType.type.name === \"Composite\" && elementType.type.className) {\n        elementType = (_a = serializer.modelMappers[elementType.type.className]) !== null && _a !== void 0 ? _a : elementType;\n    }\n    const tempArray = [];\n    for (let i = 0; i < object.length; i++) {\n        const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n        if (isXml && elementType.xmlNamespace) {\n            const xmlnsKey = elementType.xmlNamespacePrefix\n                ? `xmlns:${elementType.xmlNamespacePrefix}`\n                : \"xmlns\";\n            if (elementType.type.name === \"Composite\") {\n                tempArray[i] = Object.assign({}, serializedValue);\n                tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n            else {\n                tempArray[i] = {};\n                tempArray[i][options.xml.xmlCharKey] = serializedValue;\n                tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n        }\n        else {\n            tempArray[i] = serializedValue;\n        }\n    }\n    return tempArray;\n}\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n    if (typeof object !== \"object\") {\n        throw new Error(`${objectName} must be of type object.`);\n    }\n    const valueType = mapper.type.value;\n    if (!valueType || typeof valueType !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    const tempDictionary = {};\n    for (const key of Object.keys(object)) {\n        const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n        // If the element needs an XML namespace we need to add it within the $ property\n        tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n    }\n    // Add the namespace to the root element if needed\n    if (isXml && mapper.xmlNamespace) {\n        const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n        const result = tempDictionary;\n        result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n        return result;\n    }\n    return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(serializer, mapper, objectName) {\n    const additionalProperties = mapper.type.additionalProperties;\n    if (!additionalProperties && mapper.type.className) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n    }\n    return additionalProperties;\n}\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(serializer, mapper, objectName) {\n    const className = mapper.type.className;\n    if (!className) {\n        throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n    return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer, mapper, objectName) {\n    let modelProps = mapper.type.modelProperties;\n    if (!modelProps) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        if (!modelMapper) {\n            throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n        }\n        modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n        if (!modelProps) {\n            throw new Error(`modelProperties cannot be null or undefined in the ` +\n                `mapper \"${JSON.stringify(modelMapper)}\" of type \"${mapper.type.className}\" for object \"${objectName}\".`);\n        }\n    }\n    return modelProps;\n}\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n    }\n    if (object !== undefined && object !== null) {\n        const payload = {};\n        const modelProps = resolveModelProperties(serializer, mapper, objectName);\n        for (const key of Object.keys(modelProps)) {\n            const propertyMapper = modelProps[key];\n            if (propertyMapper.readOnly) {\n                continue;\n            }\n            let propName;\n            let parentObject = payload;\n            if (serializer.isXML) {\n                if (propertyMapper.xmlIsWrapped) {\n                    propName = propertyMapper.xmlName;\n                }\n                else {\n                    propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n                }\n            }\n            else {\n                const paths = splitSerializeName(propertyMapper.serializedName);\n                propName = paths.pop();\n                for (const pathName of paths) {\n                    const childObject = parentObject[pathName];\n                    if ((childObject === undefined || childObject === null) &&\n                        ((object[key] !== undefined && object[key] !== null) ||\n                            propertyMapper.defaultValue !== undefined)) {\n                        parentObject[pathName] = {};\n                    }\n                    parentObject = parentObject[pathName];\n                }\n            }\n            if (parentObject !== undefined && parentObject !== null) {\n                if (isXml && mapper.xmlNamespace) {\n                    const xmlnsKey = mapper.xmlNamespacePrefix\n                        ? `xmlns:${mapper.xmlNamespacePrefix}`\n                        : \"xmlns\";\n                    parentObject[XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[XML_ATTRKEY]), { [xmlnsKey]: mapper.xmlNamespace });\n                }\n                const propertyObjectName = propertyMapper.serializedName !== \"\"\n                    ? objectName + \".\" + propertyMapper.serializedName\n                    : objectName;\n                let toSerialize = object[key];\n                const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n                if (polymorphicDiscriminator &&\n                    polymorphicDiscriminator.clientName === key &&\n                    (toSerialize === undefined || toSerialize === null)) {\n                    toSerialize = mapper.serializedName;\n                }\n                const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n                if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n                    const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n                    if (isXml && propertyMapper.xmlIsAttribute) {\n                        // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n                        // This keeps things simple while preventing name collision\n                        // with names in user documents.\n                        parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n                        parentObject[XML_ATTRKEY][propName] = serializedValue;\n                    }\n                    else if (isXml && propertyMapper.xmlIsWrapped) {\n                        parentObject[propName] = { [propertyMapper.xmlElementName]: value };\n                    }\n                    else {\n                        parentObject[propName] = value;\n                    }\n                }\n            }\n        }\n        const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n        if (additionalPropertiesMapper) {\n            const propNames = Object.keys(modelProps);\n            for (const clientPropName in object) {\n                const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n                if (isAdditionalProperty) {\n                    payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n                }\n            }\n        }\n        return payload;\n    }\n    return object;\n}\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n    if (!isXml || !propertyMapper.xmlNamespace) {\n        return serializedValue;\n    }\n    const xmlnsKey = propertyMapper.xmlNamespacePrefix\n        ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n        : \"xmlns\";\n    const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n    if ([\"Composite\"].includes(propertyMapper.type.name)) {\n        if (serializedValue[XML_ATTRKEY]) {\n            return serializedValue;\n        }\n        else {\n            const result = Object.assign({}, serializedValue);\n            result[XML_ATTRKEY] = xmlNamespace;\n            return result;\n        }\n    }\n    const result = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[XML_ATTRKEY] = xmlNamespace;\n    return result;\n}\nfunction isSpecialXmlProperty(propertyName, options) {\n    return [XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n    var _a, _b;\n    const xmlCharKey = (_a = options.xml.xmlCharKey) !== null && _a !== void 0 ? _a : XML_CHARKEY;\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n    }\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    let instance = {};\n    const handledPropertyNames = [];\n    for (const key of Object.keys(modelProps)) {\n        const propertyMapper = modelProps[key];\n        const paths = splitSerializeName(modelProps[key].serializedName);\n        handledPropertyNames.push(paths[0]);\n        const { serializedName, xmlName, xmlElementName } = propertyMapper;\n        let propertyObjectName = objectName;\n        if (serializedName !== \"\" && serializedName !== undefined) {\n            propertyObjectName = objectName + \".\" + serializedName;\n        }\n        const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n            const dictionary = {};\n            for (const headerKey of Object.keys(responseBody)) {\n                if (headerKey.startsWith(headerCollectionPrefix)) {\n                    dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n                }\n                handledPropertyNames.push(headerKey);\n            }\n            instance[key] = dictionary;\n        }\n        else if (serializer.isXML) {\n            if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n                instance[key] = serializer.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options);\n            }\n            else if (propertyMapper.xmlIsMsText) {\n                if (responseBody[xmlCharKey] !== undefined) {\n                    instance[key] = responseBody[xmlCharKey];\n                }\n                else if (typeof responseBody === \"string\") {\n                    // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n                    //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n                    instance[key] = responseBody;\n                }\n            }\n            else {\n                const propertyName = xmlElementName || xmlName || serializedName;\n                if (propertyMapper.xmlIsWrapped) {\n                    /* a list of <xmlElementName> wrapped by <xmlName>\n                      For the xml example below\n                        <Cors>\n                          <CorsRule>...</CorsRule>\n                          <CorsRule>...</CorsRule>\n                        </Cors>\n                      the responseBody has\n                        {\n                          Cors: {\n                            CorsRule: [{...}, {...}]\n                          }\n                        }\n                      xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n                    */\n                    const wrapped = responseBody[xmlName];\n                    const elementList = (_b = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b !== void 0 ? _b : [];\n                    instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n                    handledPropertyNames.push(xmlName);\n                }\n                else {\n                    const property = responseBody[propertyName];\n                    instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n                    handledPropertyNames.push(propertyName);\n                }\n            }\n        }\n        else {\n            // deserialize the property if it is present in the provided responseBody instance\n            let propertyInstance;\n            let res = responseBody;\n            // traversing the object step by step.\n            let steps = 0;\n            for (const item of paths) {\n                if (!res)\n                    break;\n                steps++;\n                res = res[item];\n            }\n            // only accept null when reaching the last position of object otherwise it would be undefined\n            if (res === null && steps < paths.length) {\n                res = undefined;\n            }\n            propertyInstance = res;\n            const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n            // checking that the model property name (key)(ex: \"fishtype\") and the\n            // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n            // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n            // is a better approach. The generator is not consistent with escaping '\\.' in the\n            // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n            // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n            // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n            // the transformation of model property name (ex: \"fishtype\") is done consistently.\n            // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n            if (polymorphicDiscriminator &&\n                key === polymorphicDiscriminator.clientName &&\n                (propertyInstance === undefined || propertyInstance === null)) {\n                propertyInstance = mapper.serializedName;\n            }\n            let serializedValue;\n            // paging\n            if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n                propertyInstance = responseBody[key];\n                const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                // Copy over any properties that have already been added into the instance, where they do\n                // not exist on the newly de-serialized array\n                for (const [k, v] of Object.entries(instance)) {\n                    if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n                        arrayInstance[k] = v;\n                    }\n                }\n                instance = arrayInstance;\n            }\n            else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n                serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                instance[key] = serializedValue;\n            }\n        }\n    }\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n        const isAdditionalProperty = (responsePropName) => {\n            for (const clientPropName in modelProps) {\n                const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n                if (paths[0] === responsePropName) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        for (const responsePropName in responseBody) {\n            if (isAdditionalProperty(responsePropName)) {\n                instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n            }\n        }\n    }\n    else if (responseBody && !options.ignoreUnknownProperties) {\n        for (const key of Object.keys(responseBody)) {\n            if (instance[key] === undefined &&\n                !handledPropertyNames.includes(key) &&\n                !isSpecialXmlProperty(key, options)) {\n                instance[key] = responseBody[key];\n            }\n        }\n    }\n    return instance;\n}\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n    /* jshint validthis: true */\n    const value = mapper.type.value;\n    if (!value || typeof value !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        const tempDictionary = {};\n        for (const key of Object.keys(responseBody)) {\n            tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n        }\n        return tempDictionary;\n    }\n    return responseBody;\n}\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n    var _a;\n    let element = mapper.type.element;\n    if (!element || typeof element !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        if (!Array.isArray(responseBody)) {\n            // xml2js will interpret a single element array as just the element, so force it to be an array\n            responseBody = [responseBody];\n        }\n        // Quirk: Composite mappers referenced by `element` might\n        // not have *all* properties declared (like uberParent),\n        // so let's try to look up the full definition by name.\n        if (element.type.name === \"Composite\" && element.type.className) {\n            element = (_a = serializer.modelMappers[element.type.className]) !== null && _a !== void 0 ? _a : element;\n        }\n        const tempArray = [];\n        for (let i = 0; i < responseBody.length; i++) {\n            tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);\n        }\n        return tempArray;\n    }\n    return responseBody;\n}\nfunction getIndexDiscriminator(discriminators, discriminatorValue, typeName) {\n    const typeNamesToCheck = [typeName];\n    while (typeNamesToCheck.length) {\n        const currentName = typeNamesToCheck.shift();\n        const indexDiscriminator = discriminatorValue === currentName\n            ? discriminatorValue\n            : currentName + \".\" + discriminatorValue;\n        if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {\n            return discriminators[indexDiscriminator];\n        }\n        else {\n            for (const [name, mapper] of Object.entries(discriminators)) {\n                if (name.startsWith(currentName + \".\") &&\n                    mapper.type.uberParent === currentName &&\n                    mapper.type.className) {\n                    typeNamesToCheck.push(mapper.type.className);\n                }\n            }\n        }\n    }\n    return undefined;\n}\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n    var _a;\n    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n    if (polymorphicDiscriminator) {\n        let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n        if (discriminatorName) {\n            // The serializedName might have \\\\, which we just want to ignore\n            if (polymorphicPropertyName === \"serializedName\") {\n                discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n            }\n            const discriminatorValue = object[discriminatorName];\n            const typeName = (_a = mapper.type.uberParent) !== null && _a !== void 0 ? _a : mapper.type.className;\n            if (typeof discriminatorValue === \"string\" && typeName) {\n                const polymorphicMapper = getIndexDiscriminator(serializer.modelMappers.discriminators, discriminatorValue, typeName);\n                if (polymorphicMapper) {\n                    mapper = polymorphicMapper;\n                }\n            }\n        }\n    }\n    return mapper;\n}\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n    return (mapper.type.polymorphicDiscriminator ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.className));\n}\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n    return (typeName &&\n        serializer.modelMappers[typeName] &&\n        serializer.modelMappers[typeName].type.polymorphicDiscriminator);\n}\n/**\n * Known types of Mappers\n */\nexport const MapperTypeNames = {\n    Base64Url: \"Base64Url\",\n    Boolean: \"Boolean\",\n    ByteArray: \"ByteArray\",\n    Composite: \"Composite\",\n    Date: \"Date\",\n    DateTime: \"DateTime\",\n    DateTimeRfc1123: \"DateTimeRfc1123\",\n    Dictionary: \"Dictionary\",\n    Enum: \"Enum\",\n    Number: \"Number\",\n    Object: \"Object\",\n    Sequence: \"Sequence\",\n    String: \"String\",\n    Stream: \"Stream\",\n    TimeSpan: \"TimeSpan\",\n    UnixTime: \"UnixTime\",\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}