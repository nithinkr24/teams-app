{"ast":null,"code":"import { sendMessageToParent as e, sendAndHandleSdkError as t } from \"../internal/communication.js\";\nimport { captureImageMobileSupportVersion as i, mediaAPISupportVersion as n, getMediaCallbackSupportVersion as o, nonFullScreenVideoModeAPISupportVersion as r, scanBarCodeAPIMobileSupportVersion as a } from \"../internal/constants.js\";\nimport { GlobalVars as s } from \"../internal/globalVars.js\";\nimport { registerHandler as l, removeHandler as c } from \"../internal/handlers.js\";\nimport { ensureInitialized as d, isCurrentSDKVersionAtLeast as m, throwExceptionIfMobileApiIsNotSupported as u } from \"../internal/internalAPIs.js\";\nimport { validateGetMediaInputs as h, throwExceptionIfMediaCallIsNotSupportedOnMobile as f, validateSelectMediaInputs as p, isVideoControllerRegistered as C, validateViewImagesInput as T, validateScanBarCodeInput as g, createFile as M, decodeAttachment as b } from \"../internal/mediaUtil.js\";\nimport { getLogger as R, getApiVersionTag as k } from \"../internal/telemetry.js\";\nimport { isNullOrUndefined as w } from \"../internal/typeCheckUtilities.js\";\nimport { generateGUID as A } from \"../internal/utils.js\";\nimport { FrameContexts as y, errorNotSupportedOnPlatform as v, HostClientType as I } from \"./constants.js\";\nimport { ErrorCode as E, DevicePermission as P } from \"./interfaces.js\";\nimport { runtime as O } from \"./runtime.js\";\nconst L = \"v1\",\n  D = R(\"media\");\nvar S, N, _, B, V, j, F;\n!function (e) {\n  e.Base64 = \"base64\", e.ID = \"id\";\n}(S || (S = {}));\nclass U {}\nfunction G(t) {\n  if (!t) throw new Error(\"[captureImage] Callback cannot be null\");\n  if (d(O, y.content, y.task), s.isFramelessWindow) {\n    if (m(i)) e(k(L, \"media.captureImage\"), \"captureImage\", t);else {\n      t({\n        errorCode: E.OLD_PLATFORM\n      }, []);\n    }\n  } else {\n    t({\n      errorCode: E.NOT_SUPPORTED_ON_PLATFORM\n    }, []);\n  }\n}\nfunction q() {\n  if (d(O, y.content, y.task), !W()) throw v;\n  const e = P.Media;\n  return new Promise(i => {\n    i(t(k(L, \"media.hasPermission\"), \"permissions.has\", e));\n  });\n}\nfunction H() {\n  if (d(O, y.content, y.task), !W()) throw v;\n  const e = P.Media;\n  return new Promise(i => {\n    i(t(k(L, \"media.requestPermission\"), \"permissions.request\", e));\n  });\n}\nfunction W() {\n  return !(!d(O) || !O.supports.permissions);\n}\nclass x extends U {\n  constructor(e) {\n    super(), e && (this.content = e.content, this.format = e.format, this.mimeType = e.mimeType, this.name = e.name, this.preview = e.preview, this.size = e.size);\n  }\n  getMedia(e) {\n    if (!e) throw new Error(\"[get Media] Callback cannot be null\");\n    if (d(O, y.content, y.task), m(n)) {\n      if (h(this.mimeType, this.format, this.content)) m(o) ? this.getMediaViaCallback(e) : this.getMediaViaHandler(e);else {\n        e({\n          errorCode: E.INVALID_ARGUMENTS\n        }, new Blob());\n      }\n    } else {\n      e({\n        errorCode: E.OLD_PLATFORM\n      }, new Blob());\n    }\n  }\n  getMediaViaCallback(t) {\n    const i = {\n        mediaMimeType: this.mimeType,\n        assembleAttachment: []\n      },\n      n = [this.content];\n    e(k(L, \"media.getMedia\"), \"getMedia\", n, function (e) {\n      if (t) if (e && e.error) t(e.error, new Blob());else if (e && e.mediaChunk) {\n        if (e.mediaChunk.chunkSequence <= 0) {\n          const n = M(i.assembleAttachment, i.mediaMimeType);\n          t(e.error, null != n ? n : new Blob());\n        } else {\n          const t = b(e.mediaChunk, i.mediaMimeType);\n          t ? i.assembleAttachment.push(t) : D(`Received a null assemble attachment for when decoding chunk sequence ${e.mediaChunk.chunkSequence}; not including the chunk in the assembled file.`);\n        }\n      } else t({\n        errorCode: E.INTERNAL_ERROR,\n        message: \"data received is null\"\n      }, new Blob());\n    });\n  }\n  getMediaViaHandler(t) {\n    const i = A(),\n      n = {\n        mediaMimeType: this.mimeType,\n        assembleAttachment: []\n      },\n      o = [i, this.content];\n    this.content && !w(t) && e(k(L, \"media.getMedia\"), \"getMedia\", o), l(k(L, \"media.registerGetMediaRequestHandler\"), \"getMedia\" + i, function (e) {\n      if (t) {\n        const o = JSON.parse(e);\n        if (o.error) t(o.error, new Blob()), c(\"getMedia\" + i);else if (o.mediaChunk) {\n          if (o.mediaChunk.chunkSequence <= 0) {\n            const e = M(n.assembleAttachment, n.mediaMimeType);\n            t(o.error, null != e ? e : new Blob()), c(\"getMedia\" + i);\n          } else {\n            const e = b(o.mediaChunk, n.mediaMimeType);\n            e && n.assembleAttachment.push(e);\n          }\n        } else t({\n          errorCode: E.INTERNAL_ERROR,\n          message: \"data received is null\"\n        }, new Blob()), c(\"getMedia\" + i);\n      }\n    });\n  }\n}\nclass z {\n  constructor(e) {\n    this.controllerCallback = e;\n  }\n  notifyEventToHost(t, i) {\n    d(O, y.content, y.task);\n    try {\n      u(r);\n    } catch (e) {\n      return void (i && i(e));\n    }\n    const n = {\n      mediaType: this.getMediaType(),\n      mediaControllerEvent: t\n    };\n    e(k(L, \"media.controller\"), \"media.controller\", [n], e => {\n      i && i(e);\n    });\n  }\n  stop(e) {\n    this.notifyEventToHost(N.StopRecording, e);\n  }\n}\nclass J extends z {\n  getMediaType() {\n    return V.Video;\n  }\n  notifyEventToApp(e) {\n    if (this.controllerCallback) switch (e) {\n      case N.StartRecording:\n        if (this.controllerCallback.onRecordingStarted) {\n          this.controllerCallback.onRecordingStarted();\n          break;\n        }\n    }\n  }\n}\nfunction $(t, i) {\n  if (!i) throw new Error(\"[select Media] Callback cannot be null\");\n  if (d(O, y.content, y.task), !m(n)) {\n    const e = {\n      errorCode: E.OLD_PLATFORM\n    };\n    return void i(e, []);\n  }\n  try {\n    f(t);\n  } catch (e) {\n    return void i(e, []);\n  }\n  if (!p(t)) {\n    const e = {\n      errorCode: E.INVALID_ARGUMENTS\n    };\n    return void i(e, []);\n  }\n  const o = [t];\n  e(k(L, \"media.selectMedia\"), \"selectMedia\", o, (e, n, o) => {\n    var r, a;\n    if (o) return void (C(t) && (null === (a = null === (r = null == t ? void 0 : t.videoProps) || void 0 === r ? void 0 : r.videoController) || void 0 === a || a.notifyEventToApp(o)));\n    if (!n) return void i(e, []);\n    const s = [];\n    for (const e of n) s.push(new x(e));\n    i(e, s);\n  });\n}\nfunction K(t, i) {\n  if (!i) throw new Error(\"[view images] Callback cannot be null\");\n  if (d(O, y.content, y.task), !m(n)) {\n    return void i({\n      errorCode: E.OLD_PLATFORM\n    });\n  }\n  if (!T(t)) {\n    return void i({\n      errorCode: E.INVALID_ARGUMENTS\n    });\n  }\n  const o = [t];\n  e(k(L, \"media.viewImages\"), \"viewImages\", o, i);\n}\nfunction Q(t, i) {\n  if (!t) throw new Error(\"[media.scanBarCode] Callback cannot be null\");\n  if (d(O, y.content, y.task), s.hostClientType !== I.desktop && s.hostClientType !== I.web && s.hostClientType !== I.rigel && s.hostClientType !== I.teamsRoomsWindows && s.hostClientType !== I.teamsRoomsAndroid && s.hostClientType !== I.teamsPhones && s.hostClientType !== I.teamsDisplays) {\n    if (m(a)) {\n      if (g(i)) e(k(L, \"media.scanBarCode\"), \"media.scanBarCode\", [i], t);else {\n        t({\n          errorCode: E.INVALID_ARGUMENTS\n        }, \"\");\n      }\n    } else {\n      t({\n        errorCode: E.OLD_PLATFORM\n      }, \"\");\n    }\n  } else {\n    t({\n      errorCode: E.NOT_SUPPORTED_ON_PLATFORM\n    }, \"\");\n  }\n}\n!function (e) {\n  e[e.StartRecording = 1] = \"StartRecording\", e[e.StopRecording = 2] = \"StopRecording\";\n}(N || (N = {})), function (e) {\n  e[e.Photo = 1] = \"Photo\", e[e.Document = 2] = \"Document\", e[e.Whiteboard = 3] = \"Whiteboard\", e[e.BusinessCard = 4] = \"BusinessCard\";\n}(_ || (_ = {})), function (e) {\n  e[e.Camera = 1] = \"Camera\", e[e.Gallery = 2] = \"Gallery\";\n}(B || (B = {})), function (e) {\n  e[e.Image = 1] = \"Image\", e[e.Video = 2] = \"Video\", e[e.VideoAndImage = 3] = \"VideoAndImage\", e[e.Audio = 4] = \"Audio\";\n}(V || (V = {})), function (e) {\n  e[e.ID = 1] = \"ID\", e[e.URL = 2] = \"URL\";\n}(j || (j = {})), function (e) {\n  e[e.IMAGE = 1] = \"IMAGE\", e[e.PDF = 2] = \"PDF\";\n}(F || (F = {}));\nexport { _ as CameraStartMode, U as File, S as FileFormat, F as ImageOutputFormats, j as ImageUriType, x as Media, N as MediaControllerEvent, V as MediaType, B as Source, J as VideoController, G as captureImage, q as hasPermission, H as requestPermission, Q as scanBarCode, $ as selectMedia, K as viewImages };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}