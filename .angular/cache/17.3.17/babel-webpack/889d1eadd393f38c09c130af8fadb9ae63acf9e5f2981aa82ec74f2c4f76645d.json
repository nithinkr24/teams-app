{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport { ChatThreadImpl, ChatImpl } from \"./operations/index.js\";\nexport class ChatApiClient extends coreClient.ServiceClient {\n  /**\n   * Initializes a new instance of the ChatApiClient class.\n   * @param endpoint The endpoint of the Azure Communication resource.\n   * @param options The parameter options\n   */\n  constructor(endpoint, options) {\n    var _a, _b;\n    if (endpoint === undefined) {\n      throw new Error(\"'endpoint' cannot be null\");\n    }\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n    const packageDetails = `azsdk-js-communication-chat/1.6.0`;\n    const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;\n    const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), {\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : \"{endpoint}\"\n    });\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.endpoint = endpoint;\n    // Assigning values to Constant parameters\n    this.apiVersion = options.apiVersion || \"2025-03-15\";\n    this.chatThread = new ChatThreadImpl(this);\n    this.chat = new ChatImpl(this);\n    this.addCustomApiVersionPolicy(options.apiVersion);\n  }\n  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */\n  addCustomApiVersionPolicy(apiVersion) {\n    if (!apiVersion) {\n      return;\n    }\n    const apiVersionPolicy = {\n      name: \"CustomApiVersionPolicy\",\n      sendRequest(request, next) {\n        return _asyncToGenerator(function* () {\n          const param = request.url.split(\"?\");\n          if (param.length > 1) {\n            const newParams = param[1].split(\"&\").map(item => {\n              if (item.indexOf(\"api-version\") > -1) {\n                return \"api-version=\" + apiVersion;\n              } else {\n                return item;\n              }\n            });\n            request.url = param[0] + \"?\" + newParams.join(\"&\");\n          }\n          return next(request);\n        })();\n      }\n    };\n    this.pipeline.addPolicy(apiVersionPolicy);\n  }\n}\n//# sourceMappingURL=chatApiClient.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}