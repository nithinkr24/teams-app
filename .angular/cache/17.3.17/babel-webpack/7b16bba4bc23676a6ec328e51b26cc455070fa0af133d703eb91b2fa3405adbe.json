{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\nimport { ConnectionState } from \"@azure/communication-signaling\";\nimport { mapToChatParticipantRestModel, mapToCreateChatThreadOptionsRestModel, mapToCreateChatThreadResultSdkModel } from \"./models/mappers.js\";\nimport { ChatApiClient } from \"./generated/src/index.js\";\nimport { ChatThreadClient } from \"./chatThreadClient.js\";\nimport { EventEmitter } from \"events\";\nimport { createCommunicationTokenCredentialPolicy } from \"./credential/communicationTokenCredentialPolicy.js\";\nimport { generateUuid } from \"./models/uuid.js\";\nimport { getSignalingClient } from \"./signaling/signalingClient.js\";\nimport { logger } from \"./models/logger.js\";\nimport { tracingClient } from \"./generated/src/tracing.js\";\n/**\n * The client to do chat operations\n */\nexport class ChatClient {\n  /**\n   * Creates an instance of the ChatClient for a given resource and user.\n   *\n   * @param endpoint - The url of the Communication Services resource.\n   * @param credential - The token credential. Use AzureCommunicationTokenCredential from \\@azure/communication-common to create a credential.\n   * @param options - Additional client options.\n   */\n  constructor(endpoint, credential, options = {}) {\n    this.endpoint = endpoint;\n    this.signalingClient = undefined;\n    this.emitter = new EventEmitter();\n    this.isRealtimeNotificationsStarted = false;\n    this.tokenCredential = credential;\n    const internalPipelineOptions = Object.assign(Object.assign({}, options), {\n      loggingOptions: {\n        logger: logger.info\n      }\n    });\n    this.client = new ChatApiClient(this.endpoint, Object.assign({\n      endpoint: this.endpoint\n    }, internalPipelineOptions));\n    const authPolicy = createCommunicationTokenCredentialPolicy(this.tokenCredential);\n    this.client.pipeline.addPolicy(authPolicy);\n    this.clientOptions = Object.assign({}, options);\n    this.clientOptions.signalingClientOptions = Object.assign(Object.assign({}, this.clientOptions.signalingClientOptions), {\n      resourceEndpoint: this.endpoint,\n      gatewayApiVersion: this.client.apiVersion\n    });\n    this.signalingClient = getSignalingClient(credential, logger, this.clientOptions.signalingClientOptions);\n  }\n  /**\n   * Returns ChatThreadClient with the specific thread id.\n   * @param threadId - Thread ID for the ChatThreadClient\n   */\n  getChatThreadClient(threadId) {\n    return new ChatThreadClient(this.endpoint, threadId, this.tokenCredential, this.clientOptions);\n  }\n  /**\n   * Creates a chat thread.\n   * Returns thread client with the id of the created thread.\n   * @param request - Request for creating a chat thread.\n   * @param options - Operation options.\n   */\n  createChatThread(_x) {\n    var _this = this;\n    return _asyncToGenerator(function* (request, options = {}) {\n      return tracingClient.withSpan(\"ChatClient-CreateChatThread\", options, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (updatedOptions) {\n          var _a, _b;\n          // We generate an UUID if the user does not provide an idempotencyToken value\n          updatedOptions.idempotencyToken = (_a = updatedOptions.idempotencyToken) !== null && _a !== void 0 ? _a : generateUuid();\n          const updatedRestModelOptions = mapToCreateChatThreadOptionsRestModel(updatedOptions);\n          const result = yield _this.client.chat.createChatThread({\n            topic: request.topic,\n            participants: (_b = options.participants) === null || _b === void 0 ? void 0 : _b.map(participant => mapToChatParticipantRestModel(participant)),\n            metadata: options.metadata,\n            retentionPolicy: options.retentionPolicy\n          }, updatedRestModelOptions);\n          return mapToCreateChatThreadResultSdkModel(result);\n        });\n        return function (_x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }).apply(this, arguments);\n  }\n  listChatThreadsPage(continuationState_1) {\n    return __asyncGenerator(this, arguments, function* listChatThreadsPage_1(continuationState, options = {}) {\n      if (!continuationState.continuationToken) {\n        const currentSetResponse = yield __await(this.client.chat.listChatThreads(options));\n        continuationState.continuationToken = currentSetResponse.nextLink;\n        if (currentSetResponse.value) {\n          yield yield __await(currentSetResponse.value);\n        }\n      }\n      while (continuationState.continuationToken) {\n        const currentSetResponse = yield __await(this.client.chat.listChatThreadsNext(continuationState.continuationToken, options));\n        continuationState.continuationToken = currentSetResponse.nextLink;\n        if (currentSetResponse.value) {\n          yield yield __await(currentSetResponse.value);\n        } else {\n          break;\n        }\n      }\n    });\n  }\n  listChatThreadsAll(options) {\n    return __asyncGenerator(this, arguments, function* listChatThreadsAll_1() {\n      var _a, e_1, _b, _c;\n      try {\n        for (var _d = true, _e = __asyncValues(this.listChatThreadsPage({}, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n          _c = _f.value;\n          _d = false;\n          const page = _c;\n          yield __await(yield* __asyncDelegator(__asyncValues(page)));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    });\n  }\n  /**\n   * Gets the list of chat threads of a user.\n   * @param options - List chat threads options.\n   */\n  listChatThreads(options = {}) {\n    const {\n      span,\n      updatedOptions\n    } = tracingClient.startSpan(\"ChatClient-ListChatThreads\", options);\n    try {\n      const iter = this.listChatThreadsAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings = {}) => {\n          return this.listChatThreadsPage(settings, updatedOptions);\n        }\n      };\n    } catch (e) {\n      span.setStatus({\n        error: e,\n        status: \"error\"\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Deletes a chat thread.\n   * @param threadId - The ID of the thread to delete.\n   * @param options -  Operation options.\n   */\n  deleteChatThread(_x3) {\n    var _this2 = this;\n    return _asyncToGenerator(function* (threadId, options = {}) {\n      return tracingClient.withSpan(\"ChatClient-DeleteChatThread\", options, /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (updatedOptions) {\n          yield _this2.client.chat.deleteChatThread(threadId, updatedOptions);\n        });\n        return function (_x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }).apply(this, arguments);\n  }\n  /**\n   * Start receiving realtime notifications.\n   * Call this function before subscribing to any event.\n   */\n  startRealtimeNotifications() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.signalingClient === undefined) {\n        throw new Error(\"Realtime notifications are not supported in node js.\");\n      }\n      if (_this3.isRealtimeNotificationsStarted) {\n        return;\n      }\n      _this3.isRealtimeNotificationsStarted = true;\n      yield _this3.signalingClient.start();\n      _this3.subscribeToSignalingEvents();\n    })();\n  }\n  /**\n   * Stop receiving realtime notifications.\n   * This function would unsubscribe to all events.\n   */\n  stopRealtimeNotifications() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.signalingClient === undefined) {\n        throw new Error(\"Realtime notifications are not supported in node js.\");\n      }\n      _this4.isRealtimeNotificationsStarted = false;\n      yield _this4.signalingClient.stop();\n      _this4.emitter.removeAllListeners();\n    })();\n  }\n  on(event, listener) {\n    if (this.signalingClient === undefined) {\n      throw new Error(\"Realtime notifications are only supported in the browser.\");\n    }\n    if (!this.isRealtimeNotificationsStarted && event !== \"realTimeNotificationConnected\" && event !== \"realTimeNotificationDisconnected\") {\n      throw new Error(\"You must call startRealtimeNotifications before you can subscribe to events.\");\n    }\n    this.emitter.on(event, listener);\n  }\n  off(event, listener) {\n    if (this.signalingClient === undefined) {\n      throw new Error(\"Realtime notifications are only supported in the browser.\");\n    }\n    this.emitter.removeListener(event, listener);\n  }\n  subscribeToSignalingEvents() {\n    if (this.signalingClient === undefined) {\n      throw new Error(\"Realtime notifications are only supported in the browser.\");\n    }\n    this.signalingClient.on(\"connectionChanged\", payload => {\n      if (payload === ConnectionState.Connected) {\n        this.emitter.emit(\"realTimeNotificationConnected\");\n      } else if (payload === ConnectionState.Disconnected) {\n        this.emitter.emit(\"realTimeNotificationDisconnected\");\n      }\n    });\n    this.signalingClient.on(\"chatMessageReceived\", payload => {\n      this.emitter.emit(\"chatMessageReceived\", payload);\n    });\n    this.signalingClient.on(\"chatMessageEdited\", payload => {\n      this.emitter.emit(\"chatMessageEdited\", payload);\n    });\n    this.signalingClient.on(\"chatMessageDeleted\", payload => {\n      this.emitter.emit(\"chatMessageDeleted\", payload);\n    });\n    this.signalingClient.on(\"typingIndicatorReceived\", payload => {\n      this.emitter.emit(\"typingIndicatorReceived\", payload);\n    });\n    this.signalingClient.on(\"readReceiptReceived\", payload => {\n      this.emitter.emit(\"readReceiptReceived\", payload);\n    });\n    this.signalingClient.on(\"chatThreadCreated\", payload => {\n      this.emitter.emit(\"chatThreadCreated\", payload);\n    });\n    this.signalingClient.on(\"chatThreadDeleted\", payload => {\n      this.emitter.emit(\"chatThreadDeleted\", payload);\n    });\n    this.signalingClient.on(\"chatThreadPropertiesUpdated\", payload => {\n      this.emitter.emit(\"chatThreadPropertiesUpdated\", payload);\n    });\n    this.signalingClient.on(\"participantsAdded\", payload => {\n      this.emitter.emit(\"participantsAdded\", payload);\n    });\n    this.signalingClient.on(\"participantsRemoved\", payload => {\n      this.emitter.emit(\"participantsRemoved\", payload);\n    });\n  }\n}","map":{"version":3,"names":["__asyncDelegator","__asyncGenerator","__asyncValues","__await","ConnectionState","mapToChatParticipantRestModel","mapToCreateChatThreadOptionsRestModel","mapToCreateChatThreadResultSdkModel","ChatApiClient","ChatThreadClient","EventEmitter","createCommunicationTokenCredentialPolicy","generateUuid","getSignalingClient","logger","tracingClient","ChatClient","constructor","endpoint","credential","options","signalingClient","undefined","emitter","isRealtimeNotificationsStarted","tokenCredential","internalPipelineOptions","Object","assign","loggingOptions","info","client","authPolicy","pipeline","addPolicy","clientOptions","signalingClientOptions","resourceEndpoint","gatewayApiVersion","apiVersion","getChatThreadClient","threadId","createChatThread","_x","_this","_asyncToGenerator","request","withSpan","_ref","updatedOptions","_a","_b","idempotencyToken","updatedRestModelOptions","result","chat","topic","participants","map","participant","metadata","retentionPolicy","_x2","apply","arguments","listChatThreadsPage","continuationState_1","listChatThreadsPage_1","continuationState","continuationToken","currentSetResponse","listChatThreads","nextLink","value","listChatThreadsNext","listChatThreadsAll","listChatThreadsAll_1","e_1","_c","_d","_e","_f","next","done","page","e_1_1","error","return","call","span","startSpan","iter","Symbol","asyncIterator","byPage","settings","e","setStatus","status","end","deleteChatThread","_x3","_this2","_ref2","_x4","startRealtimeNotifications","_this3","Error","start","subscribeToSignalingEvents","stopRealtimeNotifications","_this4","stop","removeAllListeners","on","event","listener","off","removeListener","payload","Connected","emit","Disconnected"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/communication-chat/dist/browser/chatClient.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\nimport { ConnectionState } from \"@azure/communication-signaling\";\nimport { mapToChatParticipantRestModel, mapToCreateChatThreadOptionsRestModel, mapToCreateChatThreadResultSdkModel, } from \"./models/mappers.js\";\nimport { ChatApiClient } from \"./generated/src/index.js\";\nimport { ChatThreadClient } from \"./chatThreadClient.js\";\nimport { EventEmitter } from \"events\";\nimport { createCommunicationTokenCredentialPolicy } from \"./credential/communicationTokenCredentialPolicy.js\";\nimport { generateUuid } from \"./models/uuid.js\";\nimport { getSignalingClient } from \"./signaling/signalingClient.js\";\nimport { logger } from \"./models/logger.js\";\nimport { tracingClient } from \"./generated/src/tracing.js\";\n/**\n * The client to do chat operations\n */\nexport class ChatClient {\n    /**\n     * Creates an instance of the ChatClient for a given resource and user.\n     *\n     * @param endpoint - The url of the Communication Services resource.\n     * @param credential - The token credential. Use AzureCommunicationTokenCredential from \\@azure/communication-common to create a credential.\n     * @param options - Additional client options.\n     */\n    constructor(endpoint, credential, options = {}) {\n        this.endpoint = endpoint;\n        this.signalingClient = undefined;\n        this.emitter = new EventEmitter();\n        this.isRealtimeNotificationsStarted = false;\n        this.tokenCredential = credential;\n        const internalPipelineOptions = Object.assign(Object.assign({}, options), {\n            loggingOptions: {\n                logger: logger.info,\n            },\n        });\n        this.client = new ChatApiClient(this.endpoint, Object.assign({ endpoint: this.endpoint }, internalPipelineOptions));\n        const authPolicy = createCommunicationTokenCredentialPolicy(this.tokenCredential);\n        this.client.pipeline.addPolicy(authPolicy);\n        this.clientOptions = Object.assign({}, options);\n        this.clientOptions.signalingClientOptions = Object.assign(Object.assign({}, this.clientOptions.signalingClientOptions), { resourceEndpoint: this.endpoint, gatewayApiVersion: this.client.apiVersion });\n        this.signalingClient = getSignalingClient(credential, logger, this.clientOptions.signalingClientOptions);\n    }\n    /**\n     * Returns ChatThreadClient with the specific thread id.\n     * @param threadId - Thread ID for the ChatThreadClient\n     */\n    getChatThreadClient(threadId) {\n        return new ChatThreadClient(this.endpoint, threadId, this.tokenCredential, this.clientOptions);\n    }\n    /**\n     * Creates a chat thread.\n     * Returns thread client with the id of the created thread.\n     * @param request - Request for creating a chat thread.\n     * @param options - Operation options.\n     */\n    async createChatThread(request, options = {}) {\n        return tracingClient.withSpan(\"ChatClient-CreateChatThread\", options, async (updatedOptions) => {\n            var _a, _b;\n            // We generate an UUID if the user does not provide an idempotencyToken value\n            updatedOptions.idempotencyToken = (_a = updatedOptions.idempotencyToken) !== null && _a !== void 0 ? _a : generateUuid();\n            const updatedRestModelOptions = mapToCreateChatThreadOptionsRestModel(updatedOptions);\n            const result = await this.client.chat.createChatThread({\n                topic: request.topic,\n                participants: (_b = options.participants) === null || _b === void 0 ? void 0 : _b.map((participant) => mapToChatParticipantRestModel(participant)),\n                metadata: options.metadata,\n                retentionPolicy: options.retentionPolicy,\n            }, updatedRestModelOptions);\n            return mapToCreateChatThreadResultSdkModel(result);\n        });\n    }\n    listChatThreadsPage(continuationState_1) {\n        return __asyncGenerator(this, arguments, function* listChatThreadsPage_1(continuationState, options = {}) {\n            if (!continuationState.continuationToken) {\n                const currentSetResponse = yield __await(this.client.chat.listChatThreads(options));\n                continuationState.continuationToken = currentSetResponse.nextLink;\n                if (currentSetResponse.value) {\n                    yield yield __await(currentSetResponse.value);\n                }\n            }\n            while (continuationState.continuationToken) {\n                const currentSetResponse = yield __await(this.client.chat.listChatThreadsNext(continuationState.continuationToken, options));\n                continuationState.continuationToken = currentSetResponse.nextLink;\n                if (currentSetResponse.value) {\n                    yield yield __await(currentSetResponse.value);\n                }\n                else {\n                    break;\n                }\n            }\n        });\n    }\n    listChatThreadsAll(options) {\n        return __asyncGenerator(this, arguments, function* listChatThreadsAll_1() {\n            var _a, e_1, _b, _c;\n            try {\n                for (var _d = true, _e = __asyncValues(this.listChatThreadsPage({}, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const page = _c;\n                    yield __await(yield* __asyncDelegator(__asyncValues(page)));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Gets the list of chat threads of a user.\n     * @param options - List chat threads options.\n     */\n    listChatThreads(options = {}) {\n        const { span, updatedOptions } = tracingClient.startSpan(\"ChatClient-ListChatThreads\", options);\n        try {\n            const iter = this.listChatThreadsAll(updatedOptions);\n            return {\n                next() {\n                    return iter.next();\n                },\n                [Symbol.asyncIterator]() {\n                    return this;\n                },\n                byPage: (settings = {}) => {\n                    return this.listChatThreadsPage(settings, updatedOptions);\n                },\n            };\n        }\n        catch (e) {\n            span.setStatus({\n                error: e,\n                status: \"error\",\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Deletes a chat thread.\n     * @param threadId - The ID of the thread to delete.\n     * @param options -  Operation options.\n     */\n    async deleteChatThread(threadId, options = {}) {\n        return tracingClient.withSpan(\"ChatClient-DeleteChatThread\", options, async (updatedOptions) => {\n            await this.client.chat.deleteChatThread(threadId, updatedOptions);\n        });\n    }\n    /**\n     * Start receiving realtime notifications.\n     * Call this function before subscribing to any event.\n     */\n    async startRealtimeNotifications() {\n        if (this.signalingClient === undefined) {\n            throw new Error(\"Realtime notifications are not supported in node js.\");\n        }\n        if (this.isRealtimeNotificationsStarted) {\n            return;\n        }\n        this.isRealtimeNotificationsStarted = true;\n        await this.signalingClient.start();\n        this.subscribeToSignalingEvents();\n    }\n    /**\n     * Stop receiving realtime notifications.\n     * This function would unsubscribe to all events.\n     */\n    async stopRealtimeNotifications() {\n        if (this.signalingClient === undefined) {\n            throw new Error(\"Realtime notifications are not supported in node js.\");\n        }\n        this.isRealtimeNotificationsStarted = false;\n        await this.signalingClient.stop();\n        this.emitter.removeAllListeners();\n    }\n    on(event, listener) {\n        if (this.signalingClient === undefined) {\n            throw new Error(\"Realtime notifications are only supported in the browser.\");\n        }\n        if (!this.isRealtimeNotificationsStarted &&\n            event !== \"realTimeNotificationConnected\" &&\n            event !== \"realTimeNotificationDisconnected\") {\n            throw new Error(\"You must call startRealtimeNotifications before you can subscribe to events.\");\n        }\n        this.emitter.on(event, listener);\n    }\n    off(event, listener) {\n        if (this.signalingClient === undefined) {\n            throw new Error(\"Realtime notifications are only supported in the browser.\");\n        }\n        this.emitter.removeListener(event, listener);\n    }\n    subscribeToSignalingEvents() {\n        if (this.signalingClient === undefined) {\n            throw new Error(\"Realtime notifications are only supported in the browser.\");\n        }\n        this.signalingClient.on(\"connectionChanged\", (payload) => {\n            if (payload === ConnectionState.Connected) {\n                this.emitter.emit(\"realTimeNotificationConnected\");\n            }\n            else if (payload === ConnectionState.Disconnected) {\n                this.emitter.emit(\"realTimeNotificationDisconnected\");\n            }\n        });\n        this.signalingClient.on(\"chatMessageReceived\", (payload) => {\n            this.emitter.emit(\"chatMessageReceived\", payload);\n        });\n        this.signalingClient.on(\"chatMessageEdited\", (payload) => {\n            this.emitter.emit(\"chatMessageEdited\", payload);\n        });\n        this.signalingClient.on(\"chatMessageDeleted\", (payload) => {\n            this.emitter.emit(\"chatMessageDeleted\", payload);\n        });\n        this.signalingClient.on(\"typingIndicatorReceived\", (payload) => {\n            this.emitter.emit(\"typingIndicatorReceived\", payload);\n        });\n        this.signalingClient.on(\"readReceiptReceived\", (payload) => {\n            this.emitter.emit(\"readReceiptReceived\", payload);\n        });\n        this.signalingClient.on(\"chatThreadCreated\", (payload) => {\n            this.emitter.emit(\"chatThreadCreated\", payload);\n        });\n        this.signalingClient.on(\"chatThreadDeleted\", (payload) => {\n            this.emitter.emit(\"chatThreadDeleted\", payload);\n        });\n        this.signalingClient.on(\"chatThreadPropertiesUpdated\", (payload) => {\n            this.emitter.emit(\"chatThreadPropertiesUpdated\", payload);\n        });\n        this.signalingClient.on(\"participantsAdded\", (payload) => {\n            this.emitter.emit(\"participantsAdded\", payload);\n        });\n        this.signalingClient.on(\"participantsRemoved\", (payload) => {\n            this.emitter.emit(\"participantsRemoved\", payload);\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}