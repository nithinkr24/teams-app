{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction normalizeName(name) {\n  return name.toLowerCase();\n}\nfunction* headerIterator(map) {\n  for (const entry of map.values()) {\n    yield [entry.name, entry.value];\n  }\n}\nclass HttpHeadersImpl {\n  constructor(rawHeaders) {\n    this._headersMap = new Map();\n    if (rawHeaders) {\n      for (const headerName of Object.keys(rawHeaders)) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   * @param value - The value of the header to set.\n   */\n  set(name, value) {\n    this._headersMap.set(normalizeName(name), {\n      name,\n      value: String(value).trim()\n    });\n  }\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param name - The name of the header. This value is case-insensitive.\n   */\n  get(name) {\n    var _a;\n    return (_a = this._headersMap.get(normalizeName(name))) === null || _a === void 0 ? void 0 : _a.value;\n  }\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   */\n  has(name) {\n    return this._headersMap.has(normalizeName(name));\n  }\n  /**\n   * Remove the header with the provided headerName.\n   * @param name - The name of the header to remove.\n   */\n  delete(name) {\n    this._headersMap.delete(normalizeName(name));\n  }\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  toJSON(options = {}) {\n    const result = {};\n    if (options.preserveCase) {\n      for (const entry of this._headersMap.values()) {\n        result[entry.name] = entry.value;\n      }\n    } else {\n      for (const [normalizedName, entry] of this._headersMap) {\n        result[normalizedName] = entry.value;\n      }\n    }\n    return result;\n  }\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  toString() {\n    return JSON.stringify(this.toJSON({\n      preserveCase: true\n    }));\n  }\n  /**\n   * Iterate over tuples of header [name, value] pairs.\n   */\n  [Symbol.iterator]() {\n    return headerIterator(this._headersMap);\n  }\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nexport function createHttpHeaders(rawHeaders) {\n  return new HttpHeadersImpl(rawHeaders);\n}","map":{"version":3,"names":["normalizeName","name","toLowerCase","headerIterator","map","entry","values","value","HttpHeadersImpl","constructor","rawHeaders","_headersMap","Map","headerName","Object","keys","set","String","trim","get","_a","has","delete","toJSON","options","result","preserveCase","normalizedName","toString","JSON","stringify","Symbol","iterator","createHttpHeaders"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/httpHeaders.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction normalizeName(name) {\n    return name.toLowerCase();\n}\nfunction* headerIterator(map) {\n    for (const entry of map.values()) {\n        yield [entry.name, entry.value];\n    }\n}\nclass HttpHeadersImpl {\n    constructor(rawHeaders) {\n        this._headersMap = new Map();\n        if (rawHeaders) {\n            for (const headerName of Object.keys(rawHeaders)) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     * @param value - The value of the header to set.\n     */\n    set(name, value) {\n        this._headersMap.set(normalizeName(name), { name, value: String(value).trim() });\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param name - The name of the header. This value is case-insensitive.\n     */\n    get(name) {\n        var _a;\n        return (_a = this._headersMap.get(normalizeName(name))) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     */\n    has(name) {\n        return this._headersMap.has(normalizeName(name));\n    }\n    /**\n     * Remove the header with the provided headerName.\n     * @param name - The name of the header to remove.\n     */\n    delete(name) {\n        this._headersMap.delete(normalizeName(name));\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJSON(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const entry of this._headersMap.values()) {\n                result[entry.name] = entry.value;\n            }\n        }\n        else {\n            for (const [normalizedName, entry] of this._headersMap) {\n                result[normalizedName] = entry.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJSON({ preserveCase: true }));\n    }\n    /**\n     * Iterate over tuples of header [name, value] pairs.\n     */\n    [Symbol.iterator]() {\n        return headerIterator(this._headersMap);\n    }\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nexport function createHttpHeaders(rawHeaders) {\n    return new HttpHeadersImpl(rawHeaders);\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,aAAaA,CAACC,IAAI,EAAE;EACzB,OAAOA,IAAI,CAACC,WAAW,CAAC,CAAC;AAC7B;AACA,UAAUC,cAAcA,CAACC,GAAG,EAAE;EAC1B,KAAK,MAAMC,KAAK,IAAID,GAAG,CAACE,MAAM,CAAC,CAAC,EAAE;IAC9B,MAAM,CAACD,KAAK,CAACJ,IAAI,EAAEI,KAAK,CAACE,KAAK,CAAC;EACnC;AACJ;AACA,MAAMC,eAAe,CAAC;EAClBC,WAAWA,CAACC,UAAU,EAAE;IACpB,IAAI,CAACC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC5B,IAAIF,UAAU,EAAE;MACZ,KAAK,MAAMG,UAAU,IAAIC,MAAM,CAACC,IAAI,CAACL,UAAU,CAAC,EAAE;QAC9C,IAAI,CAACM,GAAG,CAACH,UAAU,EAAEH,UAAU,CAACG,UAAU,CAAC,CAAC;MAChD;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIG,GAAGA,CAACf,IAAI,EAAEM,KAAK,EAAE;IACb,IAAI,CAACI,WAAW,CAACK,GAAG,CAAChB,aAAa,CAACC,IAAI,CAAC,EAAE;MAAEA,IAAI;MAAEM,KAAK,EAAEU,MAAM,CAACV,KAAK,CAAC,CAACW,IAAI,CAAC;IAAE,CAAC,CAAC;EACpF;EACA;AACJ;AACA;AACA;AACA;EACIC,GAAGA,CAAClB,IAAI,EAAE;IACN,IAAImB,EAAE;IACN,OAAO,CAACA,EAAE,GAAG,IAAI,CAACT,WAAW,CAACQ,GAAG,CAACnB,aAAa,CAACC,IAAI,CAAC,CAAC,MAAM,IAAI,IAAImB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACb,KAAK;EACzG;EACA;AACJ;AACA;AACA;EACIc,GAAGA,CAACpB,IAAI,EAAE;IACN,OAAO,IAAI,CAACU,WAAW,CAACU,GAAG,CAACrB,aAAa,CAACC,IAAI,CAAC,CAAC;EACpD;EACA;AACJ;AACA;AACA;EACIqB,MAAMA,CAACrB,IAAI,EAAE;IACT,IAAI,CAACU,WAAW,CAACW,MAAM,CAACtB,aAAa,CAACC,IAAI,CAAC,CAAC;EAChD;EACA;AACJ;AACA;EACIsB,MAAMA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjB,MAAMC,MAAM,GAAG,CAAC,CAAC;IACjB,IAAID,OAAO,CAACE,YAAY,EAAE;MACtB,KAAK,MAAMrB,KAAK,IAAI,IAAI,CAACM,WAAW,CAACL,MAAM,CAAC,CAAC,EAAE;QAC3CmB,MAAM,CAACpB,KAAK,CAACJ,IAAI,CAAC,GAAGI,KAAK,CAACE,KAAK;MACpC;IACJ,CAAC,MACI;MACD,KAAK,MAAM,CAACoB,cAAc,EAAEtB,KAAK,CAAC,IAAI,IAAI,CAACM,WAAW,EAAE;QACpDc,MAAM,CAACE,cAAc,CAAC,GAAGtB,KAAK,CAACE,KAAK;MACxC;IACJ;IACA,OAAOkB,MAAM;EACjB;EACA;AACJ;AACA;EACIG,QAAQA,CAAA,EAAG;IACP,OAAOC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACP,MAAM,CAAC;MAAEG,YAAY,EAAE;IAAK,CAAC,CAAC,CAAC;EAC9D;EACA;AACJ;AACA;EACI,CAACK,MAAM,CAACC,QAAQ,IAAI;IAChB,OAAO7B,cAAc,CAAC,IAAI,CAACQ,WAAW,CAAC;EAC3C;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,SAASsB,iBAAiBA,CAACvB,UAAU,EAAE;EAC1C,OAAO,IAAIF,eAAe,CAACE,UAAU,CAAC;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}