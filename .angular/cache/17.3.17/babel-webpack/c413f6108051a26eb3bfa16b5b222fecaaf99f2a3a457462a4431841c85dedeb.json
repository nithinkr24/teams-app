{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logger } from \"../../log.js\";\n// Ensure the warining is only emitted once\nlet insecureConnectionWarningEmmitted = false;\n/**\n * Checks if the request is allowed to be sent over an insecure connection.\n *\n * A request is allowed to be sent over an insecure connection when:\n * - The `allowInsecureConnection` option is set to `true`.\n * - The request has the `allowInsecureConnection` property set to `true`.\n * - The request is being sent to `localhost` or `127.0.0.1`\n */\nfunction allowInsecureConnection(request, options) {\n  if (options.allowInsecureConnection && request.allowInsecureConnection) {\n    const url = new URL(request.url);\n    if (url.hostname === \"localhost\" || url.hostname === \"127.0.0.1\") {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Logs a warning about sending a token over an insecure connection.\n *\n * This function will emit a node warning once, but log the warning every time.\n */\nfunction emitInsecureConnectionWarning() {\n  const warning = \"Sending token over insecure transport. Assume any token issued is compromised.\";\n  logger.warning(warning);\n  if (typeof (process === null || process === void 0 ? void 0 : process.emitWarning) === \"function\" && !insecureConnectionWarningEmmitted) {\n    insecureConnectionWarningEmmitted = true;\n    process.emitWarning(warning);\n  }\n}\n/**\n * Ensures that authentication is only allowed over HTTPS unless explicitly allowed.\n * Throws an error if the connection is not secure and not explicitly allowed.\n */\nexport function ensureSecureConnection(request, options) {\n  if (!request.url.toLowerCase().startsWith(\"https://\")) {\n    if (allowInsecureConnection(request, options)) {\n      emitInsecureConnectionWarning();\n    } else {\n      throw new Error(\"Authentication is not permitted for non-TLS protected (non-https) URLs when allowInsecureConnection is false.\");\n    }\n  }\n}","map":{"version":3,"names":["logger","insecureConnectionWarningEmmitted","allowInsecureConnection","request","options","url","URL","hostname","emitInsecureConnectionWarning","warning","process","emitWarning","ensureSecureConnection","toLowerCase","startsWith","Error"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/policies/auth/checkInsecureConnection.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logger } from \"../../log.js\";\n// Ensure the warining is only emitted once\nlet insecureConnectionWarningEmmitted = false;\n/**\n * Checks if the request is allowed to be sent over an insecure connection.\n *\n * A request is allowed to be sent over an insecure connection when:\n * - The `allowInsecureConnection` option is set to `true`.\n * - The request has the `allowInsecureConnection` property set to `true`.\n * - The request is being sent to `localhost` or `127.0.0.1`\n */\nfunction allowInsecureConnection(request, options) {\n    if (options.allowInsecureConnection && request.allowInsecureConnection) {\n        const url = new URL(request.url);\n        if (url.hostname === \"localhost\" || url.hostname === \"127.0.0.1\") {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Logs a warning about sending a token over an insecure connection.\n *\n * This function will emit a node warning once, but log the warning every time.\n */\nfunction emitInsecureConnectionWarning() {\n    const warning = \"Sending token over insecure transport. Assume any token issued is compromised.\";\n    logger.warning(warning);\n    if (typeof (process === null || process === void 0 ? void 0 : process.emitWarning) === \"function\" && !insecureConnectionWarningEmmitted) {\n        insecureConnectionWarningEmmitted = true;\n        process.emitWarning(warning);\n    }\n}\n/**\n * Ensures that authentication is only allowed over HTTPS unless explicitly allowed.\n * Throws an error if the connection is not secure and not explicitly allowed.\n */\nexport function ensureSecureConnection(request, options) {\n    if (!request.url.toLowerCase().startsWith(\"https://\")) {\n        if (allowInsecureConnection(request, options)) {\n            emitInsecureConnectionWarning();\n        }\n        else {\n            throw new Error(\"Authentication is not permitted for non-TLS protected (non-https) URLs when allowInsecureConnection is false.\");\n        }\n    }\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,MAAM,QAAQ,cAAc;AACrC;AACA,IAAIC,iCAAiC,GAAG,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAACC,OAAO,EAAEC,OAAO,EAAE;EAC/C,IAAIA,OAAO,CAACF,uBAAuB,IAAIC,OAAO,CAACD,uBAAuB,EAAE;IACpE,MAAMG,GAAG,GAAG,IAAIC,GAAG,CAACH,OAAO,CAACE,GAAG,CAAC;IAChC,IAAIA,GAAG,CAACE,QAAQ,KAAK,WAAW,IAAIF,GAAG,CAACE,QAAQ,KAAK,WAAW,EAAE;MAC9D,OAAO,IAAI;IACf;EACJ;EACA,OAAO,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,6BAA6BA,CAAA,EAAG;EACrC,MAAMC,OAAO,GAAG,gFAAgF;EAChGT,MAAM,CAACS,OAAO,CAACA,OAAO,CAAC;EACvB,IAAI,QAAQC,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACC,WAAW,CAAC,KAAK,UAAU,IAAI,CAACV,iCAAiC,EAAE;IACrIA,iCAAiC,GAAG,IAAI;IACxCS,OAAO,CAACC,WAAW,CAACF,OAAO,CAAC;EAChC;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,sBAAsBA,CAACT,OAAO,EAAEC,OAAO,EAAE;EACrD,IAAI,CAACD,OAAO,CAACE,GAAG,CAACQ,WAAW,CAAC,CAAC,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE;IACnD,IAAIZ,uBAAuB,CAACC,OAAO,EAAEC,OAAO,CAAC,EAAE;MAC3CI,6BAA6B,CAAC,CAAC;IACnC,CAAC,MACI;MACD,MAAM,IAAIO,KAAK,CAAC,+GAA+G,CAAC;IACpI;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}