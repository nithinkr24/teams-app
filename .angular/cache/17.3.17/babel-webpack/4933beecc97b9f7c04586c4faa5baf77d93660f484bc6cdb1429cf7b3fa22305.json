{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * @internal\n */\nexport function getHeaderName() {\n  return \"x-ms-useragent\";\n}\nfunction getBrowserInfo(userAgent) {\n  const browserRegexes = [{\n    name: \"Firefox\",\n    regex: /Firefox\\/([\\d.]+)/\n  }, {\n    name: \"Safari\",\n    regex: /Version\\/([\\d.]+).*Safari/\n  }];\n  for (const browser of browserRegexes) {\n    const match = userAgent.match(browser.regex);\n    if (match) {\n      return {\n        brand: browser.name,\n        version: match[1]\n      };\n    }\n  }\n  return undefined;\n}\nfunction getBrandVersionString(brands) {\n  const brandOrder = [\"Google Chrome\", \"Microsoft Edge\", \"Opera\", \"Brave\", \"Chromium\"];\n  for (const brand of brandOrder) {\n    const foundBrand = brands.find(b => b.brand === brand);\n    if (foundBrand) {\n      return foundBrand;\n    }\n  }\n  return undefined;\n}\n/**\n * @internal\n */\nexport function setPlatformSpecificData(_x) {\n  return _setPlatformSpecificData.apply(this, arguments);\n}\nfunction _setPlatformSpecificData() {\n  _setPlatformSpecificData = _asyncToGenerator(function* (map) {\n    const localNavigator = globalThis.navigator;\n    let osPlatform = \"unknown\";\n    if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.userAgentData) {\n      const entropyValues = yield localNavigator.userAgentData.getHighEntropyValues([\"architecture\", \"platformVersion\"]);\n      osPlatform = `${entropyValues.architecture}-${entropyValues.platform}-${entropyValues.platformVersion}`;\n      // Get the brand and version\n      const brand = getBrandVersionString(localNavigator.userAgentData.brands);\n      if (brand) {\n        map.set(brand.brand, brand.version);\n      }\n    } else if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.platform) {\n      osPlatform = localNavigator.platform;\n      const brand = getBrowserInfo(localNavigator.userAgent);\n      if (brand) {\n        map.set(brand.brand, brand.version);\n      }\n    } else if (typeof globalThis.EdgeRuntime === \"string\") {\n      map.set(\"EdgeRuntime\", globalThis.EdgeRuntime);\n    }\n    map.set(\"OS\", osPlatform);\n  });\n  return _setPlatformSpecificData.apply(this, arguments);\n}","map":{"version":3,"names":["getHeaderName","getBrowserInfo","userAgent","browserRegexes","name","regex","browser","match","brand","version","undefined","getBrandVersionString","brands","brandOrder","foundBrand","find","b","setPlatformSpecificData","_x","_setPlatformSpecificData","apply","arguments","_asyncToGenerator","map","localNavigator","globalThis","navigator","osPlatform","userAgentData","entropyValues","getHighEntropyValues","architecture","platform","platformVersion","set","EdgeRuntime"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/util/userAgentPlatform.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * @internal\n */\nexport function getHeaderName() {\n    return \"x-ms-useragent\";\n}\nfunction getBrowserInfo(userAgent) {\n    const browserRegexes = [\n        { name: \"Firefox\", regex: /Firefox\\/([\\d.]+)/ },\n        { name: \"Safari\", regex: /Version\\/([\\d.]+).*Safari/ },\n    ];\n    for (const browser of browserRegexes) {\n        const match = userAgent.match(browser.regex);\n        if (match) {\n            return { brand: browser.name, version: match[1] };\n        }\n    }\n    return undefined;\n}\nfunction getBrandVersionString(brands) {\n    const brandOrder = [\"Google Chrome\", \"Microsoft Edge\", \"Opera\", \"Brave\", \"Chromium\"];\n    for (const brand of brandOrder) {\n        const foundBrand = brands.find((b) => b.brand === brand);\n        if (foundBrand) {\n            return foundBrand;\n        }\n    }\n    return undefined;\n}\n/**\n * @internal\n */\nexport async function setPlatformSpecificData(map) {\n    const localNavigator = globalThis.navigator;\n    let osPlatform = \"unknown\";\n    if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.userAgentData) {\n        const entropyValues = await localNavigator.userAgentData.getHighEntropyValues([\n            \"architecture\",\n            \"platformVersion\",\n        ]);\n        osPlatform = `${entropyValues.architecture}-${entropyValues.platform}-${entropyValues.platformVersion}`;\n        // Get the brand and version\n        const brand = getBrandVersionString(localNavigator.userAgentData.brands);\n        if (brand) {\n            map.set(brand.brand, brand.version);\n        }\n    }\n    else if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.platform) {\n        osPlatform = localNavigator.platform;\n        const brand = getBrowserInfo(localNavigator.userAgent);\n        if (brand) {\n            map.set(brand.brand, brand.version);\n        }\n    }\n    else if (typeof globalThis.EdgeRuntime === \"string\") {\n        map.set(\"EdgeRuntime\", globalThis.EdgeRuntime);\n    }\n    map.set(\"OS\", osPlatform);\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAaA,CAAA,EAAG;EAC5B,OAAO,gBAAgB;AAC3B;AACA,SAASC,cAAcA,CAACC,SAAS,EAAE;EAC/B,MAAMC,cAAc,GAAG,CACnB;IAAEC,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAoB,CAAC,EAC/C;IAAED,IAAI,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAA4B,CAAC,CACzD;EACD,KAAK,MAAMC,OAAO,IAAIH,cAAc,EAAE;IAClC,MAAMI,KAAK,GAAGL,SAAS,CAACK,KAAK,CAACD,OAAO,CAACD,KAAK,CAAC;IAC5C,IAAIE,KAAK,EAAE;MACP,OAAO;QAAEC,KAAK,EAAEF,OAAO,CAACF,IAAI;QAAEK,OAAO,EAAEF,KAAK,CAAC,CAAC;MAAE,CAAC;IACrD;EACJ;EACA,OAAOG,SAAS;AACpB;AACA,SAASC,qBAAqBA,CAACC,MAAM,EAAE;EACnC,MAAMC,UAAU,GAAG,CAAC,eAAe,EAAE,gBAAgB,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC;EACpF,KAAK,MAAML,KAAK,IAAIK,UAAU,EAAE;IAC5B,MAAMC,UAAU,GAAGF,MAAM,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACR,KAAK,KAAKA,KAAK,CAAC;IACxD,IAAIM,UAAU,EAAE;MACZ,OAAOA,UAAU;IACrB;EACJ;EACA,OAAOJ,SAAS;AACpB;AACA;AACA;AACA;AACA,gBAAsBO,uBAAuBA,CAAAC,EAAA;EAAA,OAAAC,wBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AA0B5C,SAAAF,yBAAA;EAAAA,wBAAA,GAAAG,iBAAA,CA1BM,WAAuCC,GAAG,EAAE;IAC/C,MAAMC,cAAc,GAAGC,UAAU,CAACC,SAAS;IAC3C,IAAIC,UAAU,GAAG,SAAS;IAC1B,IAAIH,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACI,aAAa,EAAE;MAC9F,MAAMC,aAAa,SAASL,cAAc,CAACI,aAAa,CAACE,oBAAoB,CAAC,CAC1E,cAAc,EACd,iBAAiB,CACpB,CAAC;MACFH,UAAU,GAAG,GAAGE,aAAa,CAACE,YAAY,IAAIF,aAAa,CAACG,QAAQ,IAAIH,aAAa,CAACI,eAAe,EAAE;MACvG;MACA,MAAMzB,KAAK,GAAGG,qBAAqB,CAACa,cAAc,CAACI,aAAa,CAAChB,MAAM,CAAC;MACxE,IAAIJ,KAAK,EAAE;QACPe,GAAG,CAACW,GAAG,CAAC1B,KAAK,CAACA,KAAK,EAAEA,KAAK,CAACC,OAAO,CAAC;MACvC;IACJ,CAAC,MACI,IAAIe,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACQ,QAAQ,EAAE;MAC9FL,UAAU,GAAGH,cAAc,CAACQ,QAAQ;MACpC,MAAMxB,KAAK,GAAGP,cAAc,CAACuB,cAAc,CAACtB,SAAS,CAAC;MACtD,IAAIM,KAAK,EAAE;QACPe,GAAG,CAACW,GAAG,CAAC1B,KAAK,CAACA,KAAK,EAAEA,KAAK,CAACC,OAAO,CAAC;MACvC;IACJ,CAAC,MACI,IAAI,OAAOgB,UAAU,CAACU,WAAW,KAAK,QAAQ,EAAE;MACjDZ,GAAG,CAACW,GAAG,CAAC,aAAa,EAAET,UAAU,CAACU,WAAW,CAAC;IAClD;IACAZ,GAAG,CAACW,GAAG,CAAC,IAAI,EAAEP,UAAU,CAAC;EAC7B,CAAC;EAAA,OAAAR,wBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}