{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport * as tspRuntime from \"@typespec/ts-http-runtime/internal/util\";\nexport { cancelablePromiseRace } from \"./aborterUtils.js\";\nexport { createAbortablePromise } from \"./createAbortablePromise.js\";\nexport { delay } from \"./delay.js\";\nexport { getErrorMessage } from \"./error.js\";\nexport { isDefined, isObjectWithProperties, objectHasProperty } from \"./typeGuards.js\";\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n *\n * @param retryAttempt - The current retry attempt number.\n *\n * @param config - The exponential retry configuration.\n *\n * @returns An object containing the calculated retry delay.\n */\nexport function calculateRetryDelay(retryAttempt, config) {\n  return tspRuntime.calculateRetryDelay(retryAttempt, config);\n}\n/**\n * Generates a SHA-256 hash.\n *\n * @param content - The data to be included in the hash.\n *\n * @param encoding - The textual encoding to use for the returned hash.\n */\nexport function computeSha256Hash(content, encoding) {\n  return tspRuntime.computeSha256Hash(content, encoding);\n}\n/**\n * Generates a SHA-256 HMAC signature.\n *\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n *\n * @param stringToSign - The data to be signed.\n *\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport function computeSha256Hmac(key, stringToSign, encoding) {\n  return tspRuntime.computeSha256Hmac(key, stringToSign, encoding);\n}\n/**\n * Returns a random integer value between a lower and upper bound, inclusive of both bounds. Note that this uses Math.random and isn't secure. If you need to use this for any kind of security purpose, find a better source of random.\n *\n * @param min - The smallest integer value allowed.\n *\n * @param max - The largest integer value allowed.\n */\nexport function getRandomIntegerInclusive(min, max) {\n  return tspRuntime.getRandomIntegerInclusive(min, max);\n}\n/**\n * Typeguard for an error object shape (has name and message)\n *\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e) {\n  return tspRuntime.isError(e);\n}\n/**\n * Helper to determine when an input is a generic JS object.\n *\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nexport function isObject(input) {\n  return tspRuntime.isObject(input);\n}\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID() {\n  return tspRuntime.randomUUID();\n}\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\nexport const isBrowser = tspRuntime.isBrowser;\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nexport const isBun = tspRuntime.isBun;\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nexport const isDeno = tspRuntime.isDeno;\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n *\n * @deprecated\n *\n * Use `isNodeLike` instead.\n */\nexport const isNode = tspRuntime.isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n */\nexport const isNodeLike = tspRuntime.isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nexport const isNodeRuntime = tspRuntime.isNodeRuntime;\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\nexport const isReactNative = tspRuntime.isReactNative;\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nexport const isWebWorker = tspRuntime.isWebWorker;\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes, format) {\n  return tspRuntime.uint8ArrayToString(bytes, format);\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value, format) {\n  return tspRuntime.stringToUint8Array(value, format);\n}","map":{"version":3,"names":["tspRuntime","cancelablePromiseRace","createAbortablePromise","delay","getErrorMessage","isDefined","isObjectWithProperties","objectHasProperty","calculateRetryDelay","retryAttempt","config","computeSha256Hash","content","encoding","computeSha256Hmac","key","stringToSign","getRandomIntegerInclusive","min","max","isError","e","isObject","input","randomUUID","isBrowser","isBun","isDeno","isNode","isNodeLike","isNodeRuntime","isReactNative","isWebWorker","uint8ArrayToString","bytes","format","stringToUint8Array","value"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-util/dist/browser/index.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport * as tspRuntime from \"@typespec/ts-http-runtime/internal/util\";\nexport { cancelablePromiseRace, } from \"./aborterUtils.js\";\nexport { createAbortablePromise, } from \"./createAbortablePromise.js\";\nexport { delay } from \"./delay.js\";\nexport { getErrorMessage } from \"./error.js\";\nexport { isDefined, isObjectWithProperties, objectHasProperty } from \"./typeGuards.js\";\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n *\n * @param retryAttempt - The current retry attempt number.\n *\n * @param config - The exponential retry configuration.\n *\n * @returns An object containing the calculated retry delay.\n */\nexport function calculateRetryDelay(retryAttempt, config) {\n    return tspRuntime.calculateRetryDelay(retryAttempt, config);\n}\n/**\n * Generates a SHA-256 hash.\n *\n * @param content - The data to be included in the hash.\n *\n * @param encoding - The textual encoding to use for the returned hash.\n */\nexport function computeSha256Hash(content, encoding) {\n    return tspRuntime.computeSha256Hash(content, encoding);\n}\n/**\n * Generates a SHA-256 HMAC signature.\n *\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n *\n * @param stringToSign - The data to be signed.\n *\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport function computeSha256Hmac(key, stringToSign, encoding) {\n    return tspRuntime.computeSha256Hmac(key, stringToSign, encoding);\n}\n/**\n * Returns a random integer value between a lower and upper bound, inclusive of both bounds. Note that this uses Math.random and isn't secure. If you need to use this for any kind of security purpose, find a better source of random.\n *\n * @param min - The smallest integer value allowed.\n *\n * @param max - The largest integer value allowed.\n */\nexport function getRandomIntegerInclusive(min, max) {\n    return tspRuntime.getRandomIntegerInclusive(min, max);\n}\n/**\n * Typeguard for an error object shape (has name and message)\n *\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e) {\n    return tspRuntime.isError(e);\n}\n/**\n * Helper to determine when an input is a generic JS object.\n *\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nexport function isObject(input) {\n    return tspRuntime.isObject(input);\n}\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID() {\n    return tspRuntime.randomUUID();\n}\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\nexport const isBrowser = tspRuntime.isBrowser;\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nexport const isBun = tspRuntime.isBun;\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nexport const isDeno = tspRuntime.isDeno;\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n *\n * @deprecated\n *\n * Use `isNodeLike` instead.\n */\nexport const isNode = tspRuntime.isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n */\nexport const isNodeLike = tspRuntime.isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nexport const isNodeRuntime = tspRuntime.isNodeRuntime;\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\nexport const isReactNative = tspRuntime.isReactNative;\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nexport const isWebWorker = tspRuntime.isWebWorker;\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes, format) {\n    return tspRuntime.uint8ArrayToString(bytes, format);\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value, format) {\n    return tspRuntime.stringToUint8Array(value, format);\n}\n"],"mappings":"AAAA;AACA;AACA,OAAO,KAAKA,UAAU,MAAM,yCAAyC;AACrE,SAASC,qBAAqB,QAAS,mBAAmB;AAC1D,SAASC,sBAAsB,QAAS,6BAA6B;AACrE,SAASC,KAAK,QAAQ,YAAY;AAClC,SAASC,eAAe,QAAQ,YAAY;AAC5C,SAASC,SAAS,EAAEC,sBAAsB,EAAEC,iBAAiB,QAAQ,iBAAiB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAACC,YAAY,EAAEC,MAAM,EAAE;EACtD,OAAOV,UAAU,CAACQ,mBAAmB,CAACC,YAAY,EAAEC,MAAM,CAAC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,OAAO,EAAEC,QAAQ,EAAE;EACjD,OAAOb,UAAU,CAACW,iBAAiB,CAACC,OAAO,EAAEC,QAAQ,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,GAAG,EAAEC,YAAY,EAAEH,QAAQ,EAAE;EAC3D,OAAOb,UAAU,CAACc,iBAAiB,CAACC,GAAG,EAAEC,YAAY,EAAEH,QAAQ,CAAC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,yBAAyBA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAChD,OAAOnB,UAAU,CAACiB,yBAAyB,CAACC,GAAG,EAAEC,GAAG,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,CAAC,EAAE;EACvB,OAAOrB,UAAU,CAACoB,OAAO,CAACC,CAAC,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,KAAK,EAAE;EAC5B,OAAOvB,UAAU,CAACsB,QAAQ,CAACC,KAAK,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAA,EAAG;EACzB,OAAOxB,UAAU,CAACwB,UAAU,CAAC,CAAC;AAClC;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGzB,UAAU,CAACyB,SAAS;AAC7C;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAG1B,UAAU,CAAC0B,KAAK;AACrC;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAG3B,UAAU,CAAC2B,MAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAG5B,UAAU,CAAC6B,UAAU;AAC3C;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAG7B,UAAU,CAAC6B,UAAU;AAC/C;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG9B,UAAU,CAAC8B,aAAa;AACrD;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG/B,UAAU,CAAC+B,aAAa;AACrD;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGhC,UAAU,CAACgC,WAAW;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC9C,OAAOnC,UAAU,CAACiC,kBAAkB,CAACC,KAAK,EAAEC,MAAM,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,KAAK,EAAEF,MAAM,EAAE;EAC9C,OAAOnC,UAAU,CAACoC,kBAAkB,CAACC,KAAK,EAAEF,MAAM,CAAC;AACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}