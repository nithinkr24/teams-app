{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logPolicy } from \"./policies/logPolicy.js\";\nimport { createEmptyPipeline } from \"./pipeline.js\";\nimport { redirectPolicy } from \"./policies/redirectPolicy.js\";\nimport { userAgentPolicy } from \"./policies/userAgentPolicy.js\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy.js\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy.js\";\nimport { formDataPolicy } from \"./policies/formDataPolicy.js\";\nimport { isNodeLike } from \"./util/checkEnvironment.js\";\nimport { proxyPolicy } from \"./policies/proxyPolicy.js\";\nimport { agentPolicy } from \"./policies/agentPolicy.js\";\nimport { tlsPolicy } from \"./policies/tlsPolicy.js\";\nimport { multipartPolicy, multipartPolicyName } from \"./policies/multipartPolicy.js\";\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options) {\n  const pipeline = createEmptyPipeline();\n  if (isNodeLike) {\n    if (options.agent) {\n      pipeline.addPolicy(agentPolicy(options.agent));\n    }\n    if (options.tlsOptions) {\n      pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n    }\n    pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n    pipeline.addPolicy(decompressResponsePolicy());\n  }\n  pipeline.addPolicy(formDataPolicy(), {\n    beforePolicies: [multipartPolicyName]\n  });\n  pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n  // The multipart policy is added after policies with no phase, so that\n  // policies can be added between it and formDataPolicy to modify\n  // properties (e.g., making the boundary constant in recorded tests).\n  pipeline.addPolicy(multipartPolicy(), {\n    afterPhase: \"Deserialize\"\n  });\n  pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), {\n    phase: \"Retry\"\n  });\n  if (isNodeLike) {\n    // Both XHR and Fetch expect to handle redirects automatically,\n    // so only include this policy when we're in Node.\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), {\n      afterPhase: \"Retry\"\n    });\n  }\n  pipeline.addPolicy(logPolicy(options.loggingOptions), {\n    afterPhase: \"Sign\"\n  });\n  return pipeline;\n}","map":{"version":3,"names":["logPolicy","createEmptyPipeline","redirectPolicy","userAgentPolicy","decompressResponsePolicy","defaultRetryPolicy","formDataPolicy","isNodeLike","proxyPolicy","agentPolicy","tlsPolicy","multipartPolicy","multipartPolicyName","createPipelineFromOptions","options","pipeline","agent","addPolicy","tlsOptions","proxyOptions","beforePolicies","userAgentOptions","afterPhase","retryOptions","phase","redirectOptions","loggingOptions"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/createPipelineFromOptions.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logPolicy } from \"./policies/logPolicy.js\";\nimport { createEmptyPipeline } from \"./pipeline.js\";\nimport { redirectPolicy } from \"./policies/redirectPolicy.js\";\nimport { userAgentPolicy } from \"./policies/userAgentPolicy.js\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy.js\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy.js\";\nimport { formDataPolicy } from \"./policies/formDataPolicy.js\";\nimport { isNodeLike } from \"./util/checkEnvironment.js\";\nimport { proxyPolicy } from \"./policies/proxyPolicy.js\";\nimport { agentPolicy } from \"./policies/agentPolicy.js\";\nimport { tlsPolicy } from \"./policies/tlsPolicy.js\";\nimport { multipartPolicy, multipartPolicyName } from \"./policies/multipartPolicy.js\";\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options) {\n    const pipeline = createEmptyPipeline();\n    if (isNodeLike) {\n        if (options.agent) {\n            pipeline.addPolicy(agentPolicy(options.agent));\n        }\n        if (options.tlsOptions) {\n            pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n        }\n        pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n        pipeline.addPolicy(decompressResponsePolicy());\n    }\n    pipeline.addPolicy(formDataPolicy(), { beforePolicies: [multipartPolicyName] });\n    pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n    // The multipart policy is added after policies with no phase, so that\n    // policies can be added between it and formDataPolicy to modify\n    // properties (e.g., making the boundary constant in recorded tests).\n    pipeline.addPolicy(multipartPolicy(), { afterPhase: \"Deserialize\" });\n    pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n    if (isNodeLike) {\n        // Both XHR and Fetch expect to handle redirects automatically,\n        // so only include this policy when we're in Node.\n        pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n    }\n    pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Sign\" });\n    return pipeline;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,mBAAmB,QAAQ,eAAe;AACnD,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,wBAAwB,QAAQ,wCAAwC;AACjF,SAASC,kBAAkB,QAAQ,kCAAkC;AACrE,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,UAAU,QAAQ,4BAA4B;AACvD,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,eAAe,EAAEC,mBAAmB,QAAQ,+BAA+B;AACpF;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAACC,OAAO,EAAE;EAC/C,MAAMC,QAAQ,GAAGd,mBAAmB,CAAC,CAAC;EACtC,IAAIM,UAAU,EAAE;IACZ,IAAIO,OAAO,CAACE,KAAK,EAAE;MACfD,QAAQ,CAACE,SAAS,CAACR,WAAW,CAACK,OAAO,CAACE,KAAK,CAAC,CAAC;IAClD;IACA,IAAIF,OAAO,CAACI,UAAU,EAAE;MACpBH,QAAQ,CAACE,SAAS,CAACP,SAAS,CAACI,OAAO,CAACI,UAAU,CAAC,CAAC;IACrD;IACAH,QAAQ,CAACE,SAAS,CAACT,WAAW,CAACM,OAAO,CAACK,YAAY,CAAC,CAAC;IACrDJ,QAAQ,CAACE,SAAS,CAACb,wBAAwB,CAAC,CAAC,CAAC;EAClD;EACAW,QAAQ,CAACE,SAAS,CAACX,cAAc,CAAC,CAAC,EAAE;IAAEc,cAAc,EAAE,CAACR,mBAAmB;EAAE,CAAC,CAAC;EAC/EG,QAAQ,CAACE,SAAS,CAACd,eAAe,CAACW,OAAO,CAACO,gBAAgB,CAAC,CAAC;EAC7D;EACA;EACA;EACAN,QAAQ,CAACE,SAAS,CAACN,eAAe,CAAC,CAAC,EAAE;IAAEW,UAAU,EAAE;EAAc,CAAC,CAAC;EACpEP,QAAQ,CAACE,SAAS,CAACZ,kBAAkB,CAACS,OAAO,CAACS,YAAY,CAAC,EAAE;IAAEC,KAAK,EAAE;EAAQ,CAAC,CAAC;EAChF,IAAIjB,UAAU,EAAE;IACZ;IACA;IACAQ,QAAQ,CAACE,SAAS,CAACf,cAAc,CAACY,OAAO,CAACW,eAAe,CAAC,EAAE;MAAEH,UAAU,EAAE;IAAQ,CAAC,CAAC;EACxF;EACAP,QAAQ,CAACE,SAAS,CAACjB,SAAS,CAACc,OAAO,CAACY,cAAc,CAAC,EAAE;IAAEJ,UAAU,EAAE;EAAO,CAAC,CAAC;EAC7E,OAAOP,QAAQ;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}