{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { wrapAbortSignalLike } from \"../util/wrapAbortSignal.js\";\nexport const wrapAbortSignalLikePolicyName = \"wrapAbortSignalLikePolicy\";\n/**\n * Policy that ensure that any AbortSignalLike is wrapped in a native AbortSignal for processing by the pipeline.\n * Since the ts-http-runtime expects a native AbortSignal, this policy is used to ensure that any AbortSignalLike is wrapped in a native AbortSignal.\n *\n * @returns - created policy\n */\nexport function wrapAbortSignalLikePolicy() {\n  return {\n    name: wrapAbortSignalLikePolicyName,\n    sendRequest: function () {\n      var _ref = _asyncToGenerator(function* (request, next) {\n        if (!request.abortSignal) {\n          return next(request);\n        }\n        const {\n          abortSignal,\n          cleanup\n        } = wrapAbortSignalLike(request.abortSignal);\n        // eslint-disable-next-line no-param-reassign\n        request.abortSignal = abortSignal;\n        try {\n          return yield next(request);\n        } finally {\n          cleanup === null || cleanup === void 0 ? void 0 : cleanup();\n        }\n      });\n      return function sendRequest(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  };\n}\n//# sourceMappingURL=wrapAbortSignalLikePolicy.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}