{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getInstrumenter } from \"./instrumenter.js\";\nimport { knownContextKeys } from \"./tracingContext.js\";\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */\nexport function createTracingClient(options) {\n  const {\n    namespace,\n    packageName,\n    packageVersion\n  } = options;\n  function startSpan(name, operationOptions, spanOptions) {\n    var _a;\n    const startSpanResult = getInstrumenter().startSpan(name, Object.assign(Object.assign({}, spanOptions), {\n      packageName: packageName,\n      packageVersion: packageVersion,\n      tracingContext: (_a = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext\n    }));\n    let tracingContext = startSpanResult.tracingContext;\n    const span = startSpanResult.span;\n    if (!tracingContext.getValue(knownContextKeys.namespace)) {\n      tracingContext = tracingContext.setValue(knownContextKeys.namespace, namespace);\n    }\n    span.setAttribute(\"az.namespace\", tracingContext.getValue(knownContextKeys.namespace));\n    const updatedOptions = Object.assign({}, operationOptions, {\n      tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), {\n        tracingContext\n      })\n    });\n    return {\n      span,\n      updatedOptions\n    };\n  }\n  function withSpan(_x, _x2, _x3, _x4) {\n    return _withSpan.apply(this, arguments);\n  }\n  function _withSpan() {\n    _withSpan = _asyncToGenerator(function* (name, operationOptions, callback, spanOptions) {\n      const {\n        span,\n        updatedOptions\n      } = startSpan(name, operationOptions, spanOptions);\n      try {\n        const result = yield withContext(updatedOptions.tracingOptions.tracingContext, () => Promise.resolve(callback(updatedOptions, span)));\n        span.setStatus({\n          status: \"success\"\n        });\n        return result;\n      } catch (err) {\n        span.setStatus({\n          status: \"error\",\n          error: err\n        });\n        throw err;\n      } finally {\n        span.end();\n      }\n    });\n    return _withSpan.apply(this, arguments);\n  }\n  function withContext(context, callback, ...callbackArgs) {\n    return getInstrumenter().withContext(context, callback, ...callbackArgs);\n  }\n  /**\n   * Parses a traceparent header value into a span identifier.\n   *\n   * @param traceparentHeader - The traceparent header to parse.\n   * @returns An implementation-specific identifier for the span.\n   */\n  function parseTraceparentHeader(traceparentHeader) {\n    return getInstrumenter().parseTraceparentHeader(traceparentHeader);\n  }\n  /**\n   * Creates a set of request headers to propagate tracing information to a backend.\n   *\n   * @param tracingContext - The context containing the span to serialize.\n   * @returns The set of headers to add to a request.\n   */\n  function createRequestHeaders(tracingContext) {\n    return getInstrumenter().createRequestHeaders(tracingContext);\n  }\n  return {\n    startSpan,\n    withSpan,\n    withContext,\n    parseTraceparentHeader,\n    createRequestHeaders\n  };\n}","map":{"version":3,"names":["getInstrumenter","knownContextKeys","createTracingClient","options","namespace","packageName","packageVersion","startSpan","name","operationOptions","spanOptions","_a","startSpanResult","Object","assign","tracingContext","tracingOptions","span","getValue","setValue","setAttribute","updatedOptions","withSpan","_x","_x2","_x3","_x4","_withSpan","apply","arguments","_asyncToGenerator","callback","result","withContext","Promise","resolve","setStatus","status","err","error","end","context","callbackArgs","parseTraceparentHeader","traceparentHeader","createRequestHeaders"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-tracing/dist/browser/tracingClient.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getInstrumenter } from \"./instrumenter.js\";\nimport { knownContextKeys } from \"./tracingContext.js\";\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */\nexport function createTracingClient(options) {\n    const { namespace, packageName, packageVersion } = options;\n    function startSpan(name, operationOptions, spanOptions) {\n        var _a;\n        const startSpanResult = getInstrumenter().startSpan(name, Object.assign(Object.assign({}, spanOptions), { packageName: packageName, packageVersion: packageVersion, tracingContext: (_a = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext }));\n        let tracingContext = startSpanResult.tracingContext;\n        const span = startSpanResult.span;\n        if (!tracingContext.getValue(knownContextKeys.namespace)) {\n            tracingContext = tracingContext.setValue(knownContextKeys.namespace, namespace);\n        }\n        span.setAttribute(\"az.namespace\", tracingContext.getValue(knownContextKeys.namespace));\n        const updatedOptions = Object.assign({}, operationOptions, {\n            tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), { tracingContext }),\n        });\n        return {\n            span,\n            updatedOptions,\n        };\n    }\n    async function withSpan(name, operationOptions, callback, spanOptions) {\n        const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);\n        try {\n            const result = await withContext(updatedOptions.tracingOptions.tracingContext, () => Promise.resolve(callback(updatedOptions, span)));\n            span.setStatus({ status: \"success\" });\n            return result;\n        }\n        catch (err) {\n            span.setStatus({ status: \"error\", error: err });\n            throw err;\n        }\n        finally {\n            span.end();\n        }\n    }\n    function withContext(context, callback, ...callbackArgs) {\n        return getInstrumenter().withContext(context, callback, ...callbackArgs);\n    }\n    /**\n     * Parses a traceparent header value into a span identifier.\n     *\n     * @param traceparentHeader - The traceparent header to parse.\n     * @returns An implementation-specific identifier for the span.\n     */\n    function parseTraceparentHeader(traceparentHeader) {\n        return getInstrumenter().parseTraceparentHeader(traceparentHeader);\n    }\n    /**\n     * Creates a set of request headers to propagate tracing information to a backend.\n     *\n     * @param tracingContext - The context containing the span to serialize.\n     * @returns The set of headers to add to a request.\n     */\n    function createRequestHeaders(tracingContext) {\n        return getInstrumenter().createRequestHeaders(tracingContext);\n    }\n    return {\n        startSpan,\n        withSpan,\n        withContext,\n        parseTraceparentHeader,\n        createRequestHeaders,\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}