{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * promise.race() wrapper that aborts rest of promises as soon as the first promise settles.\n */\nexport function cancelablePromiseRace(_x, _x2) {\n  return _cancelablePromiseRace.apply(this, arguments);\n}\n//# sourceMappingURL=aborterUtils.js.map\nfunction _cancelablePromiseRace() {\n  _cancelablePromiseRace = _asyncToGenerator(function* (abortablePromiseBuilders, options) {\n    var _a, _b;\n    const aborter = new AbortController();\n    function abortHandler() {\n      aborter.abort();\n    }\n    (_a = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _a === void 0 ? void 0 : _a.addEventListener(\"abort\", abortHandler);\n    try {\n      return yield Promise.race(abortablePromiseBuilders.map(p => p({\n        abortSignal: aborter.signal\n      })));\n    } finally {\n      aborter.abort();\n      (_b = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _b === void 0 ? void 0 : _b.removeEventListener(\"abort\", abortHandler);\n    }\n  });\n  return _cancelablePromiseRace.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}