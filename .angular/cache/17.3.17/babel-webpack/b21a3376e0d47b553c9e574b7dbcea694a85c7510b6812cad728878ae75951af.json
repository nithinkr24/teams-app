{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AzureKeyCredential } from \"@azure/core-auth\";\n// TODO: update when connection string format is finalized\nconst CONNECTION_STRING_REGEX = /endpoint=(.*);accesskey=(.*)/i;\nconst tryParseConnectionString = s => {\n  const match = s.match(CONNECTION_STRING_REGEX);\n  if ((match === null || match === void 0 ? void 0 : match[1]) && match[2]) {\n    return {\n      endpoint: match[1],\n      credential: new AzureKeyCredential(match[2])\n    };\n  }\n  return undefined;\n};\n/**\n * Returns an EndpointCredential to easily access properties of the connection string.\n * @hidden\n *\n * @param connectionString - The connection string to parse\n * @returns Object to access the endpoint and the credentials\n */\nexport const parseConnectionString = connectionString => {\n  const parsedConnectionString = tryParseConnectionString(connectionString);\n  if (parsedConnectionString) {\n    return parsedConnectionString;\n  } else {\n    throw new Error(`Invalid connection string ${connectionString}`);\n  }\n};","map":{"version":3,"names":["AzureKeyCredential","CONNECTION_STRING_REGEX","tryParseConnectionString","s","match","endpoint","credential","undefined","parseConnectionString","connectionString","parsedConnectionString","Error"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/communication-common/dist/browser/credential/connectionString.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AzureKeyCredential } from \"@azure/core-auth\";\n// TODO: update when connection string format is finalized\nconst CONNECTION_STRING_REGEX = /endpoint=(.*);accesskey=(.*)/i;\nconst tryParseConnectionString = (s) => {\n    const match = s.match(CONNECTION_STRING_REGEX);\n    if ((match === null || match === void 0 ? void 0 : match[1]) && match[2]) {\n        return { endpoint: match[1], credential: new AzureKeyCredential(match[2]) };\n    }\n    return undefined;\n};\n/**\n * Returns an EndpointCredential to easily access properties of the connection string.\n * @hidden\n *\n * @param connectionString - The connection string to parse\n * @returns Object to access the endpoint and the credentials\n */\nexport const parseConnectionString = (connectionString) => {\n    const parsedConnectionString = tryParseConnectionString(connectionString);\n    if (parsedConnectionString) {\n        return parsedConnectionString;\n    }\n    else {\n        throw new Error(`Invalid connection string ${connectionString}`);\n    }\n};\n"],"mappings":"AAAA;AACA;AACA,SAASA,kBAAkB,QAAQ,kBAAkB;AACrD;AACA,MAAMC,uBAAuB,GAAG,+BAA+B;AAC/D,MAAMC,wBAAwB,GAAIC,CAAC,IAAK;EACpC,MAAMC,KAAK,GAAGD,CAAC,CAACC,KAAK,CAACH,uBAAuB,CAAC;EAC9C,IAAI,CAACG,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,KAAKA,KAAK,CAAC,CAAC,CAAC,EAAE;IACtE,OAAO;MAAEC,QAAQ,EAAED,KAAK,CAAC,CAAC,CAAC;MAAEE,UAAU,EAAE,IAAIN,kBAAkB,CAACI,KAAK,CAAC,CAAC,CAAC;IAAE,CAAC;EAC/E;EACA,OAAOG,SAAS;AACpB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAIC,gBAAgB,IAAK;EACvD,MAAMC,sBAAsB,GAAGR,wBAAwB,CAACO,gBAAgB,CAAC;EACzE,IAAIC,sBAAsB,EAAE;IACxB,OAAOA,sBAAsB;EACjC,CAAC,MACI;IACD,MAAM,IAAIC,KAAK,CAAC,6BAA6BF,gBAAgB,EAAE,CAAC;EACpE;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}