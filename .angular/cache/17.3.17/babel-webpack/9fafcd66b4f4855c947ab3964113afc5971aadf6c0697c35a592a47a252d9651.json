{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * A set of constants used internally when processing requests.\n */\nconst Constants = {\n  DefaultScope: \"/.default\",\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     */\n    AUTHORIZATION: \"authorization\"\n  }\n};\nfunction isUuid(text) {\n  return /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/.test(text);\n}\n/**\n * Defines a callback to handle auth challenge for Storage APIs.\n * This implements the bearer challenge process described here: https://learn.microsoft.com/rest/api/storageservices/authorize-with-azure-active-directory#bearer-challenge\n * Handling has specific features for storage that departs to the general AAD challenge docs.\n **/\nexport const authorizeRequestOnTenantChallenge = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (challengeOptions) {\n    var _a;\n    const requestOptions = requestToOptions(challengeOptions.request);\n    const challenge = getChallenge(challengeOptions.response);\n    if (challenge) {\n      const challengeInfo = parseChallenge(challenge);\n      const challengeScopes = buildScopes(challengeOptions, challengeInfo);\n      const tenantId = extractTenantId(challengeInfo);\n      if (!tenantId) {\n        return false;\n      }\n      const accessToken = yield challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), {\n        tenantId\n      }));\n      if (!accessToken) {\n        return false;\n      }\n      challengeOptions.request.headers.set(Constants.HeaderConstants.AUTHORIZATION, `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n      return true;\n    }\n    return false;\n  });\n  return function authorizeRequestOnTenantChallenge(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Extracts the tenant id from the challenge information\n * The tenant id is contained in the authorization_uri as the first\n * path part.\n */\nfunction extractTenantId(challengeInfo) {\n  const parsedAuthUri = new URL(challengeInfo.authorization_uri);\n  const pathSegments = parsedAuthUri.pathname.split(\"/\");\n  const tenantId = pathSegments[1];\n  if (tenantId && isUuid(tenantId)) {\n    return tenantId;\n  }\n  return undefined;\n}\n/**\n * Builds the authentication scopes based on the information that comes in the\n * challenge information. Scopes url is present in the resource_id, if it is empty\n * we keep using the original scopes.\n */\nfunction buildScopes(challengeOptions, challengeInfo) {\n  if (!challengeInfo.resource_id) {\n    return challengeOptions.scopes;\n  }\n  const challengeScopes = new URL(challengeInfo.resource_id);\n  challengeScopes.pathname = Constants.DefaultScope;\n  let scope = challengeScopes.toString();\n  if (scope === \"https://disk.azure.com/.default\") {\n    // the extra slash is required by the service\n    scope = \"https://disk.azure.com//.default\";\n  }\n  return [scope];\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n  if (response.status === 401 && challenge) {\n    return challenge;\n  }\n  return;\n}\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\nfunction parseChallenge(challenge) {\n  const bearerChallenge = challenge.slice(\"Bearer \".length);\n  const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter(x => x);\n  const keyValuePairs = challengeParts.map(keyValue => (([key, value]) => ({\n    [key]: value\n  }))(keyValue.trim().split(\"=\")));\n  // Key-value pairs to plain object:\n  return keyValuePairs.reduce((a, b) => Object.assign(Object.assign({}, a), b), {});\n}\n/**\n * Extracts the options form a Pipeline Request for later re-use\n */\nfunction requestToOptions(request) {\n  return {\n    abortSignal: request.abortSignal,\n    requestOptions: {\n      timeout: request.timeout\n    },\n    tracingOptions: request.tracingOptions\n  };\n}","map":{"version":3,"names":["Constants","DefaultScope","HeaderConstants","AUTHORIZATION","isUuid","text","test","authorizeRequestOnTenantChallenge","_ref","_asyncToGenerator","challengeOptions","_a","requestOptions","requestToOptions","request","challenge","getChallenge","response","challengeInfo","parseChallenge","challengeScopes","buildScopes","tenantId","extractTenantId","accessToken","getAccessToken","Object","assign","headers","set","tokenType","token","_x","apply","arguments","parsedAuthUri","URL","authorization_uri","pathSegments","pathname","split","undefined","resource_id","scopes","scope","toString","get","status","bearerChallenge","slice","length","challengeParts","trim","filter","x","keyValuePairs","map","keyValue","key","value","reduce","a","b","abortSignal","timeout","tracingOptions"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-client/dist/browser/authorizeRequestOnTenantChallenge.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * A set of constants used internally when processing requests.\n */\nconst Constants = {\n    DefaultScope: \"/.default\",\n    /**\n     * Defines constants for use with HTTP headers.\n     */\n    HeaderConstants: {\n        /**\n         * The Authorization header.\n         */\n        AUTHORIZATION: \"authorization\",\n    },\n};\nfunction isUuid(text) {\n    return /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/.test(text);\n}\n/**\n * Defines a callback to handle auth challenge for Storage APIs.\n * This implements the bearer challenge process described here: https://learn.microsoft.com/rest/api/storageservices/authorize-with-azure-active-directory#bearer-challenge\n * Handling has specific features for storage that departs to the general AAD challenge docs.\n **/\nexport const authorizeRequestOnTenantChallenge = async (challengeOptions) => {\n    var _a;\n    const requestOptions = requestToOptions(challengeOptions.request);\n    const challenge = getChallenge(challengeOptions.response);\n    if (challenge) {\n        const challengeInfo = parseChallenge(challenge);\n        const challengeScopes = buildScopes(challengeOptions, challengeInfo);\n        const tenantId = extractTenantId(challengeInfo);\n        if (!tenantId) {\n            return false;\n        }\n        const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), { tenantId }));\n        if (!accessToken) {\n            return false;\n        }\n        challengeOptions.request.headers.set(Constants.HeaderConstants.AUTHORIZATION, `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n        return true;\n    }\n    return false;\n};\n/**\n * Extracts the tenant id from the challenge information\n * The tenant id is contained in the authorization_uri as the first\n * path part.\n */\nfunction extractTenantId(challengeInfo) {\n    const parsedAuthUri = new URL(challengeInfo.authorization_uri);\n    const pathSegments = parsedAuthUri.pathname.split(\"/\");\n    const tenantId = pathSegments[1];\n    if (tenantId && isUuid(tenantId)) {\n        return tenantId;\n    }\n    return undefined;\n}\n/**\n * Builds the authentication scopes based on the information that comes in the\n * challenge information. Scopes url is present in the resource_id, if it is empty\n * we keep using the original scopes.\n */\nfunction buildScopes(challengeOptions, challengeInfo) {\n    if (!challengeInfo.resource_id) {\n        return challengeOptions.scopes;\n    }\n    const challengeScopes = new URL(challengeInfo.resource_id);\n    challengeScopes.pathname = Constants.DefaultScope;\n    let scope = challengeScopes.toString();\n    if (scope === \"https://disk.azure.com/.default\") {\n        // the extra slash is required by the service\n        scope = \"https://disk.azure.com//.default\";\n    }\n    return [scope];\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (response.status === 401 && challenge) {\n        return challenge;\n    }\n    return;\n}\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\nfunction parseChallenge(challenge) {\n    const bearerChallenge = challenge.slice(\"Bearer \".length);\n    const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter((x) => x);\n    const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split(\"=\")));\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n}\n/**\n * Extracts the options form a Pipeline Request for later re-use\n */\nfunction requestToOptions(request) {\n    return {\n        abortSignal: request.abortSignal,\n        requestOptions: {\n            timeout: request.timeout,\n        },\n        tracingOptions: request.tracingOptions,\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}