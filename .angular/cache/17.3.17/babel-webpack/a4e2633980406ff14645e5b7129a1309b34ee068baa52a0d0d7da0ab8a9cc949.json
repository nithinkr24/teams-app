{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logPolicy } from \"./policies/logPolicy.js\";\nimport { createEmptyPipeline } from \"./pipeline.js\";\nimport { redirectPolicy } from \"./policies/redirectPolicy.js\";\nimport { userAgentPolicy } from \"./policies/userAgentPolicy.js\";\nimport { multipartPolicy, multipartPolicyName } from \"./policies/multipartPolicy.js\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy.js\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy.js\";\nimport { formDataPolicy } from \"./policies/formDataPolicy.js\";\nimport { isNodeLike } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy.js\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy.js\";\nimport { agentPolicy } from \"./policies/agentPolicy.js\";\nimport { tlsPolicy } from \"./policies/tlsPolicy.js\";\nimport { tracingPolicy } from \"./policies/tracingPolicy.js\";\nimport { wrapAbortSignalLikePolicy } from \"./policies/wrapAbortSignalLikePolicy.js\";\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options) {\n  var _a;\n  const pipeline = createEmptyPipeline();\n  if (isNodeLike) {\n    if (options.agent) {\n      pipeline.addPolicy(agentPolicy(options.agent));\n    }\n    if (options.tlsOptions) {\n      pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n    }\n    pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n    pipeline.addPolicy(decompressResponsePolicy());\n  }\n  pipeline.addPolicy(wrapAbortSignalLikePolicy());\n  pipeline.addPolicy(formDataPolicy(), {\n    beforePolicies: [multipartPolicyName]\n  });\n  pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n  pipeline.addPolicy(setClientRequestIdPolicy((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));\n  // The multipart policy is added after policies with no phase, so that\n  // policies can be added between it and formDataPolicy to modify\n  // properties (e.g., making the boundary constant in recorded tests).\n  pipeline.addPolicy(multipartPolicy(), {\n    afterPhase: \"Deserialize\"\n  });\n  pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), {\n    phase: \"Retry\"\n  });\n  pipeline.addPolicy(tracingPolicy(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {\n    afterPhase: \"Retry\"\n  });\n  if (isNodeLike) {\n    // Both XHR and Fetch expect to handle redirects automatically,\n    // so only include this policy when we're in Node.\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), {\n      afterPhase: \"Retry\"\n    });\n  }\n  pipeline.addPolicy(logPolicy(options.loggingOptions), {\n    afterPhase: \"Sign\"\n  });\n  return pipeline;\n}","map":{"version":3,"names":["logPolicy","createEmptyPipeline","redirectPolicy","userAgentPolicy","multipartPolicy","multipartPolicyName","decompressResponsePolicy","defaultRetryPolicy","formDataPolicy","isNodeLike","proxyPolicy","setClientRequestIdPolicy","agentPolicy","tlsPolicy","tracingPolicy","wrapAbortSignalLikePolicy","createPipelineFromOptions","options","_a","pipeline","agent","addPolicy","tlsOptions","proxyOptions","beforePolicies","userAgentOptions","telemetryOptions","clientRequestIdHeaderName","afterPhase","retryOptions","phase","Object","assign","loggingOptions","redirectOptions"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-rest-pipeline/dist/browser/createPipelineFromOptions.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logPolicy } from \"./policies/logPolicy.js\";\nimport { createEmptyPipeline } from \"./pipeline.js\";\nimport { redirectPolicy } from \"./policies/redirectPolicy.js\";\nimport { userAgentPolicy } from \"./policies/userAgentPolicy.js\";\nimport { multipartPolicy, multipartPolicyName } from \"./policies/multipartPolicy.js\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy.js\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy.js\";\nimport { formDataPolicy } from \"./policies/formDataPolicy.js\";\nimport { isNodeLike } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy.js\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy.js\";\nimport { agentPolicy } from \"./policies/agentPolicy.js\";\nimport { tlsPolicy } from \"./policies/tlsPolicy.js\";\nimport { tracingPolicy } from \"./policies/tracingPolicy.js\";\nimport { wrapAbortSignalLikePolicy } from \"./policies/wrapAbortSignalLikePolicy.js\";\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options) {\n    var _a;\n    const pipeline = createEmptyPipeline();\n    if (isNodeLike) {\n        if (options.agent) {\n            pipeline.addPolicy(agentPolicy(options.agent));\n        }\n        if (options.tlsOptions) {\n            pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n        }\n        pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n        pipeline.addPolicy(decompressResponsePolicy());\n    }\n    pipeline.addPolicy(wrapAbortSignalLikePolicy());\n    pipeline.addPolicy(formDataPolicy(), { beforePolicies: [multipartPolicyName] });\n    pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n    pipeline.addPolicy(setClientRequestIdPolicy((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));\n    // The multipart policy is added after policies with no phase, so that\n    // policies can be added between it and formDataPolicy to modify\n    // properties (e.g., making the boundary constant in recorded tests).\n    pipeline.addPolicy(multipartPolicy(), { afterPhase: \"Deserialize\" });\n    pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy(tracingPolicy(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {\n        afterPhase: \"Retry\",\n    });\n    if (isNodeLike) {\n        // Both XHR and Fetch expect to handle redirects automatically,\n        // so only include this policy when we're in Node.\n        pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n    }\n    pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Sign\" });\n    return pipeline;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,mBAAmB,QAAQ,eAAe;AACnD,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,eAAe,EAAEC,mBAAmB,QAAQ,+BAA+B;AACpF,SAASC,wBAAwB,QAAQ,wCAAwC;AACjF,SAASC,kBAAkB,QAAQ,kCAAkC;AACrE,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,wBAAwB,QAAQ,wCAAwC;AACjF,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,yBAAyB,QAAQ,yCAAyC;AACnF;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAACC,OAAO,EAAE;EAC/C,IAAIC,EAAE;EACN,MAAMC,QAAQ,GAAGlB,mBAAmB,CAAC,CAAC;EACtC,IAAIQ,UAAU,EAAE;IACZ,IAAIQ,OAAO,CAACG,KAAK,EAAE;MACfD,QAAQ,CAACE,SAAS,CAACT,WAAW,CAACK,OAAO,CAACG,KAAK,CAAC,CAAC;IAClD;IACA,IAAIH,OAAO,CAACK,UAAU,EAAE;MACpBH,QAAQ,CAACE,SAAS,CAACR,SAAS,CAACI,OAAO,CAACK,UAAU,CAAC,CAAC;IACrD;IACAH,QAAQ,CAACE,SAAS,CAACX,WAAW,CAACO,OAAO,CAACM,YAAY,CAAC,CAAC;IACrDJ,QAAQ,CAACE,SAAS,CAACf,wBAAwB,CAAC,CAAC,CAAC;EAClD;EACAa,QAAQ,CAACE,SAAS,CAACN,yBAAyB,CAAC,CAAC,CAAC;EAC/CI,QAAQ,CAACE,SAAS,CAACb,cAAc,CAAC,CAAC,EAAE;IAAEgB,cAAc,EAAE,CAACnB,mBAAmB;EAAE,CAAC,CAAC;EAC/Ec,QAAQ,CAACE,SAAS,CAAClB,eAAe,CAACc,OAAO,CAACQ,gBAAgB,CAAC,CAAC;EAC7DN,QAAQ,CAACE,SAAS,CAACV,wBAAwB,CAAC,CAACO,EAAE,GAAGD,OAAO,CAACS,gBAAgB,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACS,yBAAyB,CAAC,CAAC;EAC/I;EACA;EACA;EACAR,QAAQ,CAACE,SAAS,CAACjB,eAAe,CAAC,CAAC,EAAE;IAAEwB,UAAU,EAAE;EAAc,CAAC,CAAC;EACpET,QAAQ,CAACE,SAAS,CAACd,kBAAkB,CAACU,OAAO,CAACY,YAAY,CAAC,EAAE;IAAEC,KAAK,EAAE;EAAQ,CAAC,CAAC;EAChFX,QAAQ,CAACE,SAAS,CAACP,aAAa,CAACiB,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEf,OAAO,CAACQ,gBAAgB,CAAC,EAAER,OAAO,CAACgB,cAAc,CAAC,CAAC,EAAE;IAClHL,UAAU,EAAE;EAChB,CAAC,CAAC;EACF,IAAInB,UAAU,EAAE;IACZ;IACA;IACAU,QAAQ,CAACE,SAAS,CAACnB,cAAc,CAACe,OAAO,CAACiB,eAAe,CAAC,EAAE;MAAEN,UAAU,EAAE;IAAQ,CAAC,CAAC;EACxF;EACAT,QAAQ,CAACE,SAAS,CAACrB,SAAS,CAACiB,OAAO,CAACgB,cAAc,CAAC,EAAE;IAAEL,UAAU,EAAE;EAAO,CAAC,CAAC;EAC7E,OAAOT,QAAQ;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}