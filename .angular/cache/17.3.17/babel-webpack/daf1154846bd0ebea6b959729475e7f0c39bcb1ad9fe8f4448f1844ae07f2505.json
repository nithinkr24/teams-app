{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { __rest } from \"tslib\";\nimport { deserializeCommunicationIdentifier, serializeCommunicationIdentifier } from \"@azure/communication-common\";\nexport const mapToCreateChatThreadOptionsRestModel = options => {\n  const {\n      participants,\n      idempotencyToken\n    } = options,\n    rest = __rest(options, [\"participants\", \"idempotencyToken\"]);\n  return Object.assign({\n    repeatabilityRequestId: idempotencyToken\n  }, rest);\n};\n/**\n * @internal\n * Mapping chat participant customer model to chat participant REST model\n */\nexport const mapToChatParticipantRestModel = chatParticipant => {\n  const {\n      id\n    } = chatParticipant,\n    rest = __rest(chatParticipant, [\"id\"]);\n  return Object.assign(Object.assign({}, rest), {\n    communicationIdentifier: serializeCommunicationIdentifier(id)\n  });\n};\n/**\n * @internal\n * Mapping add participants request to add chat participants request REST model\n */\nexport const mapToAddChatParticipantsRequestRestModel = addParticipantsRequest => {\n  var _a;\n  return {\n    participants: (_a = addParticipantsRequest.participants) === null || _a === void 0 ? void 0 : _a.map(participant => mapToChatParticipantRestModel(participant))\n  };\n};\n/**\n * @internal\n * Mapping chat participant REST model to chat participant SDK model\n */\nexport const mapToChatParticipantSdkModel = chatParticipant => {\n  const {\n      communicationIdentifier\n    } = chatParticipant,\n    rest = __rest(chatParticipant, [\"communicationIdentifier\"]);\n  return Object.assign(Object.assign({}, rest), {\n    id: deserializeCommunicationIdentifier(communicationIdentifier)\n  });\n};\n/**\n * @internal\n */\nexport const mapToChatContentSdkModel = content => {\n  const {\n      participants,\n      initiatorCommunicationIdentifier\n    } = content,\n    otherChatContents = __rest(content, [\"participants\", \"initiatorCommunicationIdentifier\"]);\n  let result = Object.assign({}, otherChatContents);\n  if (initiatorCommunicationIdentifier) {\n    const initiator = deserializeCommunicationIdentifier(initiatorCommunicationIdentifier);\n    result = Object.assign(Object.assign({}, result), {\n      initiator\n    });\n  }\n  if (participants) {\n    result = Object.assign(Object.assign({}, result), {\n      participants: participants === null || participants === void 0 ? void 0 : participants.map(participant => mapToChatParticipantSdkModel(participant))\n    });\n  }\n  return result;\n};\n/**\n * @internal\n * Mapping chat message REST model to chat message SDK model\n */\nexport const mapToChatMessageSdkModel = chatMessage => {\n  const {\n      content,\n      senderCommunicationIdentifier\n    } = chatMessage,\n    otherChatMessage = __rest(chatMessage, [\"content\", \"senderCommunicationIdentifier\"]);\n  let result = Object.assign({}, otherChatMessage);\n  if (content) {\n    result = Object.assign(Object.assign({}, result), {\n      content: mapToChatContentSdkModel(content)\n    });\n  }\n  if (senderCommunicationIdentifier) {\n    const sender = deserializeCommunicationIdentifier(senderCommunicationIdentifier);\n    result = Object.assign(Object.assign({}, result), {\n      sender\n    });\n  }\n  return result;\n};\n/**\n * @internal\n * Mapping chat messages collection REST model to chat message SDK model array\n */\nexport const mapToChatMessagesSdkModelArray = chatMessagesCollection => {\n  var _a;\n  return (_a = chatMessagesCollection.value) === null || _a === void 0 ? void 0 : _a.map(chatMessage => mapToChatMessageSdkModel(chatMessage));\n};\n/**\n * @internal\n * Mapping chat retention policy REST model to chat retention policy SDK model\n */\nexport const mapToRetentionPolicySdkModel = retentionPolicy => {\n  if (retentionPolicy.kind === \"threadCreationDate\") {\n    return retentionPolicy;\n  }\n  if (retentionPolicy.kind === \"none\") {\n    return retentionPolicy;\n  } else {\n    throw new Error(`Retention Policy ${retentionPolicy.kind} is not supported`);\n  }\n};\n/**\n * @internal\n * Mapping chat thread REST model to chat thread SDK model\n */\nexport const mapToChatThreadPropertiesSdkModel = chatThread => {\n  const {\n      createdByCommunicationIdentifier,\n      retentionPolicy\n    } = chatThread,\n    rest = __rest(chatThread, [\"createdByCommunicationIdentifier\", \"retentionPolicy\"]);\n  let result = Object.assign({}, rest);\n  if (createdByCommunicationIdentifier) {\n    result = Object.assign(Object.assign({}, result), {\n      createdBy: deserializeCommunicationIdentifier(createdByCommunicationIdentifier)\n    });\n  }\n  if (retentionPolicy) {\n    result = Object.assign(Object.assign({}, result), {\n      retentionPolicy: mapToRetentionPolicySdkModel(retentionPolicy)\n    });\n  }\n  return result;\n};\n/**\n * @internal\n * Mapping chat thread REST model to chat thread SDK model\n */\nexport const mapToCreateChatThreadResultSdkModel = result => {\n  const {\n      chatThread\n    } = result,\n    rest = __rest(result, [\"chatThread\"]);\n  if (chatThread) {\n    return Object.assign(Object.assign({}, rest), {\n      chatThread: mapToChatThreadPropertiesSdkModel(chatThread)\n    });\n  } else {\n    return Object.assign({}, rest);\n  }\n};\n/**\n * @internal\n * Mapping read receipt REST model to read receipt SDK model\n */\nexport const mapToReadReceiptSdkModel = readReceipt => {\n  const {\n      senderCommunicationIdentifier\n    } = readReceipt,\n    rest = __rest(readReceipt, [\"senderCommunicationIdentifier\"]);\n  return Object.assign(Object.assign({}, rest), {\n    sender: deserializeCommunicationIdentifier(senderCommunicationIdentifier)\n  });\n};\n//# sourceMappingURL=mappers.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}