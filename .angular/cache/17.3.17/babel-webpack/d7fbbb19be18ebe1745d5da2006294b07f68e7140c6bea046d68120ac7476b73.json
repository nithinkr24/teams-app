{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createClientLogger } from \"@azure/logger\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\nimport { retryPolicy as tspRetryPolicy } from \"@typespec/ts-http-runtime/internal/policies\";\nconst retryPolicyLogger = createClientLogger(\"core-rest-pipeline retryPolicy\");\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */\nexport function retryPolicy(strategies, options = {\n  maxRetries: DEFAULT_RETRY_POLICY_COUNT\n}) {\n  // Cast is required since the TSP runtime retry strategy type is slightly different\n  // very deep down (using real AbortSignal vs. AbortSignalLike in RestError).\n  // In practice the difference doesn't actually matter.\n  return tspRetryPolicy(strategies, Object.assign({\n    logger: retryPolicyLogger\n  }, options));\n}","map":{"version":3,"names":["createClientLogger","DEFAULT_RETRY_POLICY_COUNT","retryPolicy","tspRetryPolicy","retryPolicyLogger","strategies","options","maxRetries","Object","assign","logger"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createClientLogger } from \"@azure/logger\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\nimport { retryPolicy as tspRetryPolicy, } from \"@typespec/ts-http-runtime/internal/policies\";\nconst retryPolicyLogger = createClientLogger(\"core-rest-pipeline retryPolicy\");\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */\nexport function retryPolicy(strategies, options = { maxRetries: DEFAULT_RETRY_POLICY_COUNT }) {\n    // Cast is required since the TSP runtime retry strategy type is slightly different\n    // very deep down (using real AbortSignal vs. AbortSignalLike in RestError).\n    // In practice the difference doesn't actually matter.\n    return tspRetryPolicy(strategies, Object.assign({ logger: retryPolicyLogger }, options));\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,kBAAkB,QAAQ,eAAe;AAClD,SAASC,0BAA0B,QAAQ,iBAAiB;AAC5D,SAASC,WAAW,IAAIC,cAAc,QAAS,6CAA6C;AAC5F,MAAMC,iBAAiB,GAAGJ,kBAAkB,CAAC,gCAAgC,CAAC;AAC9E;AACA;AACA;AACA,OAAO,SAASE,WAAWA,CAACG,UAAU,EAAEC,OAAO,GAAG;EAAEC,UAAU,EAAEN;AAA2B,CAAC,EAAE;EAC1F;EACA;EACA;EACA,OAAOE,cAAc,CAACE,UAAU,EAAEG,MAAM,CAACC,MAAM,CAAC;IAAEC,MAAM,EAAEN;EAAkB,CAAC,EAAEE,OAAO,CAAC,CAAC;AAC5F","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}