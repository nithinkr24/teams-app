{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createDefaultPipeline } from \"./clientHelpers.js\";\nimport { sendRequest } from \"./sendRequest.js\";\nimport { buildRequestUrl } from \"./urlHelpers.js\";\nimport { isNodeLike } from \"../util/checkEnvironment.js\";\n/**\n * Creates a client with a default pipeline\n * @param endpoint - Base endpoint for the client\n * @param credentials - Credentials to authenticate the requests\n * @param options - Client options\n */\nexport function getClient(endpoint, clientOptions = {}) {\n  var _a, _b, _c;\n  const pipeline = (_a = clientOptions.pipeline) !== null && _a !== void 0 ? _a : createDefaultPipeline(clientOptions);\n  if ((_b = clientOptions.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {\n    for (const {\n      policy,\n      position\n    } of clientOptions.additionalPolicies) {\n      // Sign happens after Retry and is commonly needed to occur\n      // before policies that intercept post-retry.\n      const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n      pipeline.addPolicy(policy, {\n        afterPhase\n      });\n    }\n  }\n  const {\n    allowInsecureConnection,\n    httpClient\n  } = clientOptions;\n  const endpointUrl = (_c = clientOptions.endpoint) !== null && _c !== void 0 ? _c : endpoint;\n  const client = (path, ...args) => {\n    const getUrl = requestOptions => buildRequestUrl(endpointUrl, path, args, Object.assign({\n      allowInsecureConnection\n    }, requestOptions));\n    return {\n      get: (requestOptions = {}) => {\n        return buildOperation(\"GET\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      post: (requestOptions = {}) => {\n        return buildOperation(\"POST\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      put: (requestOptions = {}) => {\n        return buildOperation(\"PUT\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      patch: (requestOptions = {}) => {\n        return buildOperation(\"PATCH\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      delete: (requestOptions = {}) => {\n        return buildOperation(\"DELETE\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      head: (requestOptions = {}) => {\n        return buildOperation(\"HEAD\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      options: (requestOptions = {}) => {\n        return buildOperation(\"OPTIONS\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      trace: (requestOptions = {}) => {\n        return buildOperation(\"TRACE\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      }\n    };\n  };\n  return {\n    path: client,\n    pathUnchecked: client,\n    pipeline\n  };\n}\nfunction buildOperation(method, url, pipeline, options, allowInsecureConnection, httpClient) {\n  var _a;\n  allowInsecureConnection = (_a = options.allowInsecureConnection) !== null && _a !== void 0 ? _a : allowInsecureConnection;\n  return {\n    then: function (onFulfilled, onrejected) {\n      return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), {\n        allowInsecureConnection\n      }), httpClient).then(onFulfilled, onrejected);\n    },\n    asBrowserStream() {\n      return _asyncToGenerator(function* () {\n        if (isNodeLike) {\n          throw new Error(\"`asBrowserStream` is supported only in the browser environment. Use `asNodeStream` instead to obtain the response body stream. If you require a Web stream of the response in Node, consider using `Readable.toWeb` on the result of `asNodeStream`.\");\n        } else {\n          return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), {\n            allowInsecureConnection,\n            responseAsStream: true\n          }), httpClient);\n        }\n      })();\n    },\n    asNodeStream() {\n      return _asyncToGenerator(function* () {\n        if (isNodeLike) {\n          return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), {\n            allowInsecureConnection,\n            responseAsStream: true\n          }), httpClient);\n        } else {\n          throw new Error(\"`isNodeStream` is not supported in the browser environment. Use `asBrowserStream` to obtain the response body stream.\");\n        }\n      })();\n    }\n  };\n}","map":{"version":3,"names":["createDefaultPipeline","sendRequest","buildRequestUrl","isNodeLike","getClient","endpoint","clientOptions","_a","_b","_c","pipeline","additionalPolicies","length","policy","position","afterPhase","undefined","addPolicy","allowInsecureConnection","httpClient","endpointUrl","client","path","args","getUrl","requestOptions","Object","assign","get","buildOperation","post","put","patch","delete","head","options","trace","pathUnchecked","method","url","then","onFulfilled","onrejected","asBrowserStream","_asyncToGenerator","Error","responseAsStream","asNodeStream"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/client/getClient.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createDefaultPipeline } from \"./clientHelpers.js\";\nimport { sendRequest } from \"./sendRequest.js\";\nimport { buildRequestUrl } from \"./urlHelpers.js\";\nimport { isNodeLike } from \"../util/checkEnvironment.js\";\n/**\n * Creates a client with a default pipeline\n * @param endpoint - Base endpoint for the client\n * @param credentials - Credentials to authenticate the requests\n * @param options - Client options\n */\nexport function getClient(endpoint, clientOptions = {}) {\n    var _a, _b, _c;\n    const pipeline = (_a = clientOptions.pipeline) !== null && _a !== void 0 ? _a : createDefaultPipeline(clientOptions);\n    if ((_b = clientOptions.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {\n        for (const { policy, position } of clientOptions.additionalPolicies) {\n            // Sign happens after Retry and is commonly needed to occur\n            // before policies that intercept post-retry.\n            const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n            pipeline.addPolicy(policy, {\n                afterPhase,\n            });\n        }\n    }\n    const { allowInsecureConnection, httpClient } = clientOptions;\n    const endpointUrl = (_c = clientOptions.endpoint) !== null && _c !== void 0 ? _c : endpoint;\n    const client = (path, ...args) => {\n        const getUrl = (requestOptions) => buildRequestUrl(endpointUrl, path, args, Object.assign({ allowInsecureConnection }, requestOptions));\n        return {\n            get: (requestOptions = {}) => {\n                return buildOperation(\"GET\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n            },\n            post: (requestOptions = {}) => {\n                return buildOperation(\"POST\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n            },\n            put: (requestOptions = {}) => {\n                return buildOperation(\"PUT\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n            },\n            patch: (requestOptions = {}) => {\n                return buildOperation(\"PATCH\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n            },\n            delete: (requestOptions = {}) => {\n                return buildOperation(\"DELETE\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n            },\n            head: (requestOptions = {}) => {\n                return buildOperation(\"HEAD\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n            },\n            options: (requestOptions = {}) => {\n                return buildOperation(\"OPTIONS\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n            },\n            trace: (requestOptions = {}) => {\n                return buildOperation(\"TRACE\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n            },\n        };\n    };\n    return {\n        path: client,\n        pathUnchecked: client,\n        pipeline,\n    };\n}\nfunction buildOperation(method, url, pipeline, options, allowInsecureConnection, httpClient) {\n    var _a;\n    allowInsecureConnection = (_a = options.allowInsecureConnection) !== null && _a !== void 0 ? _a : allowInsecureConnection;\n    return {\n        then: function (onFulfilled, onrejected) {\n            return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), { allowInsecureConnection }), httpClient).then(onFulfilled, onrejected);\n        },\n        async asBrowserStream() {\n            if (isNodeLike) {\n                throw new Error(\"`asBrowserStream` is supported only in the browser environment. Use `asNodeStream` instead to obtain the response body stream. If you require a Web stream of the response in Node, consider using `Readable.toWeb` on the result of `asNodeStream`.\");\n            }\n            else {\n                return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), { allowInsecureConnection, responseAsStream: true }), httpClient);\n            }\n        },\n        async asNodeStream() {\n            if (isNodeLike) {\n                return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), { allowInsecureConnection, responseAsStream: true }), httpClient);\n            }\n            else {\n                throw new Error(\"`isNodeStream` is not supported in the browser environment. Use `asBrowserStream` to obtain the response body stream.\");\n            }\n        },\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}