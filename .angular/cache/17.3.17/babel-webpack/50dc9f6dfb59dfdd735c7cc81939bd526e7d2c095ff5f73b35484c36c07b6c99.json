{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { shaHMAC, shaHash } from \"./cryptoUtils.js\";\nimport { isNodeLike } from \"@azure/core-util\";\n/**\n * CommunicationKeyCredentialPolicy provides a means of signing requests made through\n * the SmsClient.\n */\nconst communicationAccessKeyCredentialPolicy = \"CommunicationAccessKeyCredentialPolicy\";\n/**\n * Creates an HTTP pipeline policy to authenticate a request using a `KeyCredential`.\n * @hidden\n *\n * @param credential - The key credential.\n */\nexport function createCommunicationAccessKeyCredentialPolicy(credential) {\n  return {\n    name: communicationAccessKeyCredentialPolicy,\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        var _a;\n        const verb = request.method.toUpperCase();\n        const utcNow = new Date().toUTCString();\n        const contentHash = yield shaHash(((_a = request.body) === null || _a === void 0 ? void 0 : _a.toString()) || \"\");\n        const dateHeader = \"x-ms-date\";\n        const signedHeaders = `${dateHeader};host;x-ms-content-sha256`;\n        const url = new URL(request.url);\n        const query = url.searchParams.toString();\n        const urlPathAndQuery = query ? `${url.pathname}?${query}` : url.pathname;\n        const port = url.port;\n        const hostAndPort = port ? `${url.host}:${port}` : url.host;\n        const stringToSign = `${verb}\\n${urlPathAndQuery}\\n${utcNow};${hostAndPort};${contentHash}`;\n        const signature = yield shaHMAC(credential.key, stringToSign);\n        if (isNodeLike) {\n          request.headers.set(\"Host\", hostAndPort || \"\");\n        }\n        request.headers.set(dateHeader, utcNow);\n        request.headers.set(\"x-ms-content-sha256\", contentHash);\n        request.headers.set(\"Authorization\", `HMAC-SHA256 SignedHeaders=${signedHeaders}&Signature=${signature}`);\n        return next(request);\n      })();\n    }\n  };\n}\n//# sourceMappingURL=communicationAccessKeyCredentialPolicy.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}