{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes, format) {\n  switch (format) {\n    case \"utf-8\":\n      return uint8ArrayToUtf8String(bytes);\n    case \"base64\":\n      return uint8ArrayToBase64(bytes);\n    case \"base64url\":\n      return uint8ArrayToBase64Url(bytes);\n    case \"hex\":\n      return uint8ArrayToHexString(bytes);\n  }\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value, format) {\n  switch (format) {\n    case \"utf-8\":\n      return utf8StringToUint8Array(value);\n    case \"base64\":\n      return base64ToUint8Array(value);\n    case \"base64url\":\n      return base64UrlToUint8Array(value);\n    case \"hex\":\n      return hexStringToUint8Array(value);\n  }\n}\n/**\n * Decodes a Uint8Array into a Base64 string.\n * @internal\n */\nexport function uint8ArrayToBase64(bytes) {\n  return btoa([...bytes].map(x => String.fromCharCode(x)).join(\"\"));\n}\n/**\n * Decodes a Uint8Array into a Base64Url string.\n * @internal\n */\nexport function uint8ArrayToBase64Url(bytes) {\n  return uint8ArrayToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n/**\n * Decodes a Uint8Array into a javascript string.\n * @internal\n */\nexport function uint8ArrayToUtf8String(bytes) {\n  const decoder = new TextDecoder();\n  const dataString = decoder.decode(bytes);\n  return dataString;\n}\n/**\n * Decodes a Uint8Array into a hex string\n * @internal\n */\nexport function uint8ArrayToHexString(bytes) {\n  return [...bytes].map(x => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\n/**\n * Encodes a JavaScript string into a Uint8Array.\n * @internal\n */\nexport function utf8StringToUint8Array(value) {\n  return new TextEncoder().encode(value);\n}\n/**\n * Encodes a Base64 string into a Uint8Array.\n * @internal\n */\nexport function base64ToUint8Array(value) {\n  return new Uint8Array([...atob(value)].map(x => x.charCodeAt(0)));\n}\n/**\n * Encodes a Base64Url string into a Uint8Array.\n * @internal\n */\nexport function base64UrlToUint8Array(value) {\n  const base64String = value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return base64ToUint8Array(base64String);\n}\nconst hexDigits = new Set(\"0123456789abcdefABCDEF\");\n/**\n * Encodes a hex string into a Uint8Array\n * @internal\n */\nexport function hexStringToUint8Array(value) {\n  // If value has odd length, the last character will be ignored, consistent with NodeJS Buffer behavior\n  const bytes = new Uint8Array(value.length / 2);\n  for (let i = 0; i < value.length / 2; ++i) {\n    const highNibble = value[2 * i];\n    const lowNibble = value[2 * i + 1];\n    if (!hexDigits.has(highNibble) || !hexDigits.has(lowNibble)) {\n      // Replicate Node Buffer behavior by exiting early when we encounter an invalid byte\n      return bytes.slice(0, i);\n    }\n    bytes[i] = parseInt(`${highNibble}${lowNibble}`, 16);\n  }\n  return bytes;\n}","map":{"version":3,"names":["uint8ArrayToString","bytes","format","uint8ArrayToUtf8String","uint8ArrayToBase64","uint8ArrayToBase64Url","uint8ArrayToHexString","stringToUint8Array","value","utf8StringToUint8Array","base64ToUint8Array","base64UrlToUint8Array","hexStringToUint8Array","btoa","map","x","String","fromCharCode","join","replace","decoder","TextDecoder","dataString","decode","toString","padStart","TextEncoder","encode","Uint8Array","atob","charCodeAt","base64String","hexDigits","Set","length","i","highNibble","lowNibble","has","slice","parseInt"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/util/bytesEncoding.common.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes, format) {\n    switch (format) {\n        case \"utf-8\":\n            return uint8ArrayToUtf8String(bytes);\n        case \"base64\":\n            return uint8ArrayToBase64(bytes);\n        case \"base64url\":\n            return uint8ArrayToBase64Url(bytes);\n        case \"hex\":\n            return uint8ArrayToHexString(bytes);\n    }\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value, format) {\n    switch (format) {\n        case \"utf-8\":\n            return utf8StringToUint8Array(value);\n        case \"base64\":\n            return base64ToUint8Array(value);\n        case \"base64url\":\n            return base64UrlToUint8Array(value);\n        case \"hex\":\n            return hexStringToUint8Array(value);\n    }\n}\n/**\n * Decodes a Uint8Array into a Base64 string.\n * @internal\n */\nexport function uint8ArrayToBase64(bytes) {\n    return btoa([...bytes].map((x) => String.fromCharCode(x)).join(\"\"));\n}\n/**\n * Decodes a Uint8Array into a Base64Url string.\n * @internal\n */\nexport function uint8ArrayToBase64Url(bytes) {\n    return uint8ArrayToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n/**\n * Decodes a Uint8Array into a javascript string.\n * @internal\n */\nexport function uint8ArrayToUtf8String(bytes) {\n    const decoder = new TextDecoder();\n    const dataString = decoder.decode(bytes);\n    return dataString;\n}\n/**\n * Decodes a Uint8Array into a hex string\n * @internal\n */\nexport function uint8ArrayToHexString(bytes) {\n    return [...bytes].map((x) => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\n/**\n * Encodes a JavaScript string into a Uint8Array.\n * @internal\n */\nexport function utf8StringToUint8Array(value) {\n    return new TextEncoder().encode(value);\n}\n/**\n * Encodes a Base64 string into a Uint8Array.\n * @internal\n */\nexport function base64ToUint8Array(value) {\n    return new Uint8Array([...atob(value)].map((x) => x.charCodeAt(0)));\n}\n/**\n * Encodes a Base64Url string into a Uint8Array.\n * @internal\n */\nexport function base64UrlToUint8Array(value) {\n    const base64String = value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    return base64ToUint8Array(base64String);\n}\nconst hexDigits = new Set(\"0123456789abcdefABCDEF\");\n/**\n * Encodes a hex string into a Uint8Array\n * @internal\n */\nexport function hexStringToUint8Array(value) {\n    // If value has odd length, the last character will be ignored, consistent with NodeJS Buffer behavior\n    const bytes = new Uint8Array(value.length / 2);\n    for (let i = 0; i < value.length / 2; ++i) {\n        const highNibble = value[2 * i];\n        const lowNibble = value[2 * i + 1];\n        if (!hexDigits.has(highNibble) || !hexDigits.has(lowNibble)) {\n            // Replicate Node Buffer behavior by exiting early when we encounter an invalid byte\n            return bytes.slice(0, i);\n        }\n        bytes[i] = parseInt(`${highNibble}${lowNibble}`, 16);\n    }\n    return bytes;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}