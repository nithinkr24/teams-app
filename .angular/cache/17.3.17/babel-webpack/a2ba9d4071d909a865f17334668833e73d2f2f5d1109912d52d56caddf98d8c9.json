{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AutoRefreshTokenCredential } from \"./autoRefreshTokenCredential.js\";\nimport { StaticTokenCredential } from \"./staticTokenCredential.js\";\nimport { parseToken } from \"./tokenParser.js\";\nimport { EntraTokenCredential } from \"./entraTokenCredential.js\";\n/**\n * The CommunicationTokenCredential implementation with support for proactive token refresh.\n */\nexport class AzureCommunicationTokenCredential {\n  constructor(tokenOrRefreshOptionsOrEntraOptions) {\n    this.disposed = false;\n    if (typeof tokenOrRefreshOptionsOrEntraOptions === \"string\") {\n      this.tokenCredential = new StaticTokenCredential(parseToken(tokenOrRefreshOptionsOrEntraOptions));\n    } else if (\"tokenRefresher\" in tokenOrRefreshOptionsOrEntraOptions) {\n      this.tokenCredential = new AutoRefreshTokenCredential(tokenOrRefreshOptionsOrEntraOptions);\n    } else {\n      this.tokenCredential = new EntraTokenCredential(tokenOrRefreshOptionsOrEntraOptions);\n    }\n  }\n  /**\n   * Gets an `AccessToken` for the user. Throws if already disposed.\n   * @param abortSignal - An implementation of `AbortSignalLike` to cancel the operation.\n   */\n  getToken(options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.throwIfDisposed();\n      const token = yield _this.tokenCredential.getToken(options);\n      _this.throwIfDisposed();\n      return token;\n    })();\n  }\n  /**\n   * Disposes the CommunicationTokenCredential and cancels any internal auto-refresh operation.\n   */\n  dispose() {\n    this.disposed = true;\n    this.tokenCredential.dispose();\n  }\n  throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error(\"User credential is disposed\");\n    }\n  }\n}","map":{"version":3,"names":["AutoRefreshTokenCredential","StaticTokenCredential","parseToken","EntraTokenCredential","AzureCommunicationTokenCredential","constructor","tokenOrRefreshOptionsOrEntraOptions","disposed","tokenCredential","getToken","options","_this","_asyncToGenerator","throwIfDisposed","token","dispose","Error"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/communication-common/dist/browser/azureCommunicationTokenCredential.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AutoRefreshTokenCredential, } from \"./autoRefreshTokenCredential.js\";\nimport { StaticTokenCredential } from \"./staticTokenCredential.js\";\nimport { parseToken } from \"./tokenParser.js\";\nimport { EntraTokenCredential, } from \"./entraTokenCredential.js\";\n/**\n * The CommunicationTokenCredential implementation with support for proactive token refresh.\n */\nexport class AzureCommunicationTokenCredential {\n    constructor(tokenOrRefreshOptionsOrEntraOptions) {\n        this.disposed = false;\n        if (typeof tokenOrRefreshOptionsOrEntraOptions === \"string\") {\n            this.tokenCredential = new StaticTokenCredential(parseToken(tokenOrRefreshOptionsOrEntraOptions));\n        }\n        else if (\"tokenRefresher\" in tokenOrRefreshOptionsOrEntraOptions) {\n            this.tokenCredential = new AutoRefreshTokenCredential(tokenOrRefreshOptionsOrEntraOptions);\n        }\n        else {\n            this.tokenCredential = new EntraTokenCredential(tokenOrRefreshOptionsOrEntraOptions);\n        }\n    }\n    /**\n     * Gets an `AccessToken` for the user. Throws if already disposed.\n     * @param abortSignal - An implementation of `AbortSignalLike` to cancel the operation.\n     */\n    async getToken(options) {\n        this.throwIfDisposed();\n        const token = await this.tokenCredential.getToken(options);\n        this.throwIfDisposed();\n        return token;\n    }\n    /**\n     * Disposes the CommunicationTokenCredential and cancels any internal auto-refresh operation.\n     */\n    dispose() {\n        this.disposed = true;\n        this.tokenCredential.dispose();\n    }\n    throwIfDisposed() {\n        if (this.disposed) {\n            throw new Error(\"User credential is disposed\");\n        }\n    }\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,0BAA0B,QAAS,iCAAiC;AAC7E,SAASC,qBAAqB,QAAQ,4BAA4B;AAClE,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,oBAAoB,QAAS,2BAA2B;AACjE;AACA;AACA;AACA,OAAO,MAAMC,iCAAiC,CAAC;EAC3CC,WAAWA,CAACC,mCAAmC,EAAE;IAC7C,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,OAAOD,mCAAmC,KAAK,QAAQ,EAAE;MACzD,IAAI,CAACE,eAAe,GAAG,IAAIP,qBAAqB,CAACC,UAAU,CAACI,mCAAmC,CAAC,CAAC;IACrG,CAAC,MACI,IAAI,gBAAgB,IAAIA,mCAAmC,EAAE;MAC9D,IAAI,CAACE,eAAe,GAAG,IAAIR,0BAA0B,CAACM,mCAAmC,CAAC;IAC9F,CAAC,MACI;MACD,IAAI,CAACE,eAAe,GAAG,IAAIL,oBAAoB,CAACG,mCAAmC,CAAC;IACxF;EACJ;EACA;AACJ;AACA;AACA;EACUG,QAAQA,CAACC,OAAO,EAAE;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACpBD,KAAI,CAACE,eAAe,CAAC,CAAC;MACtB,MAAMC,KAAK,SAASH,KAAI,CAACH,eAAe,CAACC,QAAQ,CAACC,OAAO,CAAC;MAC1DC,KAAI,CAACE,eAAe,CAAC,CAAC;MACtB,OAAOC,KAAK;IAAC;EACjB;EACA;AACJ;AACA;EACIC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACR,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,eAAe,CAACO,OAAO,CAAC,CAAC;EAClC;EACAF,eAAeA,CAAA,EAAG;IACd,IAAI,IAAI,CAACN,QAAQ,EAAE;MACf,MAAM,IAAIS,KAAK,CAAC,6BAA6B,CAAC;IAClD;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}