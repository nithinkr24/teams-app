{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createDefaultHttpClient } from \"../defaultHttpClient.js\";\nimport { createPipelineFromOptions } from \"../createPipelineFromOptions.js\";\nimport { apiVersionPolicy } from \"./apiVersionPolicy.js\";\nimport { isApiKeyCredential, isBasicCredential, isBearerTokenCredential, isOAuth2TokenCredential } from \"../auth/credentials.js\";\nimport { apiKeyAuthenticationPolicy } from \"../policies/auth/apiKeyAuthenticationPolicy.js\";\nimport { basicAuthenticationPolicy } from \"../policies/auth/basicAuthenticationPolicy.js\";\nimport { bearerAuthenticationPolicy } from \"../policies/auth/bearerAuthenticationPolicy.js\";\nimport { oauth2AuthenticationPolicy } from \"../policies/auth/oauth2AuthenticationPolicy.js\";\nlet cachedHttpClient;\n/**\n * Creates a default rest pipeline to re-use accross Rest Level Clients\n */\nexport function createDefaultPipeline(options = {}) {\n  const pipeline = createPipelineFromOptions(options);\n  pipeline.addPolicy(apiVersionPolicy(options));\n  const {\n    credential,\n    authSchemes,\n    allowInsecureConnection\n  } = options;\n  if (credential) {\n    if (isApiKeyCredential(credential)) {\n      pipeline.addPolicy(apiKeyAuthenticationPolicy({\n        authSchemes,\n        credential,\n        allowInsecureConnection\n      }));\n    } else if (isBasicCredential(credential)) {\n      pipeline.addPolicy(basicAuthenticationPolicy({\n        authSchemes,\n        credential,\n        allowInsecureConnection\n      }));\n    } else if (isBearerTokenCredential(credential)) {\n      pipeline.addPolicy(bearerAuthenticationPolicy({\n        authSchemes,\n        credential,\n        allowInsecureConnection\n      }));\n    } else if (isOAuth2TokenCredential(credential)) {\n      pipeline.addPolicy(oauth2AuthenticationPolicy({\n        authSchemes,\n        credential,\n        allowInsecureConnection\n      }));\n    }\n  }\n  return pipeline;\n}\nexport function getCachedDefaultHttpsClient() {\n  if (!cachedHttpClient) {\n    cachedHttpClient = createDefaultHttpClient();\n  }\n  return cachedHttpClient;\n}\n//# sourceMappingURL=clientHelpers.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}