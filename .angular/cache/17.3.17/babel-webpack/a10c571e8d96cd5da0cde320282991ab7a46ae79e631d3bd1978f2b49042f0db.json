{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n * @internal\n */\nexport function encodeString(value) {\n  return btoa(value);\n}\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n * @internal\n */\nexport function encodeByteArray(value) {\n  let str = \"\";\n  for (let i = 0; i < value.length; i++) {\n    str += String.fromCharCode(value[i]);\n  }\n  return btoa(str);\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n * @internal\n */\nexport function decodeString(value) {\n  const byteString = atob(value);\n  const arr = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    arr[i] = byteString.charCodeAt(i);\n  }\n  return arr;\n}\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n * @internal\n */\nexport function decodeStringToString(value) {\n  return atob(value);\n}","map":{"version":3,"names":["encodeString","value","btoa","encodeByteArray","str","i","length","String","fromCharCode","decodeString","byteString","atob","arr","Uint8Array","charCodeAt","decodeStringToString"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-client/dist/browser/base64.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n * @internal\n */\nexport function encodeString(value) {\n    return btoa(value);\n}\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n * @internal\n */\nexport function encodeByteArray(value) {\n    let str = \"\";\n    for (let i = 0; i < value.length; i++) {\n        str += String.fromCharCode(value[i]);\n    }\n    return btoa(str);\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n * @internal\n */\nexport function decodeString(value) {\n    const byteString = atob(value);\n    const arr = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i++) {\n        arr[i] = byteString.charCodeAt(i);\n    }\n    return arr;\n}\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n * @internal\n */\nexport function decodeStringToString(value) {\n    return atob(value);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,YAAYA,CAACC,KAAK,EAAE;EAChC,OAAOC,IAAI,CAACD,KAAK,CAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,eAAeA,CAACF,KAAK,EAAE;EACnC,IAAIG,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACnCD,GAAG,IAAIG,MAAM,CAACC,YAAY,CAACP,KAAK,CAACI,CAAC,CAAC,CAAC;EACxC;EACA,OAAOH,IAAI,CAACE,GAAG,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,YAAYA,CAACR,KAAK,EAAE;EAChC,MAAMS,UAAU,GAAGC,IAAI,CAACV,KAAK,CAAC;EAC9B,MAAMW,GAAG,GAAG,IAAIC,UAAU,CAACH,UAAU,CAACJ,MAAM,CAAC;EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,UAAU,CAACJ,MAAM,EAAED,CAAC,EAAE,EAAE;IACxCO,GAAG,CAACP,CAAC,CAAC,GAAGK,UAAU,CAACI,UAAU,CAACT,CAAC,CAAC;EACrC;EACA,OAAOO,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,oBAAoBA,CAACd,KAAK,EAAE;EACxC,OAAOU,IAAI,CAACV,KAAK,CAAC;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}