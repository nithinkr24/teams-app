{"ast":null,"code":"import { throwError, from } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/teams-auth.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  var _AuthInterceptor;\n  class AuthInterceptor {\n    constructor(teamsAuthService) {\n      this.teamsAuthService = teamsAuthService;\n      this.token = '';\n    }\n    intercept(request, next) {\n      let authReq = this.addAuthHeaders(request);\n      return next.handle(authReq).pipe(catchError(error => {\n        if (error.status === 401 && !this.token) {\n          return this.handleUnauthorized(request, next);\n        }\n        return throwError(() => error);\n      }));\n    }\n    handleUnauthorized(originalRequest, next) {\n      if (this.token) {\n        return throwError(() => new Error('Authentication already in progress'));\n      }\n      return from(this.teamsAuthService.openLoginDialog()).pipe(switchMap(tokenValue => {\n        this.token = tokenValue;\n        if (this.token) {\n          const retryRequest = this.addAuthHeaders(originalRequest);\n          return next.handle(retryRequest);\n        } else {\n          console.error('Login failed or was cancelled');\n          return throwError(() => new Error('Authentication failed'));\n        }\n      }), catchError(error => {\n        this.token = '';\n        return throwError(() => error);\n      }));\n    }\n    addAuthHeaders(request) {\n      const authHeaders = {};\n      if (this.token) {\n        authHeaders['token'] = `${this.token}`; // Note: a 'token' header is non-standard. The standard is 'Authorization' with 'Bearer'.\n      }\n      if (Object.keys(authHeaders).length > 0) {\n        return request.clone({\n          setHeaders: authHeaders\n        });\n      }\n      return request;\n    }\n  }\n  _AuthInterceptor = AuthInterceptor;\n  _AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || _AuthInterceptor)(i0.ɵɵinject(i1.TeamsAuthService));\n  };\n  _AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _AuthInterceptor,\n    factory: _AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}