{"ast":null,"code":"import { callFunctionInHostAndHandleResponse as t } from \"../../internal/communication.js\";\nimport { ensureInitialized as r } from \"../../internal/internalAPIs.js\";\nimport { SimpleTypeResponseHandler as e, ResponseHandler as n } from \"../../internal/responseHandler.js\";\nimport { getApiVersionTag as o } from \"../../internal/telemetry.js\";\nimport { runtime as a } from \"../../public/runtime.js\";\nimport { isSupported as s } from \"./hostEntity.js\";\nimport { ErrorCode as i } from \"../../public/interfaces.js\";\nconst l = \"v2\";\nclass d extends n {\n  validate(t) {\n    return \"ConfigurableTab\" === t.tabType;\n  }\n  deserialize(t) {\n    return t;\n  }\n}\nclass c {\n  constructor(t) {\n    this.configurableTabInstance = t;\n  }\n  serialize() {\n    return this.configurableTabInstance;\n  }\n}\nclass u {\n  constructor(t) {\n    this.hostEntityId = t;\n  }\n  serialize() {\n    return this.hostEntityId;\n  }\n}\nclass E extends n {\n  validate(t) {\n    return \"ConfigurableTab\" === t.tabType || \"StaticTab\" === t.tabType;\n  }\n  deserialize(t) {\n    return t;\n  }\n}\nclass h {\n  constructor(t) {\n    this.hostEntityTabInstance = t;\n  }\n  serialize() {\n    return this.hostEntityTabInstance;\n  }\n}\nclass p extends n {\n  validate(t) {\n    return t.allTabs && t.allTabs.forEach(t => {}), !0;\n  }\n  deserialize(t) {\n    return t;\n  }\n}\nfunction f(e, n) {\n  if (r(a), !y()) throw new Error(`Error code: ${i.NOT_SUPPORTED_ON_PLATFORM}, message: Not supported on platform`);\n  if (I(e.threadId), n && 0 === n.length) throw new Error(`Error code: ${i.INVALID_ARGUMENTS}, message: App types cannot be an empty array`);\n  return t(\"hostEntity.tab.addAndConfigure\", [new u(e), n], new E(), o(l, \"hostEntity.tab.addAndConfigure\"));\n}\nfunction m(e) {\n  if (r(a), !y()) throw new Error(`Error code: ${i.NOT_SUPPORTED_ON_PLATFORM}, message: Not supported on platform`);\n  return I(e.threadId), t(\"hostEntity.tab.getAll\", [new u(e)], new p(), o(l, \"hostEntity.tab.getAll\"));\n}\nfunction b(e, n) {\n  if (r(a), !y()) throw new Error(`Error code: ${i.NOT_SUPPORTED_ON_PLATFORM}, message: Not supported on platform`);\n  return g(e), I(n.threadId), t(\"hostEntity.tab.reconfigure\", [new c(e), new u(n)], new d(), o(l, \"hostEntity.tab.reconfigure\"));\n}\nfunction T(e, n) {\n  if (r(a), !y()) throw new Error(`Error code: ${i.NOT_SUPPORTED_ON_PLATFORM}, message: Not supported on platform`);\n  return g(e), I(n.threadId), t(\"hostEntity.tab.rename\", [new c(e), new u(n)], new d(), o(l, \"hostEntity.tab.rename\"));\n}\nfunction w(n, s) {\n  if (r(a), !y()) throw new Error(`Error code: ${i.NOT_SUPPORTED_ON_PLATFORM}, message: Not supported on platform`);\n  return I(s.threadId), g(n), t(\"hostEntity.tab.remove\", [new h(n), new u(s)], new e(), o(l, \"hostEntity.tab.remove\"));\n}\nfunction y() {\n  var t;\n  return !!(r(a) && s() && (null === (t = a.supports.hostEntity) || void 0 === t ? void 0 : t.tab));\n}\nfunction I(t) {\n  if (!t || 0 == t.length) throw new Error(`Error code: ${i.INVALID_ARGUMENTS}, message: ThreadId cannot be null or empty`);\n}\nfunction g(t) {\n  if (!(null == t ? void 0 : t.internalTabInstanceId) || 0 === t.internalTabInstanceId.length) throw new Error(`Error code: ${i.INVALID_ARGUMENTS}, message: TabId cannot be null or empty`);\n}\nexport { f as addAndConfigure, m as getAll, y as isSupported, b as reconfigure, w as remove, T as rename };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}