{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { RestError } from \"../restError.js\";\nimport { createHttpHeaders } from \"../httpHeaders.js\";\nexport function createRestError(messageOrResponse, response) {\n  var _a, _b, _c;\n  const resp = typeof messageOrResponse === \"string\" ? response : messageOrResponse;\n  const internalError = (_b = (_a = resp.body) === null || _a === void 0 ? void 0 : _a.error) !== null && _b !== void 0 ? _b : resp.body;\n  const message = typeof messageOrResponse === \"string\" ? messageOrResponse : (_c = internalError === null || internalError === void 0 ? void 0 : internalError.message) !== null && _c !== void 0 ? _c : `Unexpected status code: ${resp.status}`;\n  return new RestError(message, {\n    statusCode: statusCodeToNumber(resp.status),\n    code: internalError === null || internalError === void 0 ? void 0 : internalError.code,\n    request: resp.request,\n    response: toPipelineResponse(resp)\n  });\n}\nfunction toPipelineResponse(response) {\n  var _a;\n  return {\n    headers: createHttpHeaders(response.headers),\n    request: response.request,\n    status: (_a = statusCodeToNumber(response.status)) !== null && _a !== void 0 ? _a : -1\n  };\n}\nfunction statusCodeToNumber(statusCode) {\n  const status = Number.parseInt(statusCode);\n  return Number.isNaN(status) ? undefined : status;\n}\n//# sourceMappingURL=restError.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}