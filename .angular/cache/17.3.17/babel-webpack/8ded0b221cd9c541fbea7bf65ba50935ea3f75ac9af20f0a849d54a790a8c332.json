{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isNodeLike } from \"@azure/core-util\";\nfunction isNodeReadableStream(x) {\n  return Boolean(x && typeof x[\"pipe\"] === \"function\");\n}\nconst unimplementedMethods = {\n  arrayBuffer: () => {\n    throw new Error(\"Not implemented\");\n  },\n  bytes: () => {\n    throw new Error(\"Not implemented\");\n  },\n  slice: () => {\n    throw new Error(\"Not implemented\");\n  },\n  text: () => {\n    throw new Error(\"Not implemented\");\n  }\n};\n/**\n * Private symbol used as key on objects created using createFile containing the\n * original source of the file object.\n *\n * This is used in Node to access the original Node stream without using Blob#stream, which\n * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and\n * Readable#to/fromWeb in Node versions we support:\n * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)\n * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)\n *\n * Once these versions are no longer supported, we may be able to stop doing this.\n *\n * @internal\n */\nconst rawContent = Symbol(\"rawContent\");\n/**\n * Type guard to check if a given object is a blob-like object with a raw content property.\n */\nexport function hasRawContent(x) {\n  return typeof x[rawContent] === \"function\";\n}\n/**\n * Extract the raw content from a given blob-like object. If the input was created using createFile\n * or createFileFromStream, the exact content passed into createFile/createFileFromStream will be used.\n * For true instances of Blob and File, returns the actual blob.\n *\n * @internal\n */\nexport function getRawContent(blob) {\n  if (hasRawContent(blob)) {\n    return blob[rawContent]();\n  } else {\n    return blob;\n  }\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function to:\n * - Create a File object for use in RequestBodyType.formData in environments where the\n *   global File object is unavailable.\n * - Create a File-like object from a readable stream without reading the stream into memory.\n *\n * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is\n *                  passed in a request's form data map, the stream will not be read into memory\n *                  and instead will be streamed when the request is made. In the event of a retry, the\n *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFileFromStream(stream, name, options = {}) {\n  var _a, _b, _c, _d;\n  return Object.assign(Object.assign({}, unimplementedMethods), {\n    type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\",\n    lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(),\n    webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\",\n    size: (_d = options.size) !== null && _d !== void 0 ? _d : -1,\n    name,\n    stream: () => {\n      const s = stream();\n      if (isNodeReadableStream(s)) {\n        throw new Error(\"Not supported: a Node stream was provided as input to createFileFromStream.\");\n      }\n      return s;\n    },\n    [rawContent]: stream\n  });\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.\n *\n * @param content - the content of the file as a Uint8Array in memory.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFile(content, name, options = {}) {\n  var _a, _b, _c;\n  if (isNodeLike) {\n    return Object.assign(Object.assign({}, unimplementedMethods), {\n      type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\",\n      lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(),\n      webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\",\n      size: content.byteLength,\n      name,\n      arrayBuffer: function () {\n        var _ref = _asyncToGenerator(function* () {\n          return content.buffer;\n        });\n        return function arrayBuffer() {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      stream: () => new Blob([content]).stream(),\n      [rawContent]: () => content\n    });\n  } else {\n    return new File([content], name, options);\n  }\n}","map":{"version":3,"names":["isNodeLike","isNodeReadableStream","x","Boolean","unimplementedMethods","arrayBuffer","Error","bytes","slice","text","rawContent","Symbol","hasRawContent","getRawContent","blob","createFileFromStream","stream","name","options","_a","_b","_c","_d","Object","assign","type","lastModified","Date","getTime","webkitRelativePath","size","s","createFile","content","byteLength","_ref","_asyncToGenerator","buffer","apply","arguments","Blob","File"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-rest-pipeline/dist/browser/util/file.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isNodeLike } from \"@azure/core-util\";\nfunction isNodeReadableStream(x) {\n    return Boolean(x && typeof x[\"pipe\"] === \"function\");\n}\nconst unimplementedMethods = {\n    arrayBuffer: () => {\n        throw new Error(\"Not implemented\");\n    },\n    bytes: () => {\n        throw new Error(\"Not implemented\");\n    },\n    slice: () => {\n        throw new Error(\"Not implemented\");\n    },\n    text: () => {\n        throw new Error(\"Not implemented\");\n    },\n};\n/**\n * Private symbol used as key on objects created using createFile containing the\n * original source of the file object.\n *\n * This is used in Node to access the original Node stream without using Blob#stream, which\n * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and\n * Readable#to/fromWeb in Node versions we support:\n * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)\n * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)\n *\n * Once these versions are no longer supported, we may be able to stop doing this.\n *\n * @internal\n */\nconst rawContent = Symbol(\"rawContent\");\n/**\n * Type guard to check if a given object is a blob-like object with a raw content property.\n */\nexport function hasRawContent(x) {\n    return typeof x[rawContent] === \"function\";\n}\n/**\n * Extract the raw content from a given blob-like object. If the input was created using createFile\n * or createFileFromStream, the exact content passed into createFile/createFileFromStream will be used.\n * For true instances of Blob and File, returns the actual blob.\n *\n * @internal\n */\nexport function getRawContent(blob) {\n    if (hasRawContent(blob)) {\n        return blob[rawContent]();\n    }\n    else {\n        return blob;\n    }\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function to:\n * - Create a File object for use in RequestBodyType.formData in environments where the\n *   global File object is unavailable.\n * - Create a File-like object from a readable stream without reading the stream into memory.\n *\n * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is\n *                  passed in a request's form data map, the stream will not be read into memory\n *                  and instead will be streamed when the request is made. In the event of a retry, the\n *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFileFromStream(stream, name, options = {}) {\n    var _a, _b, _c, _d;\n    return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: (_d = options.size) !== null && _d !== void 0 ? _d : -1, name, stream: () => {\n            const s = stream();\n            if (isNodeReadableStream(s)) {\n                throw new Error(\"Not supported: a Node stream was provided as input to createFileFromStream.\");\n            }\n            return s;\n        }, [rawContent]: stream });\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.\n *\n * @param content - the content of the file as a Uint8Array in memory.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFile(content, name, options = {}) {\n    var _a, _b, _c;\n    if (isNodeLike) {\n        return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: content.byteLength, name, arrayBuffer: async () => content.buffer, stream: () => new Blob([content]).stream(), [rawContent]: () => content });\n    }\n    else {\n        return new File([content], name, options);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}