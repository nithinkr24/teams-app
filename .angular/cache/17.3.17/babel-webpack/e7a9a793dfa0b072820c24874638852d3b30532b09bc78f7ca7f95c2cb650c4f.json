{"ast":null,"code":"import { sendAndHandleStatusAndReason as n, sendMessageToParent as o, sendAndUnwrap as t } from \"../internal/communication.js\";\nimport { registerHandler as e, removeHandler as r } from \"../internal/handlers.js\";\nimport { ensureInitialized as i } from \"../internal/internalAPIs.js\";\nimport { getApiVersionTag as s } from \"../internal/telemetry.js\";\nimport { FrameContexts as a, errorNotSupportedOnPlatform as c } from \"../public/constants.js\";\nimport { runtime as v } from \"../public/runtime.js\";\nconst l = \"v1\";\nfunction d(o) {\n  return new Promise(t => {\n    if (i(v, a.content), !C()) throw c;\n    const r = n(s(l, \"conversations.openConversation\"), \"conversations.openConversation\", {\n      title: o.title,\n      subEntityId: o.subEntityId,\n      conversationId: o.conversationId,\n      channelId: o.channelId,\n      entityId: o.entityId\n    });\n    o.onStartConversation && e(s(l, \"conversations.registerStartConversationHandler\"), \"startConversation\", (n, t, e, r) => {\n      var i;\n      return null === (i = o.onStartConversation) || void 0 === i ? void 0 : i.call(o, {\n        subEntityId: n,\n        conversationId: t,\n        channelId: e,\n        entityId: r\n      });\n    }), o.onCloseConversation && e(s(l, \"conversations.registerCloseConversationHandler\"), \"closeConversation\", (n, t, e, r) => {\n      var i;\n      return null === (i = o.onCloseConversation) || void 0 === i ? void 0 : i.call(o, {\n        subEntityId: n,\n        conversationId: t,\n        channelId: e,\n        entityId: r\n      });\n    }), t(r);\n  });\n}\nfunction m() {\n  if (i(v, a.content), !C()) throw c;\n  o(s(l, \"conversations.closeConversation\"), \"conversations.closeConversation\"), r(\"startConversation\"), r(\"closeConversation\");\n}\nfunction u() {\n  return new Promise(n => {\n    if (i(v), !C()) throw c;\n    n(t(s(l, \"conversations.getChatMember\"), \"getChatMembers\"));\n  });\n}\nfunction C() {\n  return !(!i(v) || !v.supports.conversations);\n}\nexport { m as closeConversation, u as getChatMembers, C as isSupported, d as openConversation };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}