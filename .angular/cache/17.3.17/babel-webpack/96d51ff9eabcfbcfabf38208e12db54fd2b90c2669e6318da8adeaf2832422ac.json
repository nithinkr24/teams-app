{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isError } from \"./util/error.js\";\nimport { custom } from \"./util/inspect.js\";\nimport { Sanitizer } from \"./util/sanitizer.js\";\nconst errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nexport let RestError = /*#__PURE__*/(() => {\n  class RestError extends Error {\n    constructor(message, options = {}) {\n      super(message);\n      this.name = \"RestError\";\n      this.code = options.code;\n      this.statusCode = options.statusCode;\n      // The request and response may contain sensitive information in the headers or body.\n      // To help prevent this sensitive information being accidentally logged, the request and response\n      // properties are marked as non-enumerable here. This prevents them showing up in the output of\n      // JSON.stringify and console.log.\n      Object.defineProperty(this, \"request\", {\n        value: options.request,\n        enumerable: false\n      });\n      Object.defineProperty(this, \"response\", {\n        value: options.response,\n        enumerable: false\n      });\n      // Logging method for util.inspect in Node\n      Object.defineProperty(this, custom, {\n        value: () => {\n          // Extract non-enumerable properties and add them back. This is OK since in this output the request and\n          // response get sanitized.\n          return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(Object.assign(Object.assign({}, this), {\n            request: this.request,\n            response: this.response\n          }))}`;\n        },\n        enumerable: false\n      });\n      Object.setPrototypeOf(this, RestError.prototype);\n    }\n  }\n  /**\n   * Something went wrong when making the request.\n   * This means the actual request failed for some reason,\n   * such as a DNS issue or the connection being lost.\n   */\n\n  /**\n   * This means that parsing the response from the server failed.\n   * It may have been malformed.\n   */\n  RestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n  RestError.PARSE_ERROR = \"PARSE_ERROR\";\n  /**\n   * Typeguard for RestError\n   * @param e - Something caught by a catch clause.\n   */\n  return RestError;\n})();\nexport function isRestError(e) {\n  if (e instanceof RestError) {\n    return true;\n  }\n  return isError(e) && e.name === \"RestError\";\n}\n//# sourceMappingURL=restError.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}