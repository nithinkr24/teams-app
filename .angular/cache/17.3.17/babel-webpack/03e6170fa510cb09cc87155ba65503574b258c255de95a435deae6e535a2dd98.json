{"ast":null,"code":"import { sendAndHandleSdkError as e } from \"../internal/communication.js\";\nimport { registerHandler as o } from \"../internal/handlers.js\";\nimport { ensureInitialized as n } from \"../internal/internalAPIs.js\";\nimport { getApiVersionTag as t } from \"../internal/telemetry.js\";\nimport { errorNotSupportedOnPlatform as i } from \"../public/constants.js\";\nimport { runtime as r } from \"../public/runtime.js\";\nconst m = \"v1\";\nfunction a() {\n  return new Promise(o => {\n    if (n(r), !l()) throw i;\n    o(e(t(m, \"meetingRoom.getPairedMeetingRoomInfo\"), \"meetingRoom.getPairedMeetingRoomInfo\"));\n  });\n}\nfunction g(o) {\n  return new Promise(a => {\n    if (!o || 0 == o.length) throw new Error(\"[meetingRoom.sendCommandToPairedMeetingRoom] Command name cannot be null or empty\");\n    if (n(r), !l()) throw i;\n    a(e(t(m, \"meetingRoom.sendCommandToPairedMeetingRoom\"), \"meetingRoom.sendCommandToPairedMeetingRoom\", o));\n  });\n}\nfunction s(e) {\n  if (!e) throw new Error(\"[meetingRoom.registerMeetingRoomCapabilitiesUpdateHandler] Handler cannot be null\");\n  if (n(r), !l()) throw i;\n  o(t(m, \"meetingRoom.registerMeetingRoomCapabilitiesUpdateHandler\"), \"meetingRoom.meetingRoomCapabilitiesUpdate\", o => {\n    n(r), e(o);\n  });\n}\nfunction d(e) {\n  if (!e) throw new Error(\"[meetingRoom.registerMeetingRoomStatesUpdateHandler] Handler cannot be null\");\n  if (n(r), !l()) throw i;\n  o(t(m, \"meetingRoom.registerMeetingRoomStatesUpdateHandler\"), \"meetingRoom.meetingRoomStatesUpdate\", o => {\n    n(r), e(o);\n  });\n}\nfunction l() {\n  return !(!n(r) || !r.supports.meetingRoom);\n}\nexport { a as getPairedMeetingRoomInfo, l as isSupported, s as registerMeetingRoomCapabilitiesUpdateHandler, d as registerMeetingRoomStatesUpdateHandler, g as sendCommandToPairedMeetingRoom };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}