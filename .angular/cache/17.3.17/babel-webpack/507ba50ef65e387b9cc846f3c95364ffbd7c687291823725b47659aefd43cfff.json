{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nexport const redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nexport function redirectPolicy(options = {}) {\n  const {\n    maxRetries = 20\n  } = options;\n  return {\n    name: redirectPolicyName,\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        const response = yield next(request);\n        return handleRedirect(next, response, maxRetries);\n      })();\n    }\n  };\n}\nfunction handleRedirect(_x, _x2, _x3) {\n  return _handleRedirect.apply(this, arguments);\n}\nfunction _handleRedirect() {\n  _handleRedirect = _asyncToGenerator(function* (next, response, maxRetries, currentRetries = 0) {\n    const {\n      request,\n      status,\n      headers\n    } = response;\n    const locationHeader = headers.get(\"location\");\n    if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === \"POST\" || status === 307) && currentRetries < maxRetries) {\n      const url = new URL(locationHeader, request.url);\n      request.url = url.toString();\n      // POST request with Status code 303 should be converted into a\n      // redirected GET request if the redirect url is present in the location header\n      if (status === 303) {\n        request.method = \"GET\";\n        request.headers.delete(\"Content-Length\");\n        delete request.body;\n      }\n      request.headers.delete(\"Authorization\");\n      const res = yield next(request);\n      return handleRedirect(next, res, maxRetries, currentRetries + 1);\n    }\n    return response;\n  });\n  return _handleRedirect.apply(this, arguments);\n}","map":{"version":3,"names":["redirectPolicyName","allowedRedirect","redirectPolicy","options","maxRetries","name","sendRequest","request","next","_asyncToGenerator","response","handleRedirect","_x","_x2","_x3","_handleRedirect","apply","arguments","currentRetries","status","headers","locationHeader","get","includes","method","url","URL","toString","delete","body","res"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/policies/redirectPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nexport const redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nexport function redirectPolicy(options = {}) {\n    const { maxRetries = 20 } = options;\n    return {\n        name: redirectPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return handleRedirect(next, response, maxRetries);\n        },\n    };\n}\nasync function handleRedirect(next, response, maxRetries, currentRetries = 0) {\n    const { request, status, headers } = response;\n    const locationHeader = headers.get(\"location\");\n    if (locationHeader &&\n        (status === 300 ||\n            (status === 301 && allowedRedirect.includes(request.method)) ||\n            (status === 302 && allowedRedirect.includes(request.method)) ||\n            (status === 303 && request.method === \"POST\") ||\n            status === 307) &&\n        currentRetries < maxRetries) {\n        const url = new URL(locationHeader, request.url);\n        request.url = url.toString();\n        // POST request with Status code 303 should be converted into a\n        // redirected GET request if the redirect url is present in the location header\n        if (status === 303) {\n            request.method = \"GET\";\n            request.headers.delete(\"Content-Length\");\n            delete request.body;\n        }\n        request.headers.delete(\"Authorization\");\n        const res = await next(request);\n        return handleRedirect(next, res, maxRetries, currentRetries + 1);\n    }\n    return response;\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,GAAG,gBAAgB;AAClD;AACA;AACA;AACA,MAAMC,eAAe,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EACzC,MAAM;IAAEC,UAAU,GAAG;EAAG,CAAC,GAAGD,OAAO;EACnC,OAAO;IACHE,IAAI,EAAEL,kBAAkB;IAClBM,WAAWA,CAACC,OAAO,EAAEC,IAAI,EAAE;MAAA,OAAAC,iBAAA;QAC7B,MAAMC,QAAQ,SAASF,IAAI,CAACD,OAAO,CAAC;QACpC,OAAOI,cAAc,CAACH,IAAI,EAAEE,QAAQ,EAAEN,UAAU,CAAC;MAAC;IACtD;EACJ,CAAC;AACL;AAAC,SACcO,cAAcA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,gBAAA;EAAAA,eAAA,GAAAN,iBAAA,CAA7B,WAA8BD,IAAI,EAAEE,QAAQ,EAAEN,UAAU,EAAEc,cAAc,GAAG,CAAC,EAAE;IAC1E,MAAM;MAAEX,OAAO;MAAEY,MAAM;MAAEC;IAAQ,CAAC,GAAGV,QAAQ;IAC7C,MAAMW,cAAc,GAAGD,OAAO,CAACE,GAAG,CAAC,UAAU,CAAC;IAC9C,IAAID,cAAc,KACbF,MAAM,KAAK,GAAG,IACVA,MAAM,KAAK,GAAG,IAAIlB,eAAe,CAACsB,QAAQ,CAAChB,OAAO,CAACiB,MAAM,CAAE,IAC3DL,MAAM,KAAK,GAAG,IAAIlB,eAAe,CAACsB,QAAQ,CAAChB,OAAO,CAACiB,MAAM,CAAE,IAC3DL,MAAM,KAAK,GAAG,IAAIZ,OAAO,CAACiB,MAAM,KAAK,MAAO,IAC7CL,MAAM,KAAK,GAAG,CAAC,IACnBD,cAAc,GAAGd,UAAU,EAAE;MAC7B,MAAMqB,GAAG,GAAG,IAAIC,GAAG,CAACL,cAAc,EAAEd,OAAO,CAACkB,GAAG,CAAC;MAChDlB,OAAO,CAACkB,GAAG,GAAGA,GAAG,CAACE,QAAQ,CAAC,CAAC;MAC5B;MACA;MACA,IAAIR,MAAM,KAAK,GAAG,EAAE;QAChBZ,OAAO,CAACiB,MAAM,GAAG,KAAK;QACtBjB,OAAO,CAACa,OAAO,CAACQ,MAAM,CAAC,gBAAgB,CAAC;QACxC,OAAOrB,OAAO,CAACsB,IAAI;MACvB;MACAtB,OAAO,CAACa,OAAO,CAACQ,MAAM,CAAC,eAAe,CAAC;MACvC,MAAME,GAAG,SAAStB,IAAI,CAACD,OAAO,CAAC;MAC/B,OAAOI,cAAc,CAACH,IAAI,EAAEsB,GAAG,EAAE1B,UAAU,EAAEc,cAAc,GAAG,CAAC,CAAC;IACpE;IACA,OAAOR,QAAQ;EACnB,CAAC;EAAA,OAAAK,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}