{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createAbortablePromise } from \"./createAbortablePromise.js\";\nimport { getRandomIntegerInclusive } from \"@typespec/ts-http-runtime/internal/util\";\nconst StandardAbortMessage = \"The delay was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs, options) {\n  let token;\n  const {\n    abortSignal,\n    abortErrorMsg\n  } = options !== null && options !== void 0 ? options : {};\n  return createAbortablePromise(resolve => {\n    token = setTimeout(resolve, timeInMs);\n  }, {\n    cleanupBeforeAbort: () => clearTimeout(token),\n    abortSignal,\n    abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage\n  });\n}\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n * @param retryAttempt - The current retry attempt number.\n * @param config - The exponential retry configuration.\n * @returns An object containing the calculated retry delay.\n */\nexport function calculateRetryDelay(retryAttempt, config) {\n  // Exponentially increase the delay each time\n  const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);\n  // Don't let the delay exceed the maximum\n  const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);\n  // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n  // that retries across multiple clients don't occur simultaneously.\n  const retryAfterInMs = clampedDelay / 2 + getRandomIntegerInclusive(0, clampedDelay / 2);\n  return {\n    retryAfterInMs\n  };\n}","map":{"version":3,"names":["createAbortablePromise","getRandomIntegerInclusive","StandardAbortMessage","delay","timeInMs","options","token","abortSignal","abortErrorMsg","resolve","setTimeout","cleanupBeforeAbort","clearTimeout","calculateRetryDelay","retryAttempt","config","exponentialDelay","retryDelayInMs","Math","pow","clampedDelay","min","maxRetryDelayInMs","retryAfterInMs"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-util/dist/browser/delay.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createAbortablePromise } from \"./createAbortablePromise.js\";\nimport { getRandomIntegerInclusive } from \"@typespec/ts-http-runtime/internal/util\";\nconst StandardAbortMessage = \"The delay was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs, options) {\n    let token;\n    const { abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return createAbortablePromise((resolve) => {\n        token = setTimeout(resolve, timeInMs);\n    }, {\n        cleanupBeforeAbort: () => clearTimeout(token),\n        abortSignal,\n        abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage,\n    });\n}\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n * @param retryAttempt - The current retry attempt number.\n * @param config - The exponential retry configuration.\n * @returns An object containing the calculated retry delay.\n */\nexport function calculateRetryDelay(retryAttempt, config) {\n    // Exponentially increase the delay each time\n    const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);\n    // Don't let the delay exceed the maximum\n    const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);\n    // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n    // that retries across multiple clients don't occur simultaneously.\n    const retryAfterInMs = clampedDelay / 2 + getRandomIntegerInclusive(0, clampedDelay / 2);\n    return { retryAfterInMs };\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,sBAAsB,QAAQ,6BAA6B;AACpE,SAASC,yBAAyB,QAAQ,yCAAyC;AACnF,MAAMC,oBAAoB,GAAG,wBAAwB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EACrC,IAAIC,KAAK;EACT,MAAM;IAAEC,WAAW;IAAEC;EAAc,CAAC,GAAGH,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAGA,OAAO,GAAG,CAAC,CAAC;EAC5F,OAAOL,sBAAsB,CAAES,OAAO,IAAK;IACvCH,KAAK,GAAGI,UAAU,CAACD,OAAO,EAAEL,QAAQ,CAAC;EACzC,CAAC,EAAE;IACCO,kBAAkB,EAAEA,CAAA,KAAMC,YAAY,CAACN,KAAK,CAAC;IAC7CC,WAAW;IACXC,aAAa,EAAEA,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAGA,aAAa,GAAGN;EACxF,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,mBAAmBA,CAACC,YAAY,EAAEC,MAAM,EAAE;EACtD;EACA,MAAMC,gBAAgB,GAAGD,MAAM,CAACE,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,YAAY,CAAC;EAC1E;EACA,MAAMM,YAAY,GAAGF,IAAI,CAACG,GAAG,CAACN,MAAM,CAACO,iBAAiB,EAAEN,gBAAgB,CAAC;EACzE;EACA;EACA,MAAMO,cAAc,GAAGH,YAAY,GAAG,CAAC,GAAGnB,yBAAyB,CAAC,CAAC,EAAEmB,YAAY,GAAG,CAAC,CAAC;EACxF,OAAO;IAAEG;EAAe,CAAC;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}