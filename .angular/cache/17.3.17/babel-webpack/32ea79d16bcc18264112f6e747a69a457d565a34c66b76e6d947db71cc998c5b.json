{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createDefaultPipeline } from \"./clientHelpers.js\";\nimport { sendRequest } from \"./sendRequest.js\";\nimport { buildRequestUrl } from \"./urlHelpers.js\";\nimport { isNodeLike } from \"../util/checkEnvironment.js\";\n/**\n * Creates a client with a default pipeline\n * @param endpoint - Base endpoint for the client\n * @param credentials - Credentials to authenticate the requests\n * @param options - Client options\n */\nexport function getClient(endpoint, clientOptions = {}) {\n  var _a, _b, _c;\n  const pipeline = (_a = clientOptions.pipeline) !== null && _a !== void 0 ? _a : createDefaultPipeline(clientOptions);\n  if ((_b = clientOptions.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {\n    for (const {\n      policy,\n      position\n    } of clientOptions.additionalPolicies) {\n      // Sign happens after Retry and is commonly needed to occur\n      // before policies that intercept post-retry.\n      const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n      pipeline.addPolicy(policy, {\n        afterPhase\n      });\n    }\n  }\n  const {\n    allowInsecureConnection,\n    httpClient\n  } = clientOptions;\n  const endpointUrl = (_c = clientOptions.endpoint) !== null && _c !== void 0 ? _c : endpoint;\n  const client = (path, ...args) => {\n    const getUrl = requestOptions => buildRequestUrl(endpointUrl, path, args, Object.assign({\n      allowInsecureConnection\n    }, requestOptions));\n    return {\n      get: (requestOptions = {}) => {\n        return buildOperation(\"GET\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      post: (requestOptions = {}) => {\n        return buildOperation(\"POST\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      put: (requestOptions = {}) => {\n        return buildOperation(\"PUT\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      patch: (requestOptions = {}) => {\n        return buildOperation(\"PATCH\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      delete: (requestOptions = {}) => {\n        return buildOperation(\"DELETE\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      head: (requestOptions = {}) => {\n        return buildOperation(\"HEAD\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      options: (requestOptions = {}) => {\n        return buildOperation(\"OPTIONS\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      trace: (requestOptions = {}) => {\n        return buildOperation(\"TRACE\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      }\n    };\n  };\n  return {\n    path: client,\n    pathUnchecked: client,\n    pipeline\n  };\n}\nfunction buildOperation(method, url, pipeline, options, allowInsecureConnection, httpClient) {\n  var _a;\n  allowInsecureConnection = (_a = options.allowInsecureConnection) !== null && _a !== void 0 ? _a : allowInsecureConnection;\n  return {\n    then: function (onFulfilled, onrejected) {\n      return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), {\n        allowInsecureConnection\n      }), httpClient).then(onFulfilled, onrejected);\n    },\n    asBrowserStream() {\n      return _asyncToGenerator(function* () {\n        if (isNodeLike) {\n          throw new Error(\"`asBrowserStream` is supported only in the browser environment. Use `asNodeStream` instead to obtain the response body stream. If you require a Web stream of the response in Node, consider using `Readable.toWeb` on the result of `asNodeStream`.\");\n        } else {\n          return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), {\n            allowInsecureConnection,\n            responseAsStream: true\n          }), httpClient);\n        }\n      })();\n    },\n    asNodeStream() {\n      return _asyncToGenerator(function* () {\n        if (isNodeLike) {\n          return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), {\n            allowInsecureConnection,\n            responseAsStream: true\n          }), httpClient);\n        } else {\n          throw new Error(\"`isNodeStream` is not supported in the browser environment. Use `asBrowserStream` to obtain the response body stream.\");\n        }\n      })();\n    }\n  };\n}\n//# sourceMappingURL=getClient.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}