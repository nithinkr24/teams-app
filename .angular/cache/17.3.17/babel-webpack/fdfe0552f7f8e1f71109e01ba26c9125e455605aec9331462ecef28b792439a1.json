{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { bearerTokenAuthenticationPolicy, createDefaultHttpClient, createPipelineFromOptions } from \"@azure/core-rest-pipeline\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { apiVersionPolicy } from \"./apiVersionPolicy.js\";\nimport { keyCredentialAuthenticationPolicy } from \"./keyCredentialAuthenticationPolicy.js\";\nlet cachedHttpClient;\n/**\n * Adds a credential policy to the pipeline if a credential is provided. If none is provided, no policy is added.\n */\nexport function addCredentialPipelinePolicy(pipeline, endpoint, options = {}) {\n  var _a, _b, _c, _d;\n  const {\n    credential,\n    clientOptions\n  } = options;\n  if (!credential) {\n    return;\n  }\n  if (isTokenCredential(credential)) {\n    const tokenPolicy = bearerTokenAuthenticationPolicy({\n      credential,\n      scopes: (_b = (_a = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.credentials) === null || _a === void 0 ? void 0 : _a.scopes) !== null && _b !== void 0 ? _b : `${endpoint}/.default`\n    });\n    pipeline.addPolicy(tokenPolicy);\n  } else if (isKeyCredential(credential)) {\n    if (!((_c = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.credentials) === null || _c === void 0 ? void 0 : _c.apiKeyHeaderName)) {\n      throw new Error(`Missing API Key Header Name`);\n    }\n    const keyPolicy = keyCredentialAuthenticationPolicy(credential, (_d = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.credentials) === null || _d === void 0 ? void 0 : _d.apiKeyHeaderName);\n    pipeline.addPolicy(keyPolicy);\n  }\n}\n/**\n * Creates a default rest pipeline to re-use accross Rest Level Clients\n */\nexport function createDefaultPipeline(endpoint, credential, options = {}) {\n  const pipeline = createPipelineFromOptions(options);\n  pipeline.addPolicy(apiVersionPolicy(options));\n  addCredentialPipelinePolicy(pipeline, endpoint, {\n    credential,\n    clientOptions: options\n  });\n  return pipeline;\n}\nfunction isKeyCredential(credential) {\n  return credential.key !== undefined;\n}\nexport function getCachedDefaultHttpsClient() {\n  if (!cachedHttpClient) {\n    cachedHttpClient = createDefaultHttpClient();\n  }\n  return cachedHttpClient;\n}\n//# sourceMappingURL=clientHelpers.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}