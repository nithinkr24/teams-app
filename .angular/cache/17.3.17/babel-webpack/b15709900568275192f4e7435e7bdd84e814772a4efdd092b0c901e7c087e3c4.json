{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport debug from \"./debug.js\";\nconst TYPESPEC_RUNTIME_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\nconst levelMap = {\n  verbose: 400,\n  info: 300,\n  warning: 200,\n  error: 100\n};\nfunction patchLogMethod(parent, child) {\n  child.log = (...args) => {\n    parent.log(...args);\n  };\n}\nfunction isTypeSpecRuntimeLogLevel(level) {\n  return TYPESPEC_RUNTIME_LOG_LEVELS.includes(level);\n}\n/**\n * Creates a logger context base on the provided options.\n * @param options - The options for creating a logger context.\n * @returns The logger context.\n */\nexport function createLoggerContext(options) {\n  const registeredLoggers = new Set();\n  const logLevelFromEnv = typeof process !== \"undefined\" && process.env && process.env[options.logLevelEnvVarName] || undefined;\n  let logLevel;\n  const clientLogger = debug(options.namespace);\n  clientLogger.log = (...args) => {\n    debug.log(...args);\n  };\n  function contextSetLogLevel(level) {\n    if (level && !isTypeSpecRuntimeLogLevel(level)) {\n      throw new Error(`Unknown log level '${level}'. Acceptable values: ${TYPESPEC_RUNTIME_LOG_LEVELS.join(\",\")}`);\n    }\n    logLevel = level;\n    const enabledNamespaces = [];\n    for (const logger of registeredLoggers) {\n      if (shouldEnable(logger)) {\n        enabledNamespaces.push(logger.namespace);\n      }\n    }\n    debug.enable(enabledNamespaces.join(\",\"));\n  }\n  if (logLevelFromEnv) {\n    // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n    if (isTypeSpecRuntimeLogLevel(logLevelFromEnv)) {\n      contextSetLogLevel(logLevelFromEnv);\n    } else {\n      console.error(`${options.logLevelEnvVarName} set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${TYPESPEC_RUNTIME_LOG_LEVELS.join(\", \")}.`);\n    }\n  }\n  function shouldEnable(logger) {\n    return Boolean(logLevel && levelMap[logger.level] <= levelMap[logLevel]);\n  }\n  function createLogger(parent, level) {\n    const logger = Object.assign(parent.extend(level), {\n      level\n    });\n    patchLogMethod(parent, logger);\n    if (shouldEnable(logger)) {\n      const enabledNamespaces = debug.disable();\n      debug.enable(enabledNamespaces + \",\" + logger.namespace);\n    }\n    registeredLoggers.add(logger);\n    return logger;\n  }\n  function contextGetLogLevel() {\n    return logLevel;\n  }\n  function contextCreateClientLogger(namespace) {\n    const clientRootLogger = clientLogger.extend(namespace);\n    patchLogMethod(clientLogger, clientRootLogger);\n    return {\n      error: createLogger(clientRootLogger, \"error\"),\n      warning: createLogger(clientRootLogger, \"warning\"),\n      info: createLogger(clientRootLogger, \"info\"),\n      verbose: createLogger(clientRootLogger, \"verbose\")\n    };\n  }\n  return {\n    setLogLevel: contextSetLogLevel,\n    getLogLevel: contextGetLogLevel,\n    createClientLogger: contextCreateClientLogger,\n    logger: clientLogger\n  };\n}\nconst context = createLoggerContext({\n  logLevelEnvVarName: \"TYPESPEC_RUNTIME_LOG_LEVEL\",\n  namespace: \"typeSpecRuntime\"\n});\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const TypeSpecRuntimeLogger = context.logger;\n/**\n * Retrieves the currently specified log level.\n */\nexport function setLogLevel(logLevel) {\n  context.setLogLevel(logLevel);\n}\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel() {\n  return context.getLogLevel();\n}\n/**\n * Creates a logger for use by the SDKs that inherits from `TypeSpecRuntimeLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nexport function createClientLogger(namespace) {\n  return context.createClientLogger(namespace);\n}","map":{"version":3,"names":["debug","TYPESPEC_RUNTIME_LOG_LEVELS","levelMap","verbose","info","warning","error","patchLogMethod","parent","child","log","args","isTypeSpecRuntimeLogLevel","level","includes","createLoggerContext","options","registeredLoggers","Set","logLevelFromEnv","process","env","logLevelEnvVarName","undefined","logLevel","clientLogger","namespace","contextSetLogLevel","Error","join","enabledNamespaces","logger","shouldEnable","push","enable","console","Boolean","createLogger","Object","assign","extend","disable","add","contextGetLogLevel","contextCreateClientLogger","clientRootLogger","setLogLevel","getLogLevel","createClientLogger","context","TypeSpecRuntimeLogger"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/logger/logger.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport debug from \"./debug.js\";\nconst TYPESPEC_RUNTIME_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\nconst levelMap = {\n    verbose: 400,\n    info: 300,\n    warning: 200,\n    error: 100,\n};\nfunction patchLogMethod(parent, child) {\n    child.log = (...args) => {\n        parent.log(...args);\n    };\n}\nfunction isTypeSpecRuntimeLogLevel(level) {\n    return TYPESPEC_RUNTIME_LOG_LEVELS.includes(level);\n}\n/**\n * Creates a logger context base on the provided options.\n * @param options - The options for creating a logger context.\n * @returns The logger context.\n */\nexport function createLoggerContext(options) {\n    const registeredLoggers = new Set();\n    const logLevelFromEnv = (typeof process !== \"undefined\" && process.env && process.env[options.logLevelEnvVarName]) ||\n        undefined;\n    let logLevel;\n    const clientLogger = debug(options.namespace);\n    clientLogger.log = (...args) => {\n        debug.log(...args);\n    };\n    function contextSetLogLevel(level) {\n        if (level && !isTypeSpecRuntimeLogLevel(level)) {\n            throw new Error(`Unknown log level '${level}'. Acceptable values: ${TYPESPEC_RUNTIME_LOG_LEVELS.join(\",\")}`);\n        }\n        logLevel = level;\n        const enabledNamespaces = [];\n        for (const logger of registeredLoggers) {\n            if (shouldEnable(logger)) {\n                enabledNamespaces.push(logger.namespace);\n            }\n        }\n        debug.enable(enabledNamespaces.join(\",\"));\n    }\n    if (logLevelFromEnv) {\n        // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n        if (isTypeSpecRuntimeLogLevel(logLevelFromEnv)) {\n            contextSetLogLevel(logLevelFromEnv);\n        }\n        else {\n            console.error(`${options.logLevelEnvVarName} set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${TYPESPEC_RUNTIME_LOG_LEVELS.join(\", \")}.`);\n        }\n    }\n    function shouldEnable(logger) {\n        return Boolean(logLevel && levelMap[logger.level] <= levelMap[logLevel]);\n    }\n    function createLogger(parent, level) {\n        const logger = Object.assign(parent.extend(level), {\n            level,\n        });\n        patchLogMethod(parent, logger);\n        if (shouldEnable(logger)) {\n            const enabledNamespaces = debug.disable();\n            debug.enable(enabledNamespaces + \",\" + logger.namespace);\n        }\n        registeredLoggers.add(logger);\n        return logger;\n    }\n    function contextGetLogLevel() {\n        return logLevel;\n    }\n    function contextCreateClientLogger(namespace) {\n        const clientRootLogger = clientLogger.extend(namespace);\n        patchLogMethod(clientLogger, clientRootLogger);\n        return {\n            error: createLogger(clientRootLogger, \"error\"),\n            warning: createLogger(clientRootLogger, \"warning\"),\n            info: createLogger(clientRootLogger, \"info\"),\n            verbose: createLogger(clientRootLogger, \"verbose\"),\n        };\n    }\n    return {\n        setLogLevel: contextSetLogLevel,\n        getLogLevel: contextGetLogLevel,\n        createClientLogger: contextCreateClientLogger,\n        logger: clientLogger,\n    };\n}\nconst context = createLoggerContext({\n    logLevelEnvVarName: \"TYPESPEC_RUNTIME_LOG_LEVEL\",\n    namespace: \"typeSpecRuntime\",\n});\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const TypeSpecRuntimeLogger = context.logger;\n/**\n * Retrieves the currently specified log level.\n */\nexport function setLogLevel(logLevel) {\n    context.setLogLevel(logLevel);\n}\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel() {\n    return context.getLogLevel();\n}\n/**\n * Creates a logger for use by the SDKs that inherits from `TypeSpecRuntimeLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nexport function createClientLogger(namespace) {\n    return context.createClientLogger(namespace);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}