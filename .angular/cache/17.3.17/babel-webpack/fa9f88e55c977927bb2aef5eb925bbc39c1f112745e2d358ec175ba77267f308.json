{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createTokenCycler } from \"../util/tokenCycler.js\";\nimport { logger as coreLogger } from \"../log.js\";\n/**\n * The programmatic identifier of the auxiliaryAuthenticationHeaderPolicy.\n */\nexport const auxiliaryAuthenticationHeaderPolicyName = \"auxiliaryAuthenticationHeaderPolicy\";\nconst AUTHORIZATION_AUXILIARY_HEADER = \"x-ms-authorization-auxiliary\";\nfunction sendAuthorizeRequest(_x) {\n  return _sendAuthorizeRequest.apply(this, arguments);\n}\n/**\n * A policy for external tokens to `x-ms-authorization-auxiliary` header.\n * This header will be used when creating a cross-tenant application we may need to handle authentication requests\n * for resources that are in different tenants.\n * You could see [ARM docs](https://learn.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant) for a rundown of how this feature works\n */\nfunction _sendAuthorizeRequest() {\n  _sendAuthorizeRequest = _asyncToGenerator(function* (options) {\n    var _a, _b;\n    const {\n      scopes,\n      getAccessToken,\n      request\n    } = options;\n    const getTokenOptions = {\n      abortSignal: request.abortSignal,\n      tracingOptions: request.tracingOptions\n    };\n    return (_b = (_a = yield getAccessToken(scopes, getTokenOptions)) === null || _a === void 0 ? void 0 : _a.token) !== null && _b !== void 0 ? _b : \"\";\n  });\n  return _sendAuthorizeRequest.apply(this, arguments);\n}\nexport function auxiliaryAuthenticationHeaderPolicy(options) {\n  const {\n    credentials,\n    scopes\n  } = options;\n  const logger = options.logger || coreLogger;\n  const tokenCyclerMap = new WeakMap();\n  return {\n    name: auxiliaryAuthenticationHeaderPolicyName,\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        if (!request.url.toLowerCase().startsWith(\"https://\")) {\n          throw new Error(\"Bearer token authentication for auxiliary header is not permitted for non-TLS protected (non-https) URLs.\");\n        }\n        if (!credentials || credentials.length === 0) {\n          logger.info(`${auxiliaryAuthenticationHeaderPolicyName} header will not be set due to empty credentials.`);\n          return next(request);\n        }\n        const tokenPromises = [];\n        for (const credential of credentials) {\n          let getAccessToken = tokenCyclerMap.get(credential);\n          if (!getAccessToken) {\n            getAccessToken = createTokenCycler(credential);\n            tokenCyclerMap.set(credential, getAccessToken);\n          }\n          tokenPromises.push(sendAuthorizeRequest({\n            scopes: Array.isArray(scopes) ? scopes : [scopes],\n            request,\n            getAccessToken,\n            logger\n          }));\n        }\n        const auxiliaryTokens = (yield Promise.all(tokenPromises)).filter(token => Boolean(token));\n        if (auxiliaryTokens.length === 0) {\n          logger.warning(`None of the auxiliary tokens are valid. ${AUTHORIZATION_AUXILIARY_HEADER} header will not be set.`);\n          return next(request);\n        }\n        request.headers.set(AUTHORIZATION_AUXILIARY_HEADER, auxiliaryTokens.map(token => `Bearer ${token}`).join(\", \"));\n        return next(request);\n      })();\n    }\n  };\n}\n//# sourceMappingURL=auxiliaryAuthenticationHeaderPolicy.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}