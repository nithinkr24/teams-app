{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { stringToUint8Array, uint8ArrayToString } from \"./bytesEncoding.js\";\nlet subtleCrypto;\n/**\n * Returns a cached reference to the Web API crypto.subtle object.\n * @internal\n */\nfunction getCrypto() {\n  if (subtleCrypto) {\n    return subtleCrypto;\n  }\n  if (!self.crypto || !self.crypto.subtle) {\n    throw new Error(\"Your browser environment does not support cryptography functions.\");\n  }\n  subtleCrypto = self.crypto.subtle;\n  return subtleCrypto;\n}\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport function computeSha256Hmac(_x, _x2, _x3) {\n  return _computeSha256Hmac.apply(this, arguments);\n}\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nfunction _computeSha256Hmac() {\n  _computeSha256Hmac = _asyncToGenerator(function* (key, stringToSign, encoding) {\n    const crypto = getCrypto();\n    const keyBytes = stringToUint8Array(key, \"base64\");\n    const stringToSignBytes = stringToUint8Array(stringToSign, \"utf-8\");\n    const cryptoKey = yield crypto.importKey(\"raw\", keyBytes, {\n      name: \"HMAC\",\n      hash: {\n        name: \"SHA-256\"\n      }\n    }, false, [\"sign\"]);\n    const signature = yield crypto.sign({\n      name: \"HMAC\",\n      hash: {\n        name: \"SHA-256\"\n      }\n    }, cryptoKey, stringToSignBytes);\n    return uint8ArrayToString(new Uint8Array(signature), encoding);\n  });\n  return _computeSha256Hmac.apply(this, arguments);\n}\nexport function computeSha256Hash(_x4, _x5) {\n  return _computeSha256Hash.apply(this, arguments);\n}\n//# sourceMappingURL=sha256.common.js.map\nfunction _computeSha256Hash() {\n  _computeSha256Hash = _asyncToGenerator(function* (content, encoding) {\n    const contentBytes = stringToUint8Array(content, \"utf-8\");\n    const digest = yield getCrypto().digest({\n      name: \"SHA-256\"\n    }, contentBytes);\n    return uint8ArrayToString(new Uint8Array(digest), encoding);\n  });\n  return _computeSha256Hash.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}