{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { RestError } from \"../restError.js\";\nimport { createHttpHeaders } from \"../httpHeaders.js\";\nimport { stringToUint8Array } from \"../util/bytesEncoding.js\";\nimport { isBinaryBody } from \"../util/typeGuards.js\";\n/**\n * Get value of a header in the part descriptor ignoring case\n */\nfunction getHeaderValue(descriptor, headerName) {\n  if (descriptor.headers) {\n    const actualHeaderName = Object.keys(descriptor.headers).find(x => x.toLowerCase() === headerName.toLowerCase());\n    if (actualHeaderName) {\n      return descriptor.headers[actualHeaderName];\n    }\n  }\n  return undefined;\n}\nfunction getPartContentType(descriptor) {\n  const contentTypeHeader = getHeaderValue(descriptor, \"content-type\");\n  if (contentTypeHeader) {\n    return contentTypeHeader;\n  }\n  // Special value of null means content type is to be omitted\n  if (descriptor.contentType === null) {\n    return undefined;\n  }\n  if (descriptor.contentType) {\n    return descriptor.contentType;\n  }\n  const {\n    body\n  } = descriptor;\n  if (body === null || body === undefined) {\n    return undefined;\n  }\n  if (typeof body === \"string\" || typeof body === \"number\" || typeof body === \"boolean\") {\n    return \"text/plain; charset=UTF-8\";\n  }\n  if (body instanceof Blob) {\n    return body.type || \"application/octet-stream\";\n  }\n  if (isBinaryBody(body)) {\n    return \"application/octet-stream\";\n  }\n  // arbitrary non-text object -> generic JSON content type by default. We will try to JSON.stringify the body.\n  return \"application/json\";\n}\n/**\n * Enclose value in quotes and escape special characters, for use in the Content-Disposition header\n */\nfunction escapeDispositionField(value) {\n  return JSON.stringify(value);\n}\nfunction getContentDisposition(descriptor) {\n  var _a;\n  const contentDispositionHeader = getHeaderValue(descriptor, \"content-disposition\");\n  if (contentDispositionHeader) {\n    return contentDispositionHeader;\n  }\n  if (descriptor.dispositionType === undefined && descriptor.name === undefined && descriptor.filename === undefined) {\n    return undefined;\n  }\n  const dispositionType = (_a = descriptor.dispositionType) !== null && _a !== void 0 ? _a : \"form-data\";\n  let disposition = dispositionType;\n  if (descriptor.name) {\n    disposition += `; name=${escapeDispositionField(descriptor.name)}`;\n  }\n  let filename = undefined;\n  if (descriptor.filename) {\n    filename = descriptor.filename;\n  } else if (typeof File !== \"undefined\" && descriptor.body instanceof File) {\n    const filenameFromFile = descriptor.body.name;\n    if (filenameFromFile !== \"\") {\n      filename = filenameFromFile;\n    }\n  }\n  if (filename) {\n    disposition += `; filename=${escapeDispositionField(filename)}`;\n  }\n  return disposition;\n}\nfunction normalizeBody(body, contentType) {\n  if (body === undefined) {\n    // zero-length body\n    return new Uint8Array([]);\n  }\n  // binary and primitives should go straight on the wire regardless of content type\n  if (isBinaryBody(body)) {\n    return body;\n  }\n  if (typeof body === \"string\" || typeof body === \"number\" || typeof body === \"boolean\") {\n    return stringToUint8Array(String(body), \"utf-8\");\n  }\n  // stringify objects for JSON-ish content types e.g. application/json, application/merge-patch+json, application/vnd.oci.manifest.v1+json, application.json; charset=UTF-8\n  if (contentType && /application\\/(.+\\+)?json(;.+)?/i.test(String(contentType))) {\n    return stringToUint8Array(JSON.stringify(body), \"utf-8\");\n  }\n  throw new RestError(`Unsupported body/content-type combination: ${body}, ${contentType}`);\n}\nexport function buildBodyPart(descriptor) {\n  var _a;\n  const contentType = getPartContentType(descriptor);\n  const contentDisposition = getContentDisposition(descriptor);\n  const headers = createHttpHeaders((_a = descriptor.headers) !== null && _a !== void 0 ? _a : {});\n  if (contentType) {\n    headers.set(\"content-type\", contentType);\n  }\n  if (contentDisposition) {\n    headers.set(\"content-disposition\", contentDisposition);\n  }\n  const body = normalizeBody(descriptor.body, contentType);\n  return {\n    headers,\n    body\n  };\n}\nexport function buildMultipartBody(parts) {\n  return {\n    parts: parts.map(buildBodyPart)\n  };\n}","map":{"version":3,"names":["RestError","createHttpHeaders","stringToUint8Array","isBinaryBody","getHeaderValue","descriptor","headerName","headers","actualHeaderName","Object","keys","find","x","toLowerCase","undefined","getPartContentType","contentTypeHeader","contentType","body","Blob","type","escapeDispositionField","value","JSON","stringify","getContentDisposition","_a","contentDispositionHeader","dispositionType","name","filename","disposition","File","filenameFromFile","normalizeBody","Uint8Array","String","test","buildBodyPart","contentDisposition","set","buildMultipartBody","parts","map"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/client/multipart.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { RestError } from \"../restError.js\";\nimport { createHttpHeaders } from \"../httpHeaders.js\";\nimport { stringToUint8Array } from \"../util/bytesEncoding.js\";\nimport { isBinaryBody } from \"../util/typeGuards.js\";\n/**\n * Get value of a header in the part descriptor ignoring case\n */\nfunction getHeaderValue(descriptor, headerName) {\n    if (descriptor.headers) {\n        const actualHeaderName = Object.keys(descriptor.headers).find((x) => x.toLowerCase() === headerName.toLowerCase());\n        if (actualHeaderName) {\n            return descriptor.headers[actualHeaderName];\n        }\n    }\n    return undefined;\n}\nfunction getPartContentType(descriptor) {\n    const contentTypeHeader = getHeaderValue(descriptor, \"content-type\");\n    if (contentTypeHeader) {\n        return contentTypeHeader;\n    }\n    // Special value of null means content type is to be omitted\n    if (descriptor.contentType === null) {\n        return undefined;\n    }\n    if (descriptor.contentType) {\n        return descriptor.contentType;\n    }\n    const { body } = descriptor;\n    if (body === null || body === undefined) {\n        return undefined;\n    }\n    if (typeof body === \"string\" || typeof body === \"number\" || typeof body === \"boolean\") {\n        return \"text/plain; charset=UTF-8\";\n    }\n    if (body instanceof Blob) {\n        return body.type || \"application/octet-stream\";\n    }\n    if (isBinaryBody(body)) {\n        return \"application/octet-stream\";\n    }\n    // arbitrary non-text object -> generic JSON content type by default. We will try to JSON.stringify the body.\n    return \"application/json\";\n}\n/**\n * Enclose value in quotes and escape special characters, for use in the Content-Disposition header\n */\nfunction escapeDispositionField(value) {\n    return JSON.stringify(value);\n}\nfunction getContentDisposition(descriptor) {\n    var _a;\n    const contentDispositionHeader = getHeaderValue(descriptor, \"content-disposition\");\n    if (contentDispositionHeader) {\n        return contentDispositionHeader;\n    }\n    if (descriptor.dispositionType === undefined &&\n        descriptor.name === undefined &&\n        descriptor.filename === undefined) {\n        return undefined;\n    }\n    const dispositionType = (_a = descriptor.dispositionType) !== null && _a !== void 0 ? _a : \"form-data\";\n    let disposition = dispositionType;\n    if (descriptor.name) {\n        disposition += `; name=${escapeDispositionField(descriptor.name)}`;\n    }\n    let filename = undefined;\n    if (descriptor.filename) {\n        filename = descriptor.filename;\n    }\n    else if (typeof File !== \"undefined\" && descriptor.body instanceof File) {\n        const filenameFromFile = descriptor.body.name;\n        if (filenameFromFile !== \"\") {\n            filename = filenameFromFile;\n        }\n    }\n    if (filename) {\n        disposition += `; filename=${escapeDispositionField(filename)}`;\n    }\n    return disposition;\n}\nfunction normalizeBody(body, contentType) {\n    if (body === undefined) {\n        // zero-length body\n        return new Uint8Array([]);\n    }\n    // binary and primitives should go straight on the wire regardless of content type\n    if (isBinaryBody(body)) {\n        return body;\n    }\n    if (typeof body === \"string\" || typeof body === \"number\" || typeof body === \"boolean\") {\n        return stringToUint8Array(String(body), \"utf-8\");\n    }\n    // stringify objects for JSON-ish content types e.g. application/json, application/merge-patch+json, application/vnd.oci.manifest.v1+json, application.json; charset=UTF-8\n    if (contentType && /application\\/(.+\\+)?json(;.+)?/i.test(String(contentType))) {\n        return stringToUint8Array(JSON.stringify(body), \"utf-8\");\n    }\n    throw new RestError(`Unsupported body/content-type combination: ${body}, ${contentType}`);\n}\nexport function buildBodyPart(descriptor) {\n    var _a;\n    const contentType = getPartContentType(descriptor);\n    const contentDisposition = getContentDisposition(descriptor);\n    const headers = createHttpHeaders((_a = descriptor.headers) !== null && _a !== void 0 ? _a : {});\n    if (contentType) {\n        headers.set(\"content-type\", contentType);\n    }\n    if (contentDisposition) {\n        headers.set(\"content-disposition\", contentDisposition);\n    }\n    const body = normalizeBody(descriptor.body, contentType);\n    return {\n        headers,\n        body,\n    };\n}\nexport function buildMultipartBody(parts) {\n    return { parts: parts.map(buildBodyPart) };\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,iBAAiB,QAAQ,mBAAmB;AACrD,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,YAAY,QAAQ,uBAAuB;AACpD;AACA;AACA;AACA,SAASC,cAAcA,CAACC,UAAU,EAAEC,UAAU,EAAE;EAC5C,IAAID,UAAU,CAACE,OAAO,EAAE;IACpB,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,IAAI,CAACL,UAAU,CAACE,OAAO,CAAC,CAACI,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,WAAW,CAAC,CAAC,KAAKP,UAAU,CAACO,WAAW,CAAC,CAAC,CAAC;IAClH,IAAIL,gBAAgB,EAAE;MAClB,OAAOH,UAAU,CAACE,OAAO,CAACC,gBAAgB,CAAC;IAC/C;EACJ;EACA,OAAOM,SAAS;AACpB;AACA,SAASC,kBAAkBA,CAACV,UAAU,EAAE;EACpC,MAAMW,iBAAiB,GAAGZ,cAAc,CAACC,UAAU,EAAE,cAAc,CAAC;EACpE,IAAIW,iBAAiB,EAAE;IACnB,OAAOA,iBAAiB;EAC5B;EACA;EACA,IAAIX,UAAU,CAACY,WAAW,KAAK,IAAI,EAAE;IACjC,OAAOH,SAAS;EACpB;EACA,IAAIT,UAAU,CAACY,WAAW,EAAE;IACxB,OAAOZ,UAAU,CAACY,WAAW;EACjC;EACA,MAAM;IAAEC;EAAK,CAAC,GAAGb,UAAU;EAC3B,IAAIa,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKJ,SAAS,EAAE;IACrC,OAAOA,SAAS;EACpB;EACA,IAAI,OAAOI,IAAI,KAAK,QAAQ,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,OAAOA,IAAI,KAAK,SAAS,EAAE;IACnF,OAAO,2BAA2B;EACtC;EACA,IAAIA,IAAI,YAAYC,IAAI,EAAE;IACtB,OAAOD,IAAI,CAACE,IAAI,IAAI,0BAA0B;EAClD;EACA,IAAIjB,YAAY,CAACe,IAAI,CAAC,EAAE;IACpB,OAAO,0BAA0B;EACrC;EACA;EACA,OAAO,kBAAkB;AAC7B;AACA;AACA;AACA;AACA,SAASG,sBAAsBA,CAACC,KAAK,EAAE;EACnC,OAAOC,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC;AAChC;AACA,SAASG,qBAAqBA,CAACpB,UAAU,EAAE;EACvC,IAAIqB,EAAE;EACN,MAAMC,wBAAwB,GAAGvB,cAAc,CAACC,UAAU,EAAE,qBAAqB,CAAC;EAClF,IAAIsB,wBAAwB,EAAE;IAC1B,OAAOA,wBAAwB;EACnC;EACA,IAAItB,UAAU,CAACuB,eAAe,KAAKd,SAAS,IACxCT,UAAU,CAACwB,IAAI,KAAKf,SAAS,IAC7BT,UAAU,CAACyB,QAAQ,KAAKhB,SAAS,EAAE;IACnC,OAAOA,SAAS;EACpB;EACA,MAAMc,eAAe,GAAG,CAACF,EAAE,GAAGrB,UAAU,CAACuB,eAAe,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,WAAW;EACtG,IAAIK,WAAW,GAAGH,eAAe;EACjC,IAAIvB,UAAU,CAACwB,IAAI,EAAE;IACjBE,WAAW,IAAI,UAAUV,sBAAsB,CAAChB,UAAU,CAACwB,IAAI,CAAC,EAAE;EACtE;EACA,IAAIC,QAAQ,GAAGhB,SAAS;EACxB,IAAIT,UAAU,CAACyB,QAAQ,EAAE;IACrBA,QAAQ,GAAGzB,UAAU,CAACyB,QAAQ;EAClC,CAAC,MACI,IAAI,OAAOE,IAAI,KAAK,WAAW,IAAI3B,UAAU,CAACa,IAAI,YAAYc,IAAI,EAAE;IACrE,MAAMC,gBAAgB,GAAG5B,UAAU,CAACa,IAAI,CAACW,IAAI;IAC7C,IAAII,gBAAgB,KAAK,EAAE,EAAE;MACzBH,QAAQ,GAAGG,gBAAgB;IAC/B;EACJ;EACA,IAAIH,QAAQ,EAAE;IACVC,WAAW,IAAI,cAAcV,sBAAsB,CAACS,QAAQ,CAAC,EAAE;EACnE;EACA,OAAOC,WAAW;AACtB;AACA,SAASG,aAAaA,CAAChB,IAAI,EAAED,WAAW,EAAE;EACtC,IAAIC,IAAI,KAAKJ,SAAS,EAAE;IACpB;IACA,OAAO,IAAIqB,UAAU,CAAC,EAAE,CAAC;EAC7B;EACA;EACA,IAAIhC,YAAY,CAACe,IAAI,CAAC,EAAE;IACpB,OAAOA,IAAI;EACf;EACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,OAAOA,IAAI,KAAK,SAAS,EAAE;IACnF,OAAOhB,kBAAkB,CAACkC,MAAM,CAAClB,IAAI,CAAC,EAAE,OAAO,CAAC;EACpD;EACA;EACA,IAAID,WAAW,IAAI,iCAAiC,CAACoB,IAAI,CAACD,MAAM,CAACnB,WAAW,CAAC,CAAC,EAAE;IAC5E,OAAOf,kBAAkB,CAACqB,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,EAAE,OAAO,CAAC;EAC5D;EACA,MAAM,IAAIlB,SAAS,CAAC,8CAA8CkB,IAAI,KAAKD,WAAW,EAAE,CAAC;AAC7F;AACA,OAAO,SAASqB,aAAaA,CAACjC,UAAU,EAAE;EACtC,IAAIqB,EAAE;EACN,MAAMT,WAAW,GAAGF,kBAAkB,CAACV,UAAU,CAAC;EAClD,MAAMkC,kBAAkB,GAAGd,qBAAqB,CAACpB,UAAU,CAAC;EAC5D,MAAME,OAAO,GAAGN,iBAAiB,CAAC,CAACyB,EAAE,GAAGrB,UAAU,CAACE,OAAO,MAAM,IAAI,IAAImB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC,CAAC;EAChG,IAAIT,WAAW,EAAE;IACbV,OAAO,CAACiC,GAAG,CAAC,cAAc,EAAEvB,WAAW,CAAC;EAC5C;EACA,IAAIsB,kBAAkB,EAAE;IACpBhC,OAAO,CAACiC,GAAG,CAAC,qBAAqB,EAAED,kBAAkB,CAAC;EAC1D;EACA,MAAMrB,IAAI,GAAGgB,aAAa,CAAC7B,UAAU,CAACa,IAAI,EAAED,WAAW,CAAC;EACxD,OAAO;IACHV,OAAO;IACPW;EACJ,CAAC;AACL;AACA,OAAO,SAASuB,kBAAkBA,CAACC,KAAK,EAAE;EACtC,OAAO;IAAEA,KAAK,EAAEA,KAAK,CAACC,GAAG,CAACL,aAAa;EAAE,CAAC;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}