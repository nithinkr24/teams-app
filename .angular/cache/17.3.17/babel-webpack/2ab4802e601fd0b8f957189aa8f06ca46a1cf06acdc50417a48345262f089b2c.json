{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from 'rxjs';\nimport { ChatClient } from '@azure/communication-chat';\nimport { AzureCommunicationTokenCredential } from '@azure/communication-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nconst _c0 = a0 => ({\n  \"dark-mode\": a0\n});\nconst _c1 = a0 => ({\n  \"own-message\": a0\n});\nfunction ChatComponentsComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵelement(1, \"div\", 12);\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵtext(3, \"Loading messages...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ChatComponentsComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14);\n    i0.ɵɵtext(2, \"\\uD83D\\uDCAC\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4, \"No messages yet. Start the conversation!\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ChatComponentsComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"div\", 16)(2, \"div\", 17);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"div\", 18);\n    i0.ɵɵelementStart(5, \"div\", 19);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const message_r1 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c1, message_r1.sender === ctx_r1.userId));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(message_r1.senderDisplayName || \"Unknown\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"innerHTML\", message_r1.content, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.formatMessageTime(message_r1.createdOn));\n  }\n}\nexport let ChatComponentsComponent = /*#__PURE__*/(() => {\n  var _ChatComponentsComponent;\n  class ChatComponentsComponent {\n    constructor() {\n      this.isDarkMode = false;\n      this.threadId = '';\n      this.userId = '';\n      this.token = '';\n      this.endpointUrl = '';\n      this.displayName = '';\n      this.destroy$ = new Subject();\n      this.messages = [];\n      this.messageText = '';\n      this.isLoading = false;\n      this.canSendMessage = false;\n    }\n    ngOnInit() {\n      console.log('ChatComponentsComponent ngOnInit with inputs:', {\n        threadId: this.threadId,\n        userId: this.userId,\n        hasToken: !!this.token,\n        hasEndpointUrl: !!this.endpointUrl,\n        displayName: this.displayName\n      });\n      // Check if we have all required inputs\n      if (this.threadId && this.userId && this.token && this.endpointUrl && this.displayName) {\n        console.log('All required inputs available, initializing chat');\n        this.initializeChatThreadClient();\n        this.loadMessages();\n      } else {\n        console.log('Some required inputs are missing, waiting for changes');\n      }\n      // Add window resize listener for better responsiveness\n      window.addEventListener('resize', this.handleResize.bind(this));\n      // Add real-time message listener\n      window.addEventListener('messageReceived', this.handleMessageReceived.bind(this));\n      // Log component state\n      console.log('ChatComponentsComponent initialized with threadId:', this.threadId);\n    }\n    handleMessageReceived(event) {\n      const customEvent = event;\n      const {\n        threadId,\n        event: messageEvent\n      } = customEvent.detail;\n      // Only update if the message is for the current thread\n      if (threadId === this.threadId) {\n        console.log('Real-time message received for current thread:', threadId);\n        this.refreshMessages();\n      }\n    }\n    handleResize() {\n      // Ensure input is visible after resize\n      this.ensureInputVisible();\n    }\n    ngOnChanges(changes) {\n      console.log('ChatComponentsComponent ngOnChanges:', changes);\n      // Check if threadId has changed\n      if (changes['threadId'] && !changes['threadId'].firstChange) {\n        const newThreadId = changes['threadId'].currentValue;\n        const previousThreadId = changes['threadId'].previousValue;\n        if (newThreadId && newThreadId !== previousThreadId) {\n          console.log('Thread changed from', previousThreadId, 'to', newThreadId);\n          this.handleThreadChange(newThreadId);\n        }\n      }\n      // Check if other critical inputs have changed\n      if (changes['userId'] || changes['token'] || changes['endpointUrl'] || changes['displayName']) {\n        var _changes$userId, _changes$token, _changes$endpointUrl, _changes$displayName;\n        const newUserId = ((_changes$userId = changes['userId']) === null || _changes$userId === void 0 ? void 0 : _changes$userId.currentValue) || this.userId;\n        const newToken = ((_changes$token = changes['token']) === null || _changes$token === void 0 ? void 0 : _changes$token.currentValue) || this.token;\n        const newEndpointUrl = ((_changes$endpointUrl = changes['endpointUrl']) === null || _changes$endpointUrl === void 0 ? void 0 : _changes$endpointUrl.currentValue) || this.endpointUrl;\n        const newDisplayName = ((_changes$displayName = changes['displayName']) === null || _changes$displayName === void 0 ? void 0 : _changes$displayName.currentValue) || this.displayName;\n        if (newUserId && newToken && newEndpointUrl && this.threadId && newDisplayName) {\n          console.log('Critical inputs changed, reinitializing chat');\n          this.handleThreadChange(this.threadId);\n        }\n      }\n    }\n    handleThreadChange(newThreadId) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        console.log('Handling thread change to:', newThreadId);\n        // Clear previous state immediately\n        _this.messages = [];\n        _this.messageText = '';\n        _this.isLoading = true;\n        _this.canSendMessage = false;\n        // Dispose of old chat thread client\n        _this.disposeChatThreadClient();\n        // Wait a bit to ensure UI updates\n        yield new Promise(resolve => setTimeout(resolve, 100));\n        // Initialize new thread\n        try {\n          yield _this.initializeChatThreadClient();\n          if (_this.chatThreadClient) {\n            yield _this.loadMessages();\n          }\n        } catch (error) {\n          console.error('Failed to initialize new thread:', error);\n          _this.isLoading = false;\n        }\n      })();\n    }\n    disposeChatThreadClient() {\n      if (this.chatThreadClient) {\n        console.log('Disposing of old chat thread client');\n        // Note: ChatThreadClient doesn't have a dispose method, but we can clear the reference\n        this.chatThreadClient = undefined;\n      }\n    }\n    // Public method to manually trigger message loading\n    refreshMessages() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        console.log('Manually refreshing messages');\n        if (_this2.chatThreadClient) {\n          yield _this2.loadMessages();\n        } else {\n          console.log('No chat thread client available, reinitializing first');\n          yield _this2.initializeChatThreadClient();\n          if (_this2.chatThreadClient) {\n            yield _this2.loadMessages();\n          }\n        }\n      })();\n    }\n    // Public method to force refresh for current thread\n    forceRefreshMessages() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        console.log('Force refreshing messages for thread:', _this3.threadId);\n        // Clear current messages and reload\n        _this3.messages = [];\n        _this3.isLoading = true;\n        try {\n          yield _this3.initializeChatThreadClient();\n          if (_this3.chatThreadClient) {\n            yield _this3.loadMessages();\n          }\n        } catch (error) {\n          console.error('Failed to force refresh messages:', error);\n          _this3.isLoading = false;\n        }\n      })();\n    }\n    // Method to ensure input box is visible\n    ensureInputVisible() {\n      // Scroll to bottom to ensure input is visible\n      setTimeout(() => {\n        const chatContainer = document.querySelector('.chat-components-container');\n        if (chatContainer) {\n          chatContainer.scrollTop = chatContainer.scrollHeight;\n        }\n      }, 100);\n    }\n    // Method to resolve chat thread\n    resolveChatThread() {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        if (!_this4.chatThreadClient) {\n          console.error('No chat thread client available to resolve thread');\n          return;\n        }\n        try {\n          console.log('Resolving chat thread:', _this4.threadId);\n          // Disable send button during resolve\n          _this4.canSendMessage = false;\n          // Update the chat thread metadata to notify the CustomerApp that the chat has been resolved\n          yield _this4.chatThreadClient.updateProperties({\n            metadata: {\n              isResolvedByAgent: 'true'\n            }\n          });\n          console.log('Chat thread metadata updated successfully');\n          // Show success message\n          _this4.showSuccessMessage('Chat resolved successfully');\n          // Re-enable send button\n          _this4.canSendMessage = true;\n        } catch (error) {\n          console.error('Failed to update chat thread metadata:', error);\n          _this4.canSendMessage = true;\n          _this4.showErrorMessage('Failed to resolve chat. Please try again.');\n        }\n      })();\n    }\n    showSuccessMessage(message) {\n      // Create a temporary success message display\n      const successDiv = document.createElement('div');\n      successDiv.className = 'success-message';\n      successDiv.textContent = message;\n      successDiv.style.cssText = `\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: #107c10;\n      color: white;\n      padding: 12px 20px;\n      border-radius: 4px;\n      z-index: 1000;\n      font-size: 14px;\n    `;\n      document.body.appendChild(successDiv);\n      // Remove after 3 seconds\n      setTimeout(() => {\n        if (successDiv.parentNode) {\n          successDiv.parentNode.removeChild(successDiv);\n        }\n      }, 3000);\n    }\n    ngOnDestroy() {\n      console.log('ChatComponentsComponent destroying, cleaning up resources');\n      // Dispose of chat thread client\n      this.disposeChatThreadClient();\n      // Clear messages and state\n      this.messages = [];\n      this.messageText = '';\n      this.isLoading = false;\n      this.canSendMessage = false;\n      // Complete destroy subject\n      this.destroy$.next();\n      this.destroy$.complete();\n      // Remove window resize listener\n      window.removeEventListener('resize', this.handleResize.bind(this));\n      // Remove real-time message listener\n      window.removeEventListener('messageReceived', this.handleMessageReceived.bind(this));\n    }\n    initializeChatThreadClient() {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          console.log('Initializing chat thread client with:', {\n            endpointUrl: _this5.endpointUrl,\n            threadId: _this5.threadId,\n            userId: _this5.userId,\n            displayName: _this5.displayName\n          });\n          if (!_this5.endpointUrl || !_this5.token || !_this5.threadId || !_this5.userId) {\n            console.error('Missing required parameters for chat initialization');\n            _this5.canSendMessage = false;\n            return;\n          }\n          // Validate that we're still working with the same thread (in case of rapid changes)\n          const currentThreadId = _this5.threadId;\n          const tokenCredential = new AzureCommunicationTokenCredential(_this5.token);\n          // Create a proper chat client first to ensure user context is set\n          const chatClient = new ChatClient(_this5.endpointUrl, tokenCredential);\n          // Start real-time notifications\n          yield chatClient.startRealtimeNotifications();\n          // Verify thread ID hasn't changed during initialization\n          if (_this5.threadId !== currentThreadId) {\n            console.log('Thread ID changed during initialization, aborting');\n            return;\n          }\n          // Now create the thread client\n          _this5.chatThreadClient = chatClient.getChatThreadClient(_this5.threadId);\n          _this5.canSendMessage = true;\n          console.log('Chat thread client initialized successfully for thread:', _this5.threadId);\n        } catch (error) {\n          console.error('Failed to initialize chat thread client:', error);\n          _this5.canSendMessage = false;\n          _this5.chatThreadClient = undefined;\n        }\n      })();\n    }\n    loadMessages() {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        if (!_this6.chatThreadClient) {\n          console.log('No chat thread client available, cannot load messages');\n          return;\n        }\n        // Validate that we're still working with the same thread\n        const currentThreadId = _this6.threadId;\n        try {\n          _this6.isLoading = true;\n          console.log('Loading messages for thread:', _this6.threadId);\n          const messages = yield _this6.chatThreadClient.listMessages().byPage().next();\n          // Check if thread ID changed during message loading\n          if (_this6.threadId !== currentThreadId) {\n            console.log('Thread ID changed during message loading, aborting');\n            return;\n          }\n          console.log('Raw messages from ACS:', messages.value);\n          console.log('Current user ID:', _this6.userId);\n          console.log('Current user display name:', _this6.displayName);\n          if (!messages.value || messages.value.length === 0) {\n            console.log('No messages found in thread');\n            _this6.messages = [];\n            // Ensure input is visible even when no messages\n            _this6.ensureInputVisible();\n            return;\n          }\n          const messageItems = messages.value.filter(msg => {\n            var _msg$content;\n            // Filter out system messages and empty content\n            return ((_msg$content = msg.content) === null || _msg$content === void 0 ? void 0 : _msg$content.message) && msg.content.message.trim().length > 0;\n          }).map(msg => {\n            var _msg$content2;\n            // Extract sender information\n            let senderId = '';\n            let senderDisplayName = 'Unknown';\n            console.log('Processing message:', msg);\n            console.log('Message sender:', msg.sender);\n            console.log('Message senderDisplayName:', msg.senderDisplayName);\n            if (msg.sender) {\n              // Check if it's a CommunicationUserKind\n              if ('communicationUserId' in msg.sender) {\n                senderId = msg.sender.communicationUserId;\n                console.log('Found communicationUserId:', senderId);\n                // If it's the current user, use their display name\n                if (senderId === _this6.userId) {\n                  senderDisplayName = _this6.displayName || 'You';\n                  console.log('Current user message, using displayName:', senderDisplayName);\n                } else {\n                  // For other users, try to get their display name from the message\n                  // In ACS, customer messages might not have senderDisplayName set\n                  senderDisplayName = msg.senderDisplayName || 'Customer';\n                  console.log('Other user message, using senderDisplayName:', senderDisplayName);\n                }\n              } else if ('kind' in msg.sender && msg.sender.kind === 'communicationUser') {\n                senderId = msg.sender.communicationUserId;\n                console.log('Found communicationUser kind with ID:', senderId);\n                if (senderId === _this6.userId) {\n                  senderDisplayName = _this6.displayName || 'You';\n                } else {\n                  senderDisplayName = msg.senderDisplayName || 'Customer';\n                }\n              } else {\n                console.log('Unknown sender type:', msg.sender);\n                // Try to extract any available information\n                if (msg.senderDisplayName) {\n                  senderDisplayName = msg.senderDisplayName;\n                }\n              }\n            }\n            // If we still don't have a proper sender ID, try to extract it from the message\n            if (!senderId && msg.sender) {\n              // Try different ways to extract the sender ID\n              if (typeof msg.sender === 'string') {\n                senderId = msg.sender;\n              } else if (typeof msg.sender === 'object') {\n                // Try to get any ID-like property\n                const senderObj = msg.sender;\n                senderId = senderObj.id || senderObj.communicationUserId || senderObj.userId || '';\n              }\n            }\n            const messageItem = {\n              id: msg.id,\n              content: ((_msg$content2 = msg.content) === null || _msg$content2 === void 0 ? void 0 : _msg$content2.message) || '',\n              sender: senderId,\n              senderDisplayName: senderDisplayName,\n              createdOn: msg.createdOn,\n              type: 'text' // Default to text type\n            };\n            console.log('Created message item:', messageItem);\n            return messageItem;\n          });\n          // Sort messages by creation time\n          messageItems.sort((a, b) => a.createdOn.getTime() - b.createdOn.getTime());\n          _this6.messages = messageItems;\n          console.log('Final processed messages:', messageItems);\n          console.log('Messages loaded successfully, count:', messageItems.length);\n          // Ensure input is visible after messages are loaded\n          _this6.ensureInputVisible();\n        } catch (error) {\n          console.error('Failed to load messages:', error);\n          _this6.messages = [];\n          // Ensure input is visible even on error\n          _this6.ensureInputVisible();\n          // Show user-friendly error message\n          _this6.showErrorMessage('Failed to load messages. Please refresh and try again.');\n        } finally {\n          _this6.isLoading = false;\n        }\n      })();\n    }\n    sendMessage() {\n      var _this7 = this;\n      return _asyncToGenerator(function* () {\n        if (!_this7.messageText.trim() || !_this7.chatThreadClient || !_this7.canSendMessage) {\n          console.log('Cannot send message:', {\n            hasText: !!_this7.messageText.trim(),\n            hasClient: !!_this7.chatThreadClient,\n            canSend: _this7.canSendMessage\n          });\n          return;\n        }\n        const messageContent = _this7.messageText.trim();\n        try {\n          console.log('Sending message:', messageContent);\n          _this7.messageText = '';\n          // Disable send button temporarily\n          _this7.canSendMessage = false;\n          // Send the message\n          yield _this7.chatThreadClient.sendMessage({\n            content: messageContent\n          });\n          console.log('Message sent successfully');\n          // Reload messages to show the new message\n          yield _this7.loadMessages();\n          // Re-enable send button\n          _this7.canSendMessage = true;\n        } catch (error) {\n          console.error('Failed to send message:', error);\n          // Restore the message text if sending failed\n          _this7.messageText = messageContent;\n          // Re-enable send button\n          _this7.canSendMessage = true;\n          // Show user-friendly error message\n          _this7.showErrorMessage('Failed to send message. Please try again.');\n        }\n      })();\n    }\n    showErrorMessage(message) {\n      // Create a temporary error message display\n      const errorDiv = document.createElement('div');\n      errorDiv.className = 'error-message';\n      errorDiv.textContent = message;\n      errorDiv.style.cssText = `\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: #d13438;\n      color: white;\n      padding: 12px 20px;\n      border-radius: 4px;\n      z-index: 1000;\n      font-size: 14px;\n    `;\n      document.body.appendChild(errorDiv);\n      // Remove after 3 seconds\n      setTimeout(() => {\n        if (errorDiv.parentNode) {\n          errorDiv.parentNode.removeChild(errorDiv);\n        }\n      }, 3000);\n    }\n    formatMessageTime(date) {\n      return new Date(date).toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  }\n  _ChatComponentsComponent = ChatComponentsComponent;\n  _ChatComponentsComponent.ɵfac = function ChatComponentsComponent_Factory(t) {\n    return new (t || _ChatComponentsComponent)();\n  };\n  _ChatComponentsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _ChatComponentsComponent,\n    selectors: [[\"app-chat-components\"]],\n    inputs: {\n      isDarkMode: \"isDarkMode\",\n      threadId: \"threadId\",\n      userId: \"userId\",\n      token: \"token\",\n      endpointUrl: \"endpointUrl\",\n      displayName: \"displayName\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 12,\n    vars: 9,\n    consts: [[1, \"chat-components-container\", 3, \"ngClass\"], [1, \"chat-messages\"], [1, \"message-list\"], [\"class\", \"loading-messages\", 4, \"ngIf\"], [\"class\", \"no-messages\", 4, \"ngIf\"], [\"class\", \"message-item\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"chat-input\"], [1, \"input-container\"], [\"type\", \"text\", \"placeholder\", \"Type a message...\", 1, \"message-input\", 3, \"ngModelChange\", \"keyup.enter\", \"ngModel\", \"disabled\"], [1, \"send-button\", 3, \"click\", \"disabled\"], [1, \"send-text\"], [1, \"loading-messages\"], [1, \"loading-spinner\"], [1, \"no-messages\"], [1, \"no-messages-icon\"], [1, \"message-item\", 3, \"ngClass\"], [1, \"message-content\"], [1, \"message-sender\"], [1, \"message-text\", 3, \"innerHTML\"], [1, \"message-time\"]],\n    template: function ChatComponentsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵtemplate(3, ChatComponentsComponent_div_3_Template, 4, 0, \"div\", 3)(4, ChatComponentsComponent_div_4_Template, 5, 0, \"div\", 4)(5, ChatComponentsComponent_div_5_Template, 7, 6, \"div\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 6)(7, \"div\", 7)(8, \"input\", 8);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function ChatComponentsComponent_Template_input_ngModelChange_8_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.messageText, $event) || (ctx.messageText = $event);\n          return $event;\n        });\n        i0.ɵɵlistener(\"keyup.enter\", function ChatComponentsComponent_Template_input_keyup_enter_8_listener() {\n          return ctx.sendMessage();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function ChatComponentsComponent_Template_button_click_9_listener() {\n          return ctx.sendMessage();\n        });\n        i0.ɵɵelementStart(10, \"span\", 10);\n        i0.ɵɵtext(11, \"Send\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx.isDarkMode));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoading && ctx.messages.length === 0);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.messageText);\n        i0.ɵɵproperty(\"disabled\", !ctx.canSendMessage);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"disabled\", !ctx.canSendMessage || !ctx.messageText.trim());\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n    styles: [\"[_nghost-%COMP%]{--font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;--font-size-xs: 11px;--font-size-sm: 12px;--font-size-md: 14px;--font-size-lg: 16px;--line-height-normal: 1.5;--font-weight-normal: 400;--font-weight-medium: 500;--font-weight-semibold: 600}.chat-components-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:100vh;background-color:#fff;min-height:400px;overflow:hidden;font-family:var(--font-family);font-size:var(--font-size-md);line-height:var(--line-height-normal);-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.chat-components-container.dark-mode[_ngcontent-%COMP%]{background-color:#1b1a19;color:#fff}.chat-messages[_ngcontent-%COMP%]{flex:1;overflow-y:auto;padding:16px;display:flex;flex-direction:column;-webkit-overflow-scrolling:touch}.message-list[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:16px;min-height:-webkit-min-content;min-height:min-content}.loading-messages[_ngcontent-%COMP%], .no-messages[_ngcontent-%COMP%]{text-align:center;color:#666;padding:20px;display:flex;flex-direction:column;align-items:center;gap:16px;flex:1;justify-content:center;min-height:200px}.dark-mode[_ngcontent-%COMP%]   .loading-messages[_ngcontent-%COMP%], .dark-mode[_ngcontent-%COMP%]   .no-messages[_ngcontent-%COMP%]{color:#ccc}.loading-spinner[_ngcontent-%COMP%]{width:32px;height:32px;border:3px solid #f3f2f1;border-top:3px solid #0078d4;border-radius:50%;animation:_ngcontent-%COMP%_spin 1s linear infinite}.no-messages-icon[_ngcontent-%COMP%]{font-size:48px;opacity:.6}@keyframes _ngcontent-%COMP%_spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.message-item[_ngcontent-%COMP%]{display:flex;justify-content:flex-start;margin-bottom:8px}.message-item.own-message[_ngcontent-%COMP%]{justify-content:flex-end}.message-content[_ngcontent-%COMP%]{max-width:70%;background-color:#f3f2f1;color:#323130;padding:12px 16px;border-radius:18px 18px 18px 4px;box-shadow:0 1px 3px #0000001a}.own-message[_ngcontent-%COMP%]   .message-content[_ngcontent-%COMP%]{background-color:#0078d4;color:#fff;border-bottom-left-radius:18px;border-bottom-right-radius:4px}.dark-mode[_ngcontent-%COMP%]   .message-content[_ngcontent-%COMP%]{background-color:#3b3a39;color:#fff}.dark-mode[_ngcontent-%COMP%]   .own-message[_ngcontent-%COMP%]   .message-content[_ngcontent-%COMP%]{background-color:#106ebe}.message-sender[_ngcontent-%COMP%]{font-size:var(--font-size-sm);font-weight:var(--font-weight-semibold);margin-bottom:4px;opacity:.8;letter-spacing:.1px}.message-text[_ngcontent-%COMP%]{font-size:var(--font-size-md);margin-bottom:4px;line-height:var(--line-height-normal);word-wrap:break-word;white-space:pre-wrap;font-weight:var(--font-weight-normal)}.message-time[_ngcontent-%COMP%]{font-size:var(--font-size-xs);opacity:.8;text-align:right;font-weight:var(--font-weight-normal);letter-spacing:.1px}.chat-input[_ngcontent-%COMP%]{padding:16px;border-top:1px solid #e1dfdd;background-color:#fff;height:80px;display:flex;align-items:center;box-shadow:0 -2px 8px #0000000d;flex-shrink:0}.dark-mode[_ngcontent-%COMP%]   .chat-input[_ngcontent-%COMP%]{background-color:#1b1a19;border-top-color:#3b3a39;box-shadow:0 -2px 8px #0003}.input-container[_ngcontent-%COMP%]{display:flex;gap:12px;align-items:center;width:100%;max-width:100%}.message-input[_ngcontent-%COMP%]{flex:1;padding:12px 16px;border:1px solid #e1dfdd;border-radius:24px;font-family:var(--font-family);font-size:var(--font-size-md);font-weight:var(--font-weight-normal);line-height:var(--line-height-normal);outline:none;transition:border-color .2s,box-shadow .2s;min-width:0;max-width:100%}.dark-mode[_ngcontent-%COMP%]   .message-input[_ngcontent-%COMP%]{background-color:#3b3a39;border-color:#605e5c;color:#fff}.message-input[_ngcontent-%COMP%]:focus{border-color:#0078d4;box-shadow:0 0 0 2px #0078d41a}.dark-mode[_ngcontent-%COMP%]   .message-input[_ngcontent-%COMP%]:focus{border-color:#106ebe;box-shadow:0 0 0 2px #106ebe1a}.message-input[_ngcontent-%COMP%]:disabled{background-color:#f3f2f1;color:#605e5c;cursor:not-allowed}.dark-mode[_ngcontent-%COMP%]   .message-input[_ngcontent-%COMP%]:disabled{background-color:#3b3a39;color:#605e5c}.send-button[_ngcontent-%COMP%]{background-color:#0078d4;color:#fff;border:none;padding:12px 20px;border-radius:24px;cursor:pointer;font-family:var(--font-family);font-size:var(--font-size-md);font-weight:var(--font-weight-medium);line-height:var(--line-height-normal);transition:background-color .2s,box-shadow .2s;display:flex;align-items:center;gap:8px;white-space:nowrap;min-width:-webkit-fit-content;min-width:-moz-fit-content;min-width:fit-content;flex-shrink:0}.dark-mode[_ngcontent-%COMP%]   .send-button[_ngcontent-%COMP%]{background-color:#106ebe}.send-button[_ngcontent-%COMP%]:hover:not(:disabled){background-color:#106ebe;box-shadow:0 2px 4px #0000001a}.dark-mode[_ngcontent-%COMP%]   .send-button[_ngcontent-%COMP%]:hover:not(:disabled){background-color:#005a9e;box-shadow:0 2px 4px #0003}.send-button[_ngcontent-%COMP%]:disabled{background-color:#c8c6c4;cursor:not-allowed;opacity:.6}.dark-mode[_ngcontent-%COMP%]   .send-button[_ngcontent-%COMP%]:disabled{background-color:#605e5c}.send-icon[_ngcontent-%COMP%]{font-size:var(--font-size-lg)}.send-text[_ngcontent-%COMP%]{font-size:var(--font-size-md);font-weight:var(--font-weight-medium)}@media (max-width: 768px){.chat-messages[_ngcontent-%COMP%]{padding:12px;max-height:calc(100vh - 160px)}.message-content[_ngcontent-%COMP%]{max-width:85%}.chat-input[_ngcontent-%COMP%]{padding:12px;min-height:70px}.input-container[_ngcontent-%COMP%]{gap:8px}.send-button[_ngcontent-%COMP%]{padding:10px 16px}.send-text[_ngcontent-%COMP%]{display:none}.loading-messages[_ngcontent-%COMP%], .no-messages[_ngcontent-%COMP%]{min-height:150px;padding:16px}}@media (max-width: 480px){.chat-components-container[_ngcontent-%COMP%]{min-height:300px}.chat-messages[_ngcontent-%COMP%]{padding:8px;max-height:calc(100vh - 80px)}.message-content[_ngcontent-%COMP%]{max-width:90%;padding:10px 14px}.message-input[_ngcontent-%COMP%]{padding:10px 14px;font-size:16px}.chat-input[_ngcontent-%COMP%]{padding:8px;min-height:60px}.loading-messages[_ngcontent-%COMP%], .no-messages[_ngcontent-%COMP%]{min-height:120px;padding:12px}}@media screen{.chat-messages[_ngcontent-%COMP%]{max-height:calc(100vh - 120px);height:auto;min-height:100px}.chat-input[_ngcontent-%COMP%]{position:fixed;bottom:0;left:0;right:0;background-color:#fff;border-top:1px solid #e1dfdd;z-index:100;width:100%;padding:12px 16px}.dark-mode[_ngcontent-%COMP%]   .chat-input[_ngcontent-%COMP%]{background-color:#1b1a19;border-top-color:#3b3a39}.chat-components-container[_ngcontent-%COMP%]{padding-bottom:80px}}\"]\n  });\n  return ChatComponentsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}