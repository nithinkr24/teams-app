{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { MapperTypeNames } from \"./serializer.js\";\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nexport function getStreamingResponseStatusCodes(operationSpec) {\n  const result = new Set();\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse = operationSpec.responses[statusCode];\n    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === MapperTypeNames.Stream) {\n      result.add(Number(statusCode));\n    }\n  }\n  return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nexport function getPathStringFromParameter(parameter) {\n  const {\n    parameterPath,\n    mapper\n  } = parameter;\n  let result;\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName;\n  }\n  return result;\n}","map":{"version":3,"names":["MapperTypeNames","getStreamingResponseStatusCodes","operationSpec","result","Set","statusCode","responses","operationResponse","bodyMapper","type","name","Stream","add","Number","getPathStringFromParameter","parameter","parameterPath","mapper","Array","isArray","join","serializedName"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-client/dist/browser/interfaceHelpers.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { MapperTypeNames } from \"./serializer.js\";\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nexport function getStreamingResponseStatusCodes(operationSpec) {\n    const result = new Set();\n    for (const statusCode in operationSpec.responses) {\n        const operationResponse = operationSpec.responses[statusCode];\n        if (operationResponse.bodyMapper &&\n            operationResponse.bodyMapper.type.name === MapperTypeNames.Stream) {\n            result.add(Number(statusCode));\n        }\n    }\n    return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nexport function getPathStringFromParameter(parameter) {\n    const { parameterPath, mapper } = parameter;\n    let result;\n    if (typeof parameterPath === \"string\") {\n        result = parameterPath;\n    }\n    else if (Array.isArray(parameterPath)) {\n        result = parameterPath.join(\".\");\n    }\n    else {\n        result = mapper.serializedName;\n    }\n    return result;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,eAAe,QAAQ,iBAAiB;AACjD;AACA;AACA;AACA;AACA,OAAO,SAASC,+BAA+BA,CAACC,aAAa,EAAE;EAC3D,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;EACxB,KAAK,MAAMC,UAAU,IAAIH,aAAa,CAACI,SAAS,EAAE;IAC9C,MAAMC,iBAAiB,GAAGL,aAAa,CAACI,SAAS,CAACD,UAAU,CAAC;IAC7D,IAAIE,iBAAiB,CAACC,UAAU,IAC5BD,iBAAiB,CAACC,UAAU,CAACC,IAAI,CAACC,IAAI,KAAKV,eAAe,CAACW,MAAM,EAAE;MACnER,MAAM,CAACS,GAAG,CAACC,MAAM,CAACR,UAAU,CAAC,CAAC;IAClC;EACJ;EACA,OAAOF,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,0BAA0BA,CAACC,SAAS,EAAE;EAClD,MAAM;IAAEC,aAAa;IAAEC;EAAO,CAAC,GAAGF,SAAS;EAC3C,IAAIZ,MAAM;EACV,IAAI,OAAOa,aAAa,KAAK,QAAQ,EAAE;IACnCb,MAAM,GAAGa,aAAa;EAC1B,CAAC,MACI,IAAIE,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,EAAE;IACnCb,MAAM,GAAGa,aAAa,CAACI,IAAI,CAAC,GAAG,CAAC;EACpC,CAAC,MACI;IACDjB,MAAM,GAAGc,MAAM,CAACI,cAAc;EAClC;EACA,OAAOlB,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}