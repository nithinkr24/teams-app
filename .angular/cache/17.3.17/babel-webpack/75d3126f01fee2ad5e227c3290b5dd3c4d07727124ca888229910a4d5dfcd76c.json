{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createDefaultHttpClient } from \"../defaultHttpClient.js\";\nimport { createPipelineFromOptions } from \"../createPipelineFromOptions.js\";\nimport { apiVersionPolicy } from \"./apiVersionPolicy.js\";\nimport { isApiKeyCredential, isBasicCredential, isBearerTokenCredential, isOAuth2TokenCredential } from \"../auth/credentials.js\";\nimport { apiKeyAuthenticationPolicy } from \"../policies/auth/apiKeyAuthenticationPolicy.js\";\nimport { basicAuthenticationPolicy } from \"../policies/auth/basicAuthenticationPolicy.js\";\nimport { bearerAuthenticationPolicy } from \"../policies/auth/bearerAuthenticationPolicy.js\";\nimport { oauth2AuthenticationPolicy } from \"../policies/auth/oauth2AuthenticationPolicy.js\";\nlet cachedHttpClient;\n/**\n * Creates a default rest pipeline to re-use accross Rest Level Clients\n */\nexport function createDefaultPipeline(options = {}) {\n  const pipeline = createPipelineFromOptions(options);\n  pipeline.addPolicy(apiVersionPolicy(options));\n  const {\n    credential,\n    authSchemes,\n    allowInsecureConnection\n  } = options;\n  if (credential) {\n    if (isApiKeyCredential(credential)) {\n      pipeline.addPolicy(apiKeyAuthenticationPolicy({\n        authSchemes,\n        credential,\n        allowInsecureConnection\n      }));\n    } else if (isBasicCredential(credential)) {\n      pipeline.addPolicy(basicAuthenticationPolicy({\n        authSchemes,\n        credential,\n        allowInsecureConnection\n      }));\n    } else if (isBearerTokenCredential(credential)) {\n      pipeline.addPolicy(bearerAuthenticationPolicy({\n        authSchemes,\n        credential,\n        allowInsecureConnection\n      }));\n    } else if (isOAuth2TokenCredential(credential)) {\n      pipeline.addPolicy(oauth2AuthenticationPolicy({\n        authSchemes,\n        credential,\n        allowInsecureConnection\n      }));\n    }\n  }\n  return pipeline;\n}\nexport function getCachedDefaultHttpsClient() {\n  if (!cachedHttpClient) {\n    cachedHttpClient = createDefaultHttpClient();\n  }\n  return cachedHttpClient;\n}","map":{"version":3,"names":["createDefaultHttpClient","createPipelineFromOptions","apiVersionPolicy","isApiKeyCredential","isBasicCredential","isBearerTokenCredential","isOAuth2TokenCredential","apiKeyAuthenticationPolicy","basicAuthenticationPolicy","bearerAuthenticationPolicy","oauth2AuthenticationPolicy","cachedHttpClient","createDefaultPipeline","options","pipeline","addPolicy","credential","authSchemes","allowInsecureConnection","getCachedDefaultHttpsClient"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/client/clientHelpers.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createDefaultHttpClient } from \"../defaultHttpClient.js\";\nimport { createPipelineFromOptions } from \"../createPipelineFromOptions.js\";\nimport { apiVersionPolicy } from \"./apiVersionPolicy.js\";\nimport { isApiKeyCredential, isBasicCredential, isBearerTokenCredential, isOAuth2TokenCredential, } from \"../auth/credentials.js\";\nimport { apiKeyAuthenticationPolicy } from \"../policies/auth/apiKeyAuthenticationPolicy.js\";\nimport { basicAuthenticationPolicy } from \"../policies/auth/basicAuthenticationPolicy.js\";\nimport { bearerAuthenticationPolicy } from \"../policies/auth/bearerAuthenticationPolicy.js\";\nimport { oauth2AuthenticationPolicy } from \"../policies/auth/oauth2AuthenticationPolicy.js\";\nlet cachedHttpClient;\n/**\n * Creates a default rest pipeline to re-use accross Rest Level Clients\n */\nexport function createDefaultPipeline(options = {}) {\n    const pipeline = createPipelineFromOptions(options);\n    pipeline.addPolicy(apiVersionPolicy(options));\n    const { credential, authSchemes, allowInsecureConnection } = options;\n    if (credential) {\n        if (isApiKeyCredential(credential)) {\n            pipeline.addPolicy(apiKeyAuthenticationPolicy({ authSchemes, credential, allowInsecureConnection }));\n        }\n        else if (isBasicCredential(credential)) {\n            pipeline.addPolicy(basicAuthenticationPolicy({ authSchemes, credential, allowInsecureConnection }));\n        }\n        else if (isBearerTokenCredential(credential)) {\n            pipeline.addPolicy(bearerAuthenticationPolicy({ authSchemes, credential, allowInsecureConnection }));\n        }\n        else if (isOAuth2TokenCredential(credential)) {\n            pipeline.addPolicy(oauth2AuthenticationPolicy({ authSchemes, credential, allowInsecureConnection }));\n        }\n    }\n    return pipeline;\n}\nexport function getCachedDefaultHttpsClient() {\n    if (!cachedHttpClient) {\n        cachedHttpClient = createDefaultHttpClient();\n    }\n    return cachedHttpClient;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,uBAAuB,QAAQ,yBAAyB;AACjE,SAASC,yBAAyB,QAAQ,iCAAiC;AAC3E,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,kBAAkB,EAAEC,iBAAiB,EAAEC,uBAAuB,EAAEC,uBAAuB,QAAS,wBAAwB;AACjI,SAASC,0BAA0B,QAAQ,gDAAgD;AAC3F,SAASC,yBAAyB,QAAQ,+CAA+C;AACzF,SAASC,0BAA0B,QAAQ,gDAAgD;AAC3F,SAASC,0BAA0B,QAAQ,gDAAgD;AAC3F,IAAIC,gBAAgB;AACpB;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EAChD,MAAMC,QAAQ,GAAGb,yBAAyB,CAACY,OAAO,CAAC;EACnDC,QAAQ,CAACC,SAAS,CAACb,gBAAgB,CAACW,OAAO,CAAC,CAAC;EAC7C,MAAM;IAAEG,UAAU;IAAEC,WAAW;IAAEC;EAAwB,CAAC,GAAGL,OAAO;EACpE,IAAIG,UAAU,EAAE;IACZ,IAAIb,kBAAkB,CAACa,UAAU,CAAC,EAAE;MAChCF,QAAQ,CAACC,SAAS,CAACR,0BAA0B,CAAC;QAAEU,WAAW;QAAED,UAAU;QAAEE;MAAwB,CAAC,CAAC,CAAC;IACxG,CAAC,MACI,IAAId,iBAAiB,CAACY,UAAU,CAAC,EAAE;MACpCF,QAAQ,CAACC,SAAS,CAACP,yBAAyB,CAAC;QAAES,WAAW;QAAED,UAAU;QAAEE;MAAwB,CAAC,CAAC,CAAC;IACvG,CAAC,MACI,IAAIb,uBAAuB,CAACW,UAAU,CAAC,EAAE;MAC1CF,QAAQ,CAACC,SAAS,CAACN,0BAA0B,CAAC;QAAEQ,WAAW;QAAED,UAAU;QAAEE;MAAwB,CAAC,CAAC,CAAC;IACxG,CAAC,MACI,IAAIZ,uBAAuB,CAACU,UAAU,CAAC,EAAE;MAC1CF,QAAQ,CAACC,SAAS,CAACL,0BAA0B,CAAC;QAAEO,WAAW;QAAED,UAAU;QAAEE;MAAwB,CAAC,CAAC,CAAC;IACxG;EACJ;EACA,OAAOJ,QAAQ;AACnB;AACA,OAAO,SAASK,2BAA2BA,CAAA,EAAG;EAC1C,IAAI,CAACR,gBAAgB,EAAE;IACnBA,gBAAgB,GAAGX,uBAAuB,CAAC,CAAC;EAChD;EACA,OAAOW,gBAAgB;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}