{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ensureSecureConnection } from \"./checkInsecureConnection.js\";\n/**\n * Name of the API Key Authentication Policy\n */\nexport const apiKeyAuthenticationPolicyName = \"apiKeyAuthenticationPolicy\";\n/**\n * Gets a pipeline policy that adds API key authentication to requests\n */\nexport function apiKeyAuthenticationPolicy(options) {\n  return {\n    name: apiKeyAuthenticationPolicyName,\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        var _a, _b;\n        // Ensure allowInsecureConnection is explicitly set when sending request to non-https URLs\n        ensureSecureConnection(request, options);\n        const scheme = (_b = (_a = request.authSchemes) !== null && _a !== void 0 ? _a : options.authSchemes) === null || _b === void 0 ? void 0 : _b.find(x => x.kind === \"apiKey\");\n        // Skip adding authentication header if no API key authentication scheme is found\n        if (!scheme) {\n          return next(request);\n        }\n        if (scheme.apiKeyLocation !== \"header\") {\n          throw new Error(`Unsupported API key location: ${scheme.apiKeyLocation}`);\n        }\n        request.headers.set(scheme.name, options.credential.key);\n        return next(request);\n      })();\n    }\n  };\n}","map":{"version":3,"names":["ensureSecureConnection","apiKeyAuthenticationPolicyName","apiKeyAuthenticationPolicy","options","name","sendRequest","request","next","_asyncToGenerator","_a","_b","scheme","authSchemes","find","x","kind","apiKeyLocation","Error","headers","set","credential","key"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/policies/auth/apiKeyAuthenticationPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ensureSecureConnection } from \"./checkInsecureConnection.js\";\n/**\n * Name of the API Key Authentication Policy\n */\nexport const apiKeyAuthenticationPolicyName = \"apiKeyAuthenticationPolicy\";\n/**\n * Gets a pipeline policy that adds API key authentication to requests\n */\nexport function apiKeyAuthenticationPolicy(options) {\n    return {\n        name: apiKeyAuthenticationPolicyName,\n        async sendRequest(request, next) {\n            var _a, _b;\n            // Ensure allowInsecureConnection is explicitly set when sending request to non-https URLs\n            ensureSecureConnection(request, options);\n            const scheme = (_b = ((_a = request.authSchemes) !== null && _a !== void 0 ? _a : options.authSchemes)) === null || _b === void 0 ? void 0 : _b.find((x) => x.kind === \"apiKey\");\n            // Skip adding authentication header if no API key authentication scheme is found\n            if (!scheme) {\n                return next(request);\n            }\n            if (scheme.apiKeyLocation !== \"header\") {\n                throw new Error(`Unsupported API key location: ${scheme.apiKeyLocation}`);\n            }\n            request.headers.set(scheme.name, options.credential.key);\n            return next(request);\n        },\n    };\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,sBAAsB,QAAQ,8BAA8B;AACrE;AACA;AACA;AACA,OAAO,MAAMC,8BAA8B,GAAG,4BAA4B;AAC1E;AACA;AACA;AACA,OAAO,SAASC,0BAA0BA,CAACC,OAAO,EAAE;EAChD,OAAO;IACHC,IAAI,EAAEH,8BAA8B;IAC9BI,WAAWA,CAACC,OAAO,EAAEC,IAAI,EAAE;MAAA,OAAAC,iBAAA;QAC7B,IAAIC,EAAE,EAAEC,EAAE;QACV;QACAV,sBAAsB,CAACM,OAAO,EAAEH,OAAO,CAAC;QACxC,MAAMQ,MAAM,GAAG,CAACD,EAAE,GAAI,CAACD,EAAE,GAAGH,OAAO,CAACM,WAAW,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGN,OAAO,CAACS,WAAY,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAK,QAAQ,CAAC;QAChL;QACA,IAAI,CAACJ,MAAM,EAAE;UACT,OAAOJ,IAAI,CAACD,OAAO,CAAC;QACxB;QACA,IAAIK,MAAM,CAACK,cAAc,KAAK,QAAQ,EAAE;UACpC,MAAM,IAAIC,KAAK,CAAC,iCAAiCN,MAAM,CAACK,cAAc,EAAE,CAAC;QAC7E;QACAV,OAAO,CAACY,OAAO,CAACC,GAAG,CAACR,MAAM,CAACP,IAAI,EAAED,OAAO,CAACiB,UAAU,CAACC,GAAG,CAAC;QACxD,OAAOd,IAAI,CAACD,OAAO,CAAC;MAAC;IACzB;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}