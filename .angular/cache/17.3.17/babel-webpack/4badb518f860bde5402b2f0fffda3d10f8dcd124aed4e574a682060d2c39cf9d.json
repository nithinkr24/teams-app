{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { parseHeaderValueAsNumber } from \"../util/helpers.js\";\n/**\n * The header that comes back from services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response) {\n  if (!(response && [429, 503].includes(response.status))) return undefined;\n  try {\n    // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n    for (const header of AllRetryAfterHeaders) {\n      const retryAfterValue = parseHeaderValueAsNumber(response, header);\n      if (retryAfterValue === 0 || retryAfterValue) {\n        // \"Retry-After\" header ==> seconds\n        // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n        const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n        return retryAfterValue * multiplyingFactor; // in milli-seconds\n      }\n    }\n    // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n    const retryAfterHeader = response.headers.get(RetryAfterHeader);\n    if (!retryAfterHeader) return;\n    const date = Date.parse(retryAfterHeader);\n    const diff = date - Date.now();\n    // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n    return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n  } catch (_a) {\n    return undefined;\n  }\n}\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nexport function isThrottlingRetryResponse(response) {\n  return Number.isFinite(getRetryAfterInMs(response));\n}\nexport function throttlingRetryStrategy() {\n  return {\n    name: \"throttlingRetryStrategy\",\n    retry({\n      response\n    }) {\n      const retryAfterInMs = getRetryAfterInMs(response);\n      if (!Number.isFinite(retryAfterInMs)) {\n        return {\n          skipStrategy: true\n        };\n      }\n      return {\n        retryAfterInMs\n      };\n    }\n  };\n}","map":{"version":3,"names":["parseHeaderValueAsNumber","RetryAfterHeader","AllRetryAfterHeaders","getRetryAfterInMs","response","includes","status","undefined","header","retryAfterValue","multiplyingFactor","retryAfterHeader","headers","get","date","Date","parse","diff","now","Number","isFinite","Math","max","_a","isThrottlingRetryResponse","throttlingRetryStrategy","name","retry","retryAfterInMs","skipStrategy"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/retryStrategies/throttlingRetryStrategy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { parseHeaderValueAsNumber } from \"../util/helpers.js\";\n/**\n * The header that comes back from services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response) {\n    if (!(response && [429, 503].includes(response.status)))\n        return undefined;\n    try {\n        // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n        for (const header of AllRetryAfterHeaders) {\n            const retryAfterValue = parseHeaderValueAsNumber(response, header);\n            if (retryAfterValue === 0 || retryAfterValue) {\n                // \"Retry-After\" header ==> seconds\n                // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n                const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n                return retryAfterValue * multiplyingFactor; // in milli-seconds\n            }\n        }\n        // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n        const retryAfterHeader = response.headers.get(RetryAfterHeader);\n        if (!retryAfterHeader)\n            return;\n        const date = Date.parse(retryAfterHeader);\n        const diff = date - Date.now();\n        // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n        return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nexport function isThrottlingRetryResponse(response) {\n    return Number.isFinite(getRetryAfterInMs(response));\n}\nexport function throttlingRetryStrategy() {\n    return {\n        name: \"throttlingRetryStrategy\",\n        retry({ response }) {\n            const retryAfterInMs = getRetryAfterInMs(response);\n            if (!Number.isFinite(retryAfterInMs)) {\n                return { skipStrategy: true };\n            }\n            return {\n                retryAfterInMs,\n            };\n        },\n    };\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,wBAAwB,QAAQ,oBAAoB;AAC7D;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,CAAC,gBAAgB,EAAE,qBAAqB,EAAED,gBAAgB,CAAC;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,iBAAiBA,CAACC,QAAQ,EAAE;EACjC,IAAI,EAAEA,QAAQ,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAACD,QAAQ,CAACE,MAAM,CAAC,CAAC,EACnD,OAAOC,SAAS;EACpB,IAAI;IACA;IACA,KAAK,MAAMC,MAAM,IAAIN,oBAAoB,EAAE;MACvC,MAAMO,eAAe,GAAGT,wBAAwB,CAACI,QAAQ,EAAEI,MAAM,CAAC;MAClE,IAAIC,eAAe,KAAK,CAAC,IAAIA,eAAe,EAAE;QAC1C;QACA;QACA,MAAMC,iBAAiB,GAAGF,MAAM,KAAKP,gBAAgB,GAAG,IAAI,GAAG,CAAC;QAChE,OAAOQ,eAAe,GAAGC,iBAAiB,CAAC,CAAC;MAChD;IACJ;IACA;IACA,MAAMC,gBAAgB,GAAGP,QAAQ,CAACQ,OAAO,CAACC,GAAG,CAACZ,gBAAgB,CAAC;IAC/D,IAAI,CAACU,gBAAgB,EACjB;IACJ,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,gBAAgB,CAAC;IACzC,MAAMM,IAAI,GAAGH,IAAI,GAAGC,IAAI,CAACG,GAAG,CAAC,CAAC;IAC9B;IACA,OAAOC,MAAM,CAACC,QAAQ,CAACH,IAAI,CAAC,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,IAAI,CAAC,GAAGV,SAAS;EAChE,CAAC,CACD,OAAOgB,EAAE,EAAE;IACP,OAAOhB,SAAS;EACpB;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiB,yBAAyBA,CAACpB,QAAQ,EAAE;EAChD,OAAOe,MAAM,CAACC,QAAQ,CAACjB,iBAAiB,CAACC,QAAQ,CAAC,CAAC;AACvD;AACA,OAAO,SAASqB,uBAAuBA,CAAA,EAAG;EACtC,OAAO;IACHC,IAAI,EAAE,yBAAyB;IAC/BC,KAAKA,CAAC;MAAEvB;IAAS,CAAC,EAAE;MAChB,MAAMwB,cAAc,GAAGzB,iBAAiB,CAACC,QAAQ,CAAC;MAClD,IAAI,CAACe,MAAM,CAACC,QAAQ,CAACQ,cAAc,CAAC,EAAE;QAClC,OAAO;UAAEC,YAAY,EAAE;QAAK,CAAC;MACjC;MACA,OAAO;QACHD;MACJ,CAAC;IACL;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}