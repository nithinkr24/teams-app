{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport { tracingClient } from \"../tracing.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\n/** Class containing ChatThread operations. */\nexport class ChatThreadImpl {\n  /**\n   * Initialize a new instance of the class ChatThread class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Gets chat message read receipts for a thread.\n   * @param chatThreadId Thread id to get the chat message read receipts for.\n   * @param options The options parameters.\n   */\n  listChatReadReceipts(chatThreadId, options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatReadReceipts\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (options) {\n          return _this.client.sendOperationRequest({\n            chatThreadId,\n            options\n          }, listChatReadReceiptsOperationSpec);\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Sends a read receipt event to a thread, on behalf of a user.\n   * @param chatThreadId Thread id to send the read receipt event to.\n   * @param sendReadReceiptRequest Read receipt details.\n   * @param options The options parameters.\n   */\n  sendChatReadReceipt(chatThreadId, sendReadReceiptRequest, options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.sendChatReadReceipt\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (options) {\n          return _this2.client.sendOperationRequest({\n            chatThreadId,\n            sendReadReceiptRequest,\n            options\n          }, sendChatReadReceiptOperationSpec);\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Sends a message to a thread.\n   * @param chatThreadId The thread id to send the message to.\n   * @param sendChatMessageRequest Details of the message to send.\n   * @param options The options parameters.\n   */\n  sendChatMessage(chatThreadId, sendChatMessageRequest, options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.sendChatMessage\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (options) {\n          return _this3.client.sendOperationRequest({\n            chatThreadId,\n            sendChatMessageRequest,\n            options\n          }, sendChatMessageOperationSpec);\n        });\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Gets a list of messages from a thread.\n   * @param chatThreadId The thread id of the message.\n   * @param options The options parameters.\n   */\n  listChatMessages(chatThreadId, options) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatMessages\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (options) {\n          return _this4.client.sendOperationRequest({\n            chatThreadId,\n            options\n          }, listChatMessagesOperationSpec);\n        });\n        return function (_x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Gets a message by id.\n   * @param chatThreadId The thread id to which the message was sent.\n   * @param chatMessageId The message id.\n   * @param options The options parameters.\n   */\n  getChatMessage(chatThreadId, chatMessageId, options) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.getChatMessage\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator(function* (options) {\n          return _this5.client.sendOperationRequest({\n            chatThreadId,\n            chatMessageId,\n            options\n          }, getChatMessageOperationSpec);\n        });\n        return function (_x5) {\n          return _ref5.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Updates a message.\n   * @param chatThreadId The thread id to which the message was sent.\n   * @param chatMessageId The message id.\n   * @param updateChatMessageRequest Details of the request to update the message.\n   * @param options The options parameters.\n   */\n  updateChatMessage(chatThreadId, chatMessageId, updateChatMessageRequest, options) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.updateChatMessage\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref6 = _asyncToGenerator(function* (options) {\n          return _this6.client.sendOperationRequest({\n            chatThreadId,\n            chatMessageId,\n            updateChatMessageRequest,\n            options\n          }, updateChatMessageOperationSpec);\n        });\n        return function (_x6) {\n          return _ref6.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Deletes a message.\n   * @param chatThreadId The thread id to which the message was sent.\n   * @param chatMessageId The message id.\n   * @param options The options parameters.\n   */\n  deleteChatMessage(chatThreadId, chatMessageId, options) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.deleteChatMessage\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref7 = _asyncToGenerator(function* (options) {\n          return _this7.client.sendOperationRequest({\n            chatThreadId,\n            chatMessageId,\n            options\n          }, deleteChatMessageOperationSpec);\n        });\n        return function (_x7) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Gets the participants of a thread.\n   * @param chatThreadId Thread id to get participants for.\n   * @param options The options parameters.\n   */\n  listChatParticipants(chatThreadId, options) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatParticipants\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref8 = _asyncToGenerator(function* (options) {\n          return _this8.client.sendOperationRequest({\n            chatThreadId,\n            options\n          }, listChatParticipantsOperationSpec);\n        });\n        return function (_x8) {\n          return _ref8.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Remove a participant from a thread.\n   * @param chatThreadId Thread id to remove the participant from.\n   * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.\n   * @param options The options parameters.\n   */\n  removeChatParticipant(chatThreadId, participantCommunicationIdentifier, options) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.removeChatParticipant\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref9 = _asyncToGenerator(function* (options) {\n          return _this9.client.sendOperationRequest({\n            chatThreadId,\n            participantCommunicationIdentifier,\n            options\n          }, removeChatParticipantOperationSpec);\n        });\n        return function (_x9) {\n          return _ref9.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Adds thread participants to a thread. If participants already exist, no change occurs.\n   * @param chatThreadId Id of the thread to add participants to.\n   * @param addChatParticipantsRequest Thread participants to be added to the thread.\n   * @param options The options parameters.\n   */\n  addChatParticipants(chatThreadId, addChatParticipantsRequest, options) {\n    var _this0 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.addChatParticipants\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref0 = _asyncToGenerator(function* (options) {\n          return _this0.client.sendOperationRequest({\n            chatThreadId,\n            addChatParticipantsRequest,\n            options\n          }, addChatParticipantsOperationSpec);\n        });\n        return function (_x0) {\n          return _ref0.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Updates a thread's properties.\n   * @param chatThreadId The id of the thread to update.\n   * @param updateChatThreadRequest Request payload for updating a chat thread.\n   * @param options The options parameters.\n   */\n  updateChatThreadProperties(chatThreadId, updateChatThreadRequest, options) {\n    var _this1 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.updateChatThreadProperties\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref1 = _asyncToGenerator(function* (options) {\n          return _this1.client.sendOperationRequest({\n            chatThreadId,\n            updateChatThreadRequest,\n            options\n          }, updateChatThreadPropertiesOperationSpec);\n        });\n        return function (_x1) {\n          return _ref1.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Gets a chat thread's properties.\n   * @param chatThreadId Id of the thread.\n   * @param options The options parameters.\n   */\n  getChatThreadProperties(chatThreadId, options) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.getChatThreadProperties\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref10 = _asyncToGenerator(function* (options) {\n          return _this10.client.sendOperationRequest({\n            chatThreadId,\n            options\n          }, getChatThreadPropertiesOperationSpec);\n        });\n        return function (_x10) {\n          return _ref10.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Posts a typing event to a thread, on behalf of a user.\n   * @param chatThreadId Id of the thread.\n   * @param options The options parameters.\n   */\n  sendTypingNotification(chatThreadId, options) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.sendTypingNotification\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref11 = _asyncToGenerator(function* (options) {\n          return _this11.client.sendOperationRequest({\n            chatThreadId,\n            options\n          }, sendTypingNotificationOperationSpec);\n        });\n        return function (_x11) {\n          return _ref11.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * ListChatReadReceiptsNext\n   * @param chatThreadId Thread id to get the chat message read receipts for.\n   * @param nextLink The nextLink from the previous successful call to the ListChatReadReceipts method.\n   * @param options The options parameters.\n   */\n  listChatReadReceiptsNext(chatThreadId, nextLink, options) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatReadReceiptsNext\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref12 = _asyncToGenerator(function* (options) {\n          return _this12.client.sendOperationRequest({\n            chatThreadId,\n            nextLink,\n            options\n          }, listChatReadReceiptsNextOperationSpec);\n        });\n        return function (_x12) {\n          return _ref12.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * ListChatMessagesNext\n   * @param chatThreadId The thread id of the message.\n   * @param nextLink The nextLink from the previous successful call to the ListChatMessages method.\n   * @param options The options parameters.\n   */\n  listChatMessagesNext(chatThreadId, nextLink, options) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatMessagesNext\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref13 = _asyncToGenerator(function* (options) {\n          return _this13.client.sendOperationRequest({\n            chatThreadId,\n            nextLink,\n            options\n          }, listChatMessagesNextOperationSpec);\n        });\n        return function (_x13) {\n          return _ref13.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * ListChatParticipantsNext\n   * @param chatThreadId Thread id to get participants for.\n   * @param nextLink The nextLink from the previous successful call to the ListChatParticipants method.\n   * @param options The options parameters.\n   */\n  listChatParticipantsNext(chatThreadId, nextLink, options) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"ChatApiClient.listChatParticipantsNext\", options !== null && options !== void 0 ? options : {}, /*#__PURE__*/function () {\n        var _ref14 = _asyncToGenerator(function* (options) {\n          return _this14.client.sendOperationRequest({\n            chatThreadId,\n            nextLink,\n            options\n          }, listChatParticipantsNextOperationSpec);\n        });\n        return function (_x14) {\n          return _ref14.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */false);\nconst listChatReadReceiptsOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/readReceipts\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessageReadReceiptsCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.maxPageSize, Parameters.skip, Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst sendChatReadReceiptOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/readReceipts\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.sendReadReceiptRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst sendChatMessageOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.SendChatMessageResult\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.sendChatMessageRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listChatMessagesOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessagesCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.maxPageSize, Parameters.apiVersion, Parameters.startTime],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChatMessageOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessage\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.chatMessageId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateChatMessageOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.updateChatMessageRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.chatMessageId],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteChatMessageOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.chatMessageId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listChatParticipantsOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/participants\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatParticipantsCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.maxPageSize, Parameters.skip, Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst removeChatParticipantOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/participants/:remove\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.participantCommunicationIdentifier,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst addChatParticipantsOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/participants/:add\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.AddChatParticipantsResult\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.addChatParticipantsRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst updateChatThreadPropertiesOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.updateChatThreadRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst getChatThreadPropertiesOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatThreadProperties\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst sendTypingNotificationOperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/typing\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.sendTypingNotificationRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listChatReadReceiptsNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessageReadReceiptsCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listChatMessagesNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessagesCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listChatParticipantsNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatParticipantsCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n//# sourceMappingURL=chatThread.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}