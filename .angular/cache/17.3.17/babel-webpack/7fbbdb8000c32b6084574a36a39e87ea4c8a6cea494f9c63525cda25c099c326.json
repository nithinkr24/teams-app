{"ast":null,"code":"import { VideoFrameTick as t } from \"./videoFrameTick.js\";\nclass s {\n  constructor(t, s) {\n    this.reportStatisticsResult = s, this.sampleCount = 0, this.distributionBins = new Uint32Array(t);\n  }\n  processStarts(s, e, i, r) {\n    t.tick(), this.suitableForThisSession(s, e, i, r) || this.reportAndResetSession(this.getStatistics(), s, r, e, i), this.start();\n  }\n  processEnds() {\n    const t = performance.now() - this.frameProcessingStartedAt,\n      s = Math.floor(Math.max(0, Math.min(this.distributionBins.length - 1, t)));\n    this.distributionBins[s] += 1, this.sampleCount += 1;\n  }\n  getStatistics() {\n    return this.currentSession ? {\n      effectId: this.currentSession.effectId,\n      effectParam: this.currentSession.effectParam,\n      frameHeight: this.currentSession.frameHeight,\n      frameWidth: this.currentSession.frameWidth,\n      duration: performance.now() - this.currentSession.startedAtInMs,\n      sampleCount: this.sampleCount,\n      distributionBins: this.distributionBins.slice()\n    } : null;\n  }\n  start() {\n    this.frameProcessingStartedAt = performance.now();\n  }\n  suitableForThisSession(t, s, e, i) {\n    return this.currentSession && this.currentSession.effectId === t && this.currentSession.effectParam === i && this.currentSession.frameWidth === s && this.currentSession.frameHeight === e;\n  }\n  reportAndResetSession(s, e, i, r, n) {\n    s && this.reportStatisticsResult(s), this.resetCurrentSession(this.getNextTimeout(e, this.currentSession), e, i, r, n), this.timeoutId && t.clearTimeout(this.timeoutId), this.timeoutId = t.setTimeout((() => this.reportAndResetSession(this.getStatistics(), e, i, r, n)).bind(this), this.currentSession.timeoutInMs);\n  }\n  resetCurrentSession(t, s, e, i, r) {\n    this.currentSession = {\n      startedAtInMs: performance.now(),\n      timeoutInMs: t,\n      effectId: s,\n      effectParam: e,\n      frameWidth: i,\n      frameHeight: r\n    }, this.sampleCount = 0, this.distributionBins.fill(0);\n  }\n  getNextTimeout(t, e) {\n    return e && e.effectId === t ? Math.min(s.maxSessionTimeoutInMs, 2 * e.timeoutInMs) : s.initialSessionTimeoutInMs;\n  }\n}\ns.initialSessionTimeoutInMs = 1e3, s.maxSessionTimeoutInMs = 3e4;\nexport { s as VideoPerformanceStatistics };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}