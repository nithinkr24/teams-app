{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isKeyCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { createDefaultPipeline } from \"./clientHelpers.js\";\nimport { getClient as tspGetClient } from \"@typespec/ts-http-runtime\";\n/**\n * Function to wrap RequestParameters so that we get the legacy onResponse behavior in core-client-rest\n */\nfunction wrapRequestParameters(parameters) {\n  if (parameters.onResponse) {\n    return Object.assign(Object.assign({}, parameters), {\n      onResponse(rawResponse, error) {\n        var _a;\n        (_a = parameters.onResponse) === null || _a === void 0 ? void 0 : _a.call(parameters, rawResponse, error, error);\n      }\n    });\n  }\n  return parameters;\n}\nexport function getClient(endpoint, credentialsOrPipelineOptions, clientOptions = {}) {\n  let credentials;\n  if (credentialsOrPipelineOptions) {\n    if (isCredential(credentialsOrPipelineOptions)) {\n      credentials = credentialsOrPipelineOptions;\n    } else {\n      clientOptions = credentialsOrPipelineOptions !== null && credentialsOrPipelineOptions !== void 0 ? credentialsOrPipelineOptions : {};\n    }\n  }\n  const pipeline = createDefaultPipeline(endpoint, credentials, clientOptions);\n  const tspClient = tspGetClient(endpoint, Object.assign(Object.assign({}, clientOptions), {\n    pipeline\n  }));\n  const client = (path, ...args) => {\n    return {\n      get: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).get(wrapRequestParameters(requestOptions));\n      },\n      post: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).post(wrapRequestParameters(requestOptions));\n      },\n      put: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).put(wrapRequestParameters(requestOptions));\n      },\n      patch: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).patch(wrapRequestParameters(requestOptions));\n      },\n      delete: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).delete(wrapRequestParameters(requestOptions));\n      },\n      head: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).head(wrapRequestParameters(requestOptions));\n      },\n      options: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).options(wrapRequestParameters(requestOptions));\n      },\n      trace: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).trace(wrapRequestParameters(requestOptions));\n      }\n    };\n  };\n  return {\n    path: client,\n    pathUnchecked: client,\n    pipeline: tspClient.pipeline\n  };\n}\nfunction isCredential(param) {\n  return isKeyCredential(param) || isTokenCredential(param);\n}\n//# sourceMappingURL=getClient.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}