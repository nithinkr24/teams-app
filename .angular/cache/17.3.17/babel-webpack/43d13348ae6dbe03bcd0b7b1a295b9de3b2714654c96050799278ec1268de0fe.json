{"ast":null,"code":"import { sendMessageToParent as r } from \"../internal/communication.js\";\nimport { registerHandler as e } from \"../internal/handlers.js\";\nimport { ensureInitialized as o } from \"../internal/internalAPIs.js\";\nimport { getApiVersionTag as n } from \"../internal/telemetry.js\";\nimport { FrameContexts as t, errorNotSupportedOnPlatform as a } from \"../public/constants.js\";\nimport { runtime as m } from \"../public/runtime.js\";\nconst l = \"v1\";\nvar i, C, s;\nfunction d(e) {\n  if (!e) throw new Error(\"[remoteCamera.getCapableParticipants] Callback cannot be null\");\n  if (o(m, t.sidePanel), !b()) throw a;\n  r(n(l, \"remoteCamera.getCapableParticipants\"), \"remoteCamera.getCapableParticipants\", e);\n}\nfunction c(e, i) {\n  if (!e) throw new Error(\"[remoteCamera.requestControl] Participant cannot be null\");\n  if (!i) throw new Error(\"[remoteCamera.requestControl] Callback cannot be null\");\n  if (o(m, t.sidePanel), !b()) throw a;\n  r(n(l, \"remoteCamera.requestControl\"), \"remoteCamera.requestControl\", [e], i);\n}\nfunction u(e, i) {\n  if (!e) throw new Error(\"[remoteCamera.sendControlCommand] ControlCommand cannot be null\");\n  if (!i) throw new Error(\"[remoteCamera.sendControlCommand] Callback cannot be null\");\n  if (o(m, t.sidePanel), !b()) throw a;\n  r(n(l, \"remoteCamera.sendControlCommand\"), \"remoteCamera.sendControlCommand\", [e], i);\n}\nfunction f(e) {\n  if (!e) throw new Error(\"[remoteCamera.terminateSession] Callback cannot be null\");\n  if (o(m, t.sidePanel), !b()) throw a;\n  r(n(l, \"remoteCamera.terminateSession\"), \"remoteCamera.terminateSession\", e);\n}\nfunction h(r) {\n  if (!r) throw new Error(\"[remoteCamera.registerOnCapableParticipantsChangeHandler] Handler cannot be null\");\n  if (o(m, t.sidePanel), !b()) throw a;\n  e(n(l, \"remoteCamera.registerOnCapableParticipantsChangeHandler\"), \"remoteCamera.capableParticipantsChange\", r);\n}\nfunction w(r) {\n  if (!r) throw new Error(\"[remoteCamera.registerOnErrorHandler] Handler cannot be null\");\n  if (o(m, t.sidePanel), !b()) throw a;\n  e(n(l, \"remoteCamera.registerOnErrorHandler\"), \"remoteCamera.handlerError\", r);\n}\nfunction E(r) {\n  if (!r) throw new Error(\"[remoteCamera.registerOnDeviceStateChangeHandler] Handler cannot be null\");\n  if (o(m, t.sidePanel), !b()) throw a;\n  e(n(l, \"remoteCamera.registerOnDeviceStateChangeHandler\"), \"remoteCamera.deviceStateChange\", r);\n}\nfunction p(r) {\n  if (!r) throw new Error(\"[remoteCamera.registerOnSessionStatusChangeHandler] Handler cannot be null\");\n  if (o(m, t.sidePanel), !b()) throw a;\n  e(n(l, \"remoteCamera.registerOnSessionStatusChangeHandler\"), \"remoteCamera.sessionStatusChange\", r);\n}\nfunction b() {\n  return !(!o(m) || !m.supports.remoteCamera);\n}\n!function (r) {\n  r.Reset = \"Reset\", r.ZoomIn = \"ZoomIn\", r.ZoomOut = \"ZoomOut\", r.PanLeft = \"PanLeft\", r.PanRight = \"PanRight\", r.TiltUp = \"TiltUp\", r.TiltDown = \"TiltDown\";\n}(i || (i = {})), function (r) {\n  r[r.CommandResetError = 0] = \"CommandResetError\", r[r.CommandZoomInError = 1] = \"CommandZoomInError\", r[r.CommandZoomOutError = 2] = \"CommandZoomOutError\", r[r.CommandPanLeftError = 3] = \"CommandPanLeftError\", r[r.CommandPanRightError = 4] = \"CommandPanRightError\", r[r.CommandTiltUpError = 5] = \"CommandTiltUpError\", r[r.CommandTiltDownError = 6] = \"CommandTiltDownError\", r[r.SendDataError = 7] = \"SendDataError\";\n}(C || (C = {})), function (r) {\n  r[r.None = 0] = \"None\", r[r.ControlDenied = 1] = \"ControlDenied\", r[r.ControlNoResponse = 2] = \"ControlNoResponse\", r[r.ControlBusy = 3] = \"ControlBusy\", r[r.AckTimeout = 4] = \"AckTimeout\", r[r.ControlTerminated = 5] = \"ControlTerminated\", r[r.ControllerTerminated = 6] = \"ControllerTerminated\", r[r.DataChannelError = 7] = \"DataChannelError\", r[r.ControllerCancelled = 8] = \"ControllerCancelled\", r[r.ControlDisabled = 9] = \"ControlDisabled\", r[r.ControlTerminatedToAllowOtherController = 10] = \"ControlTerminatedToAllowOtherController\";\n}(s || (s = {}));\nexport { i as ControlCommand, C as ErrorReason, s as SessionTerminatedReason, d as getCapableParticipants, b as isSupported, h as registerOnCapableParticipantsChangeHandler, E as registerOnDeviceStateChangeHandler, w as registerOnErrorHandler, p as registerOnSessionStatusChangeHandler, c as requestControl, u as sendControlCommand, f as terminateSession };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}