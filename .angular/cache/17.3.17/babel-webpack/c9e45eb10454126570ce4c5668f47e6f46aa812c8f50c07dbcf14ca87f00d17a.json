{"ast":null,"code":"import { ThreadItemStatus } from '../services/threads.service';\nexport const getNextActiveThreadId = (threads, currentThreadId) => {\n  const nextActiveThread = findNextActiveThread(threads, currentThreadId);\n  if (nextActiveThread) {\n    return nextActiveThread.id;\n  } else {\n    const firstActiveThread = threads.find(thread => thread.id !== currentThreadId && thread.status === ThreadItemStatus.ACTIVE);\n    return firstActiveThread === null || firstActiveThread === void 0 ? void 0 : firstActiveThread.id;\n  }\n};\nconst findNextActiveThread = (threads, currentThreadId) => {\n  const threadIndex = threads.findIndex(thread => thread.id === currentThreadId);\n  if (threadIndex !== -1 && threads.length > threadIndex + 1) {\n    // Find the next thread with the status of ACTIVE\n    const nextActiveThread = threads.slice(threadIndex + 1).find(thread => thread.status === ThreadItemStatus.ACTIVE);\n    return nextActiveThread;\n  }\n  return undefined;\n};","map":{"version":3,"names":["ThreadItemStatus","getNextActiveThreadId","threads","currentThreadId","nextActiveThread","findNextActiveThread","id","firstActiveThread","find","thread","status","ACTIVE","threadIndex","findIndex","length","slice","undefined"],"sources":["D:\\Project\\github-teams\\teams-app-new\\src\\app\\utils\\threadsUtils.ts"],"sourcesContent":["import { ThreadItem, ThreadItemStatus } from '../services/threads.service';\r\n\r\nexport const getNextActiveThreadId = (threads: ThreadItem[], currentThreadId: string): string | undefined => {\r\n  const nextActiveThread = findNextActiveThread(threads, currentThreadId);\r\n  if (nextActiveThread) {\r\n    return nextActiveThread.id;\r\n  } else {\r\n    const firstActiveThread = threads.find(\r\n      (thread) => thread.id !== currentThreadId && thread.status === ThreadItemStatus.ACTIVE\r\n    );\r\n    return firstActiveThread?.id;\r\n  }\r\n};\r\n\r\nconst findNextActiveThread = (threads: ThreadItem[], currentThreadId: string): ThreadItem | undefined => {\r\n  const threadIndex = threads.findIndex((thread) => thread.id === currentThreadId);\r\n  if (threadIndex !== -1 && threads.length > threadIndex + 1) {\r\n    // Find the next thread with the status of ACTIVE\r\n    const nextActiveThread = threads.slice(threadIndex + 1).find((thread) => thread.status === ThreadItemStatus.ACTIVE);\r\n    return nextActiveThread;\r\n  }\r\n  return undefined;\r\n};\r\n"],"mappings":"AAAA,SAAqBA,gBAAgB,QAAQ,6BAA6B;AAE1E,OAAO,MAAMC,qBAAqB,GAAGA,CAACC,OAAqB,EAAEC,eAAuB,KAAwB;EAC1G,MAAMC,gBAAgB,GAAGC,oBAAoB,CAACH,OAAO,EAAEC,eAAe,CAAC;EACvE,IAAIC,gBAAgB,EAAE;IACpB,OAAOA,gBAAgB,CAACE,EAAE;GAC3B,MAAM;IACL,MAAMC,iBAAiB,GAAGL,OAAO,CAACM,IAAI,CACnCC,MAAM,IAAKA,MAAM,CAACH,EAAE,KAAKH,eAAe,IAAIM,MAAM,CAACC,MAAM,KAAKV,gBAAgB,CAACW,MAAM,CACvF;IACD,OAAOJ,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAED,EAAE;;AAEhC,CAAC;AAED,MAAMD,oBAAoB,GAAGA,CAACH,OAAqB,EAAEC,eAAuB,KAA4B;EACtG,MAAMS,WAAW,GAAGV,OAAO,CAACW,SAAS,CAAEJ,MAAM,IAAKA,MAAM,CAACH,EAAE,KAAKH,eAAe,CAAC;EAChF,IAAIS,WAAW,KAAK,CAAC,CAAC,IAAIV,OAAO,CAACY,MAAM,GAAGF,WAAW,GAAG,CAAC,EAAE;IAC1D;IACA,MAAMR,gBAAgB,GAAGF,OAAO,CAACa,KAAK,CAACH,WAAW,GAAG,CAAC,CAAC,CAACJ,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,MAAM,KAAKV,gBAAgB,CAACW,MAAM,CAAC;IACnH,OAAOP,gBAAgB;;EAEzB,OAAOY,SAAS;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}