{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _ChatScreenComponent;\nimport { EventEmitter } from '@angular/core';\nimport { Subject, takeUntil } from 'rxjs';\nimport { ThreadItemStatus } from '../../services/threads.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../teams-fx.service\";\nimport * as i2 from \"../../services/agent-work-item.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../chat-header/chat-header.component\";\nimport * as i5 from \"../chat-components/chat-components.component\";\nimport * as i6 from \"../loading-spinner/loading-spinner.component\";\nfunction ChatScreenComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"app-chat-header\", 3);\n    i0.ɵɵlistener(\"onResolveChat\", function ChatScreenComponent_ng_container_1_Template_app_chat_header_onResolveChat_1_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.handleOnResolveChat());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"div\", 4);\n    i0.ɵɵelement(3, \"app-chat-components\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"personaName\", ctx_r1.receiverName)(\"threadStatus\", ctx_r1.threadStatus);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"isDarkMode\", ctx_r1.isDarkMode)(\"threadId\", ctx_r1.threadId)(\"userId\", ctx_r1.userId)(\"token\", ctx_r1.token)(\"endpointUrl\", ctx_r1.endpointUrl)(\"displayName\", ctx_r1.displayName);\n  }\n}\nfunction ChatScreenComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-loading-spinner\");\n  }\n}\nexport class ChatScreenComponent {\n  constructor(teamsFxService, agentWorkItemService) {\n    this.teamsFxService = teamsFxService;\n    this.agentWorkItemService = agentWorkItemService;\n    this.token = '';\n    this.userId = '';\n    this.displayName = '';\n    this.endpointUrl = '';\n    this.threadId = '';\n    this.receiverName = '';\n    this.threadStatus = '';\n    this.onResolveChat = new EventEmitter();\n    this.destroy$ = new Subject();\n    this.isLoading = true;\n    this.isDarkMode = false;\n  }\n  ngOnInit() {\n    this.initializeChat();\n    this.subscribeToTheme();\n  }\n  ngOnChanges(changes) {\n    if (changes['threadId'] && !changes['threadId'].firstChange) {}\n    if (changes['token'] || changes['userId'] || changes['endpointUrl'] || changes['threadId']) {\n      this.initializeChat();\n    }\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n    // Cleanup\n    // Restore body overflow\n    document.body.style.overflow = 'auto';\n  }\n  initializeChat() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Disable pull down to refresh\n        document.body.style.overflow = 'hidden';\n        // Set loading to false immediately since ChatComponents will handle its own initialization\n        _this.isLoading = false;\n      } catch (error) {\n        console.error('Failed to initialize chat screen:', error);\n        _this.isLoading = false;\n      }\n    })();\n  }\n  subscribeToTheme() {\n    this.teamsFxService.teamsContext$.pipe(takeUntil(this.destroy$)).subscribe(context => {\n      this.isDarkMode = context.themeString === 'dark';\n    });\n  }\n  handleOnResolveChat() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.agentWorkItemService.updateAgentWorkItem(_this2.threadId, ThreadItemStatus.RESOLVED);\n        _this2.onResolveChat.emit(_this2.threadId);\n      } catch (error) {\n        console.error('Failed to resolve chat:', error);\n      }\n    })();\n  }\n}\n_ChatScreenComponent = ChatScreenComponent;\n_ChatScreenComponent.ɵfac = function ChatScreenComponent_Factory(t) {\n  return new (t || _ChatScreenComponent)(i0.ɵɵdirectiveInject(i1.TeamsFxService), i0.ɵɵdirectiveInject(i2.AgentWorkItemService));\n};\n_ChatScreenComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _ChatScreenComponent,\n  selectors: [[\"app-chat-screen\"]],\n  inputs: {\n    token: \"token\",\n    userId: \"userId\",\n    displayName: \"displayName\",\n    endpointUrl: \"endpointUrl\",\n    threadId: \"threadId\",\n    receiverName: \"receiverName\",\n    threadStatus: \"threadStatus\"\n  },\n  outputs: {\n    onResolveChat: \"onResolveChat\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 4,\n  vars: 2,\n  consts: [[\"loadingTemplate\", \"\"], [1, \"chat-screen-container\"], [4, \"ngIf\", \"ngIfElse\"], [3, \"onResolveChat\", \"personaName\", \"threadStatus\"], [1, \"chat-content\"], [3, \"isDarkMode\", \"threadId\", \"userId\", \"token\", \"endpointUrl\", \"displayName\"]],\n  template: function ChatScreenComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 1);\n      i0.ɵɵtemplate(1, ChatScreenComponent_ng_container_1_Template, 4, 8, \"ng-container\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, ChatScreenComponent_ng_template_2_Template, 1, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      const loadingTemplate_r3 = i0.ɵɵreference(3);\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"ngIf\", !ctx.isLoading)(\"ngIfElse\", loadingTemplate_r3);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ChatHeaderComponent, i5.ChatComponentsComponent, i6.LoadingSpinnerComponent],\n  styles: [\".chat-screen-container[_ngcontent-%COMP%] {\\n      display: flex;\\n      flex-direction: column;\\n      height: 100%;\\n      min-height: 400px;\\n      max-height: 100vh;\\n      background-color: #ffffff;\\n      overflow: hidden;\\n    }\\n    \\n    .chat-content[_ngcontent-%COMP%] {\\n      flex: 1;\\n      display: flex;\\n      flex-direction: column;\\n      overflow: hidden;\\n      min-height: 0;\\n    }\\n    \\n    \\n\\n    @media (max-width: 768px) {\\n      .chat-screen-container[_ngcontent-%COMP%] {\\n        min-height: 300px;\\n      }\\n    }\\n    \\n    @media (max-width: 480px) {\\n      .chat-screen-container[_ngcontent-%COMP%] {\\n        min-height: 250px;\\n      }\\n    }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2hhdC9jaGF0LXNjcmVlbi9jaGF0LXNjcmVlbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtJQUNJO01BQ0UsYUFBYTtNQUNiLHNCQUFzQjtNQUN0QixZQUFZO01BQ1osaUJBQWlCO01BQ2pCLGlCQUFpQjtNQUNqQix5QkFBeUI7TUFDekIsZ0JBQWdCO0lBQ2xCOztJQUVBO01BQ0UsT0FBTztNQUNQLGFBQWE7TUFDYixzQkFBc0I7TUFDdEIsZ0JBQWdCO01BQ2hCLGFBQWE7SUFDZjs7SUFFQSwyQkFBMkI7SUFDM0I7TUFDRTtRQUNFLGlCQUFpQjtNQUNuQjtJQUNGOztJQUVBO01BQ0U7UUFDRSxpQkFBaUI7TUFDbkI7SUFDRiIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgIC5jaGF0LXNjcmVlbi1jb250YWluZXIge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBtaW4taGVpZ2h0OiA0MDBweDtcbiAgICAgIG1heC1oZWlnaHQ6IDEwMHZoO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgfVxuICAgIFxuICAgIC5jaGF0LWNvbnRlbnQge1xuICAgICAgZmxleDogMTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIG1pbi1oZWlnaHQ6IDA7XG4gICAgfVxuICAgIFxuICAgIC8qIFJlc3BvbnNpdmUgYWRqdXN0bWVudHMgKi9cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAgIC5jaGF0LXNjcmVlbi1jb250YWluZXIge1xuICAgICAgICBtaW4taGVpZ2h0OiAzMDBweDtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQ4MHB4KSB7XG4gICAgICAuY2hhdC1zY3JlZW4tY29udGFpbmVyIHtcbiAgICAgICAgbWluLWhlaWdodDogMjUwcHg7XG4gICAgICB9XG4gICAgfVxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["EventEmitter","Subject","takeUntil","ThreadItemStatus","i0","ɵɵelementContainerStart","ɵɵelementStart","ɵɵlistener","ChatScreenComponent_ng_container_1_Template_app_chat_header_onResolveChat_1_listener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","handleOnResolveChat","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty","receiverName","threadStatus","isDarkMode","threadId","userId","token","endpointUrl","displayName","ChatScreenComponent","constructor","teamsFxService","agentWorkItemService","onResolveChat","destroy$","isLoading","ngOnInit","initializeChat","subscribeToTheme","ngOnChanges","changes","firstChange","ngOnDestroy","next","complete","document","body","style","overflow","_this","_asyncToGenerator","error","console","teamsContext$","pipe","subscribe","context","themeString","_this2","updateAgentWorkItem","RESOLVED","emit","ɵɵdirectiveInject","i1","TeamsFxService","i2","AgentWorkItemService","selectors","inputs","outputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","ChatScreenComponent_Template","rf","ctx","ɵɵtemplate","ChatScreenComponent_ng_container_1_Template","ChatScreenComponent_ng_template_2_Template","ɵɵtemplateRefExtractor","loadingTemplate_r3"],"sources":["D:\\Project\\github-teams\\teams-app-new\\src\\app\\chat\\chat-screen\\chat-screen.component.ts"],"sourcesContent":["import { Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { TeamsFxService } from '../../teams-fx.service';\r\nimport { AgentWorkItemService } from '../../services/agent-work-item.service';\r\nimport { ThreadItemStatus } from '../../services/threads.service';\r\n\r\n@Component({\r\n  selector: 'app-chat-screen',\r\n  template: `\r\n    <div class=\"chat-screen-container\">\r\n      <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\r\n        <app-chat-header\r\n          [personaName]=\"receiverName\"\r\n          [threadStatus]=\"threadStatus\"\r\n          (onResolveChat)=\"handleOnResolveChat()\">\r\n        </app-chat-header>\r\n        \r\n        <div class=\"chat-content\">\r\n          <app-chat-components \r\n            [isDarkMode]=\"isDarkMode\"\r\n            [threadId]=\"threadId\"\r\n            [userId]=\"userId\"\r\n            [token]=\"token\"\r\n            [endpointUrl]=\"endpointUrl\"\r\n            [displayName]=\"displayName\">\r\n          </app-chat-components>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n    \r\n    <ng-template #loadingTemplate>\r\n      <app-loading-spinner></app-loading-spinner>\r\n    </ng-template>\r\n  `,\r\n  styles: [`\r\n    .chat-screen-container {\r\n      display: flex;\r\n      flex-direction: column;\r\n      height: 100%;\r\n      min-height: 400px;\r\n      max-height: 100vh;\r\n      background-color: #ffffff;\r\n      overflow: hidden;\r\n    }\r\n    \r\n    .chat-content {\r\n      flex: 1;\r\n      display: flex;\r\n      flex-direction: column;\r\n      overflow: hidden;\r\n      min-height: 0;\r\n    }\r\n    \r\n    /* Responsive adjustments */\r\n    @media (max-width: 768px) {\r\n      .chat-screen-container {\r\n        min-height: 300px;\r\n      }\r\n    }\r\n    \r\n    @media (max-width: 480px) {\r\n      .chat-screen-container {\r\n        min-height: 250px;\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class ChatScreenComponent implements OnInit, OnDestroy, OnChanges {\r\n  @Input() token: string = '';\r\n  @Input() userId: string = '';\r\n  @Input() displayName: string = '';\r\n  @Input() endpointUrl: string = '';\r\n  @Input() threadId: string = '';\r\n  @Input() receiverName: string = '';\r\n  @Input() threadStatus: string = '';\r\n  \r\n  @Output() onResolveChat = new EventEmitter<string>();\r\n  \r\n  private destroy$ = new Subject<void>();\r\n  \r\n  isLoading: boolean = true;\r\n  isDarkMode: boolean = false;\r\n  \r\n  constructor(\r\n    private teamsFxService: TeamsFxService,\r\n    private agentWorkItemService: AgentWorkItemService\r\n  ) {}\r\n  \r\n  ngOnInit() {\r\n    this.initializeChat();\r\n    this.subscribeToTheme();\r\n  }\r\n  \r\n  ngOnChanges(changes: SimpleChanges) {\r\n    \r\n    if (changes['threadId'] && !changes['threadId'].firstChange) {\r\n    }\r\n    \r\n    if (changes['token'] || changes['userId'] || changes['endpointUrl'] || changes['threadId']) {\r\n      this.initializeChat();\r\n    }\r\n  }\r\n  \r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n    \r\n    // Cleanup\r\n    // Restore body overflow\r\n    document.body.style.overflow = 'auto';\r\n  }\r\n  \r\n  private async initializeChat() {\r\n    try {\r\n      // Disable pull down to refresh\r\n      document.body.style.overflow = 'hidden';\r\n      \r\n      // Set loading to false immediately since ChatComponents will handle its own initialization\r\n      this.isLoading = false;\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to initialize chat screen:', error);\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n  \r\n  private subscribeToTheme() {\r\n    this.teamsFxService.teamsContext$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(context => {\r\n        this.isDarkMode = context.themeString === 'dark';\r\n      });\r\n  }\r\n\r\n  async handleOnResolveChat() {\r\n    try {\r\n      await this.agentWorkItemService.updateAgentWorkItem(\r\n        this.threadId, \r\n        ThreadItemStatus.RESOLVED\r\n      );\r\n      \r\n      this.onResolveChat.emit(this.threadId);\r\n    } catch (error) {\r\n      console.error('Failed to resolve chat:', error);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}