{"ast":null,"code":"import { sendMessageToParent as e } from \"../internal/communication.js\";\nimport { registerHandler as n } from \"../internal/handlers.js\";\nimport { ensureInitialized as t } from \"../internal/internalAPIs.js\";\nimport { getApiVersionTag as r } from \"../internal/telemetry.js\";\nimport { runtime as s } from \"./runtime.js\";\nimport { errorNotSupportedOnPlatform as o } from \"./constants.js\";\nconst i = \"v2\";\nvar u, m;\n!function (e) {\n  e[e.ifRoom = 0] = \"ifRoom\", e[e.overflowOnly = 1] = \"overflowOnly\";\n}(u || (u = {}));\nclass a {\n  constructor() {\n    this.enabled = !0, this.selected = !1;\n  }\n}\nlet f, l, c;\nfunction p() {\n  n(r(i, \"menus.registerNavBarMenuItemPressHandler\"), \"navBarMenuItemPress\", h, !1), n(r(i, \"menus.registerActionMenuItemPressHandler\"), \"actionMenuItemPress\", I, !1), n(r(i, \"menus.registerSetModuleViewHandler\"), \"setModuleView\", w, !1);\n}\nfunction d(n, u) {\n  if (t(s), !P()) throw o;\n  c = u, e(r(i, \"menus.setUpViews\"), \"setUpViews\", [n]);\n}\nfunction w(n) {\n  c && c(n) || (t(s), e(r(i, \"menus.handleViewConfigItemPress\"), \"viewConfigItemPress\", [n]));\n}\nfunction M(n, u) {\n  if (t(s), !P()) throw o;\n  f = u, e(r(i, \"menus.setNavBarMenu\"), \"setNavBarMenu\", [n]);\n}\nfunction h(n) {\n  f && f(n) || (t(s), e(r(i, \"menus.handleNavBarMenuItemPress\"), \"handleNavBarMenuItemPress\", [n]));\n}\nfunction v(n, u) {\n  if (t(s), !P()) throw o;\n  l = u, e(r(i, \"menus.showActionMenu\"), \"showActionMenu\", [n]);\n}\nfunction I(n) {\n  l && l(n) || (t(s), e(r(i, \"menus.handleActionMenuItemPress\"), \"handleActionMenuItemPress\", [n]));\n}\nfunction P() {\n  return !(!t(s) || !s.supports.menus);\n}\n!function (e) {\n  e.dropDown = \"dropDown\", e.popOver = \"popOver\";\n}(m || (m = {}));\nexport { u as DisplayMode, a as MenuItem, m as MenuListType, p as initialize, P as isSupported, M as setNavBarMenu, d as setUpViews, v as showActionMenu };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}