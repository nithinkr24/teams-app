{"ast":null,"code":"import { sendAndHandleSdkError as o } from \"../../internal/communication.js\";\nimport { ensureInitialized as t } from \"../../internal/internalAPIs.js\";\nimport { getApiVersionTag as n } from \"../../internal/telemetry.js\";\nimport { FrameContexts as r, errorNotSupportedOnPlatform as i } from \"../constants.js\";\nimport { DevicePermission as s } from \"../interfaces.js\";\nimport { runtime as e } from \"../runtime.js\";\nimport * as a from \"./map.js\";\nexport { a as map };\nconst m = \"v2\";\nfunction c() {\n  if (t(e, r.content, r.task), !u()) throw i;\n  return o(n(m, \"geoLocation.getCurrentLocation\"), \"location.getLocation\", {\n    allowChooseLocation: !1,\n    showMap: !1\n  });\n}\nfunction p() {\n  if (t(e, r.content, r.task), !u()) throw i;\n  const a = s.GeoLocation;\n  return new Promise(t => {\n    t(o(n(m, \"geoLocation.hasPermission\"), \"permissions.has\", a));\n  });\n}\nfunction f() {\n  if (t(e, r.content, r.task), !u()) throw i;\n  const a = s.GeoLocation;\n  return new Promise(t => {\n    t(o(n(m, \"geoLocation.requestPermission\"), \"permissions.request\", a));\n  });\n}\nfunction u() {\n  return !!(t(e) && e.supports.geoLocation && e.supports.permissions);\n}\nexport { c as getCurrentLocation, p as hasPermission, u as isSupported, f as requestPermission };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}