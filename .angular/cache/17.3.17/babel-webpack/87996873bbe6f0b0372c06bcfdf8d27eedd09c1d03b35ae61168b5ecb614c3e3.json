{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isKeyCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { createDefaultPipeline } from \"./clientHelpers.js\";\nimport { getClient as tspGetClient } from \"@typespec/ts-http-runtime\";\n/**\n * Function to wrap RequestParameters so that we get the legacy onResponse behavior in core-client-rest\n */\nfunction wrapRequestParameters(parameters) {\n  if (parameters.onResponse) {\n    return Object.assign(Object.assign({}, parameters), {\n      onResponse(rawResponse, error) {\n        var _a;\n        (_a = parameters.onResponse) === null || _a === void 0 ? void 0 : _a.call(parameters, rawResponse, error, error);\n      }\n    });\n  }\n  return parameters;\n}\nexport function getClient(endpoint, credentialsOrPipelineOptions, clientOptions = {}) {\n  let credentials;\n  if (credentialsOrPipelineOptions) {\n    if (isCredential(credentialsOrPipelineOptions)) {\n      credentials = credentialsOrPipelineOptions;\n    } else {\n      clientOptions = credentialsOrPipelineOptions !== null && credentialsOrPipelineOptions !== void 0 ? credentialsOrPipelineOptions : {};\n    }\n  }\n  const pipeline = createDefaultPipeline(endpoint, credentials, clientOptions);\n  const tspClient = tspGetClient(endpoint, Object.assign(Object.assign({}, clientOptions), {\n    pipeline\n  }));\n  const client = (path, ...args) => {\n    return {\n      get: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).get(wrapRequestParameters(requestOptions));\n      },\n      post: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).post(wrapRequestParameters(requestOptions));\n      },\n      put: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).put(wrapRequestParameters(requestOptions));\n      },\n      patch: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).patch(wrapRequestParameters(requestOptions));\n      },\n      delete: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).delete(wrapRequestParameters(requestOptions));\n      },\n      head: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).head(wrapRequestParameters(requestOptions));\n      },\n      options: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).options(wrapRequestParameters(requestOptions));\n      },\n      trace: (requestOptions = {}) => {\n        return tspClient.path(path, ...args).trace(wrapRequestParameters(requestOptions));\n      }\n    };\n  };\n  return {\n    path: client,\n    pathUnchecked: client,\n    pipeline: tspClient.pipeline\n  };\n}\nfunction isCredential(param) {\n  return isKeyCredential(param) || isTokenCredential(param);\n}","map":{"version":3,"names":["isKeyCredential","isTokenCredential","createDefaultPipeline","getClient","tspGetClient","wrapRequestParameters","parameters","onResponse","Object","assign","rawResponse","error","_a","call","endpoint","credentialsOrPipelineOptions","clientOptions","credentials","isCredential","pipeline","tspClient","client","path","args","get","requestOptions","post","put","patch","delete","head","options","trace","pathUnchecked","param"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure-rest/core-client/dist/browser/getClient.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isKeyCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { createDefaultPipeline } from \"./clientHelpers.js\";\nimport { getClient as tspGetClient, } from \"@typespec/ts-http-runtime\";\n/**\n * Function to wrap RequestParameters so that we get the legacy onResponse behavior in core-client-rest\n */\nfunction wrapRequestParameters(parameters) {\n    if (parameters.onResponse) {\n        return Object.assign(Object.assign({}, parameters), { onResponse(rawResponse, error) {\n                var _a;\n                (_a = parameters.onResponse) === null || _a === void 0 ? void 0 : _a.call(parameters, rawResponse, error, error);\n            } });\n    }\n    return parameters;\n}\nexport function getClient(endpoint, credentialsOrPipelineOptions, clientOptions = {}) {\n    let credentials;\n    if (credentialsOrPipelineOptions) {\n        if (isCredential(credentialsOrPipelineOptions)) {\n            credentials = credentialsOrPipelineOptions;\n        }\n        else {\n            clientOptions = credentialsOrPipelineOptions !== null && credentialsOrPipelineOptions !== void 0 ? credentialsOrPipelineOptions : {};\n        }\n    }\n    const pipeline = createDefaultPipeline(endpoint, credentials, clientOptions);\n    const tspClient = tspGetClient(endpoint, Object.assign(Object.assign({}, clientOptions), { pipeline }));\n    const client = (path, ...args) => {\n        return {\n            get: (requestOptions = {}) => {\n                return tspClient.path(path, ...args).get(wrapRequestParameters(requestOptions));\n            },\n            post: (requestOptions = {}) => {\n                return tspClient.path(path, ...args).post(wrapRequestParameters(requestOptions));\n            },\n            put: (requestOptions = {}) => {\n                return tspClient.path(path, ...args).put(wrapRequestParameters(requestOptions));\n            },\n            patch: (requestOptions = {}) => {\n                return tspClient.path(path, ...args).patch(wrapRequestParameters(requestOptions));\n            },\n            delete: (requestOptions = {}) => {\n                return tspClient.path(path, ...args).delete(wrapRequestParameters(requestOptions));\n            },\n            head: (requestOptions = {}) => {\n                return tspClient.path(path, ...args).head(wrapRequestParameters(requestOptions));\n            },\n            options: (requestOptions = {}) => {\n                return tspClient.path(path, ...args).options(wrapRequestParameters(requestOptions));\n            },\n            trace: (requestOptions = {}) => {\n                return tspClient.path(path, ...args).trace(wrapRequestParameters(requestOptions));\n            },\n        };\n    };\n    return {\n        path: client,\n        pathUnchecked: client,\n        pipeline: tspClient.pipeline,\n    };\n}\nfunction isCredential(param) {\n    return isKeyCredential(param) || isTokenCredential(param);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}