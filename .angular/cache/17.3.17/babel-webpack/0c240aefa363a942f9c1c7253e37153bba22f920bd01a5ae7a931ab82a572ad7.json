{"ast":null,"code":"import { sendAndUnwrap as t } from \"../../../internal/communication.js\";\nimport { getUserJoinedTeamsSupportedAndroidClientVersion as r } from \"../../../internal/constants.js\";\nimport { GlobalVars as e } from \"../../../internal/globalVars.js\";\nimport { ensureInitialized as s, isCurrentSDKVersionAtLeast as o } from \"../../../internal/internalAPIs.js\";\nimport { getApiVersionTag as n } from \"../../../internal/telemetry.js\";\nimport { errorNotSupportedOnPlatform as i, HostClientType as m } from \"../../../public/constants.js\";\nimport { ErrorCode as a } from \"../../../public/interfaces.js\";\nimport { runtime as l } from \"../../../public/runtime.js\";\nfunction p(p) {\n  return new Promise(f => {\n    if (s(l), !u()) throw i;\n    if ((e.hostClientType === m.android || e.hostClientType === m.teamsRoomsAndroid || e.hostClientType === m.teamsPhones || e.hostClientType === m.teamsDisplays) && !o(r)) {\n      const t = {\n        errorCode: a.OLD_PLATFORM\n      };\n      throw new Error(JSON.stringify(t));\n    }\n    f(t(n(\"v1\", \"teams.fullTrust.joinedTeams.getUserJoinedTeams\"), \"getUserJoinedTeams\", p));\n  });\n}\nfunction u() {\n  return !(!s(l) || !l.supports.teams) && !!l.supports.teams.fullTrust && !!l.supports.teams.fullTrust.joinedTeams;\n}\nexport { p as getUserJoinedTeams, u as isSupported };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}