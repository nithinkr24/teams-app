{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * @internal\n */\nexport function getHeaderName() {\n  return \"x-ms-useragent\";\n}\nfunction getBrowserInfo(userAgent) {\n  const browserRegexes = [{\n    name: \"Firefox\",\n    regex: /Firefox\\/([\\d.]+)/\n  }, {\n    name: \"Safari\",\n    regex: /Version\\/([\\d.]+).*Safari/\n  }];\n  for (const browser of browserRegexes) {\n    const match = userAgent.match(browser.regex);\n    if (match) {\n      return {\n        brand: browser.name,\n        version: match[1]\n      };\n    }\n  }\n  return undefined;\n}\nfunction getBrandVersionString(brands) {\n  const brandOrder = [\"Google Chrome\", \"Microsoft Edge\", \"Opera\", \"Brave\", \"Chromium\"];\n  for (const brand of brandOrder) {\n    const foundBrand = brands.find(b => b.brand === brand);\n    if (foundBrand) {\n      return foundBrand;\n    }\n  }\n  return undefined;\n}\n/**\n * @internal\n */\nexport function setPlatformSpecificData(_x) {\n  return _setPlatformSpecificData.apply(this, arguments);\n}\n//# sourceMappingURL=userAgentPlatform-browser.mjs.map\nfunction _setPlatformSpecificData() {\n  _setPlatformSpecificData = _asyncToGenerator(function* (map) {\n    const localNavigator = globalThis.navigator;\n    let osPlatform = \"unknown\";\n    if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.userAgentData) {\n      const entropyValues = yield localNavigator.userAgentData.getHighEntropyValues([\"architecture\", \"platformVersion\"]);\n      osPlatform = `${entropyValues.architecture}-${entropyValues.platform}-${entropyValues.platformVersion}`;\n      // Get the brand and version\n      const brand = getBrandVersionString(localNavigator.userAgentData.brands);\n      if (brand) {\n        map.set(brand.brand, brand.version);\n      }\n    } else if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.platform) {\n      osPlatform = localNavigator.platform;\n      const brand = getBrowserInfo(localNavigator.userAgent);\n      if (brand) {\n        map.set(brand.brand, brand.version);\n      }\n    } else if (typeof globalThis.EdgeRuntime === \"string\") {\n      map.set(\"EdgeRuntime\", globalThis.EdgeRuntime);\n    }\n    map.set(\"OS\", osPlatform);\n  });\n  return _setPlatformSpecificData.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}