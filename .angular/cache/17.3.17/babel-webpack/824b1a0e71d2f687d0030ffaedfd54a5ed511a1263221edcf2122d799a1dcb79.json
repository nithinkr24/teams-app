{"ast":null,"code":"import { sendMessageToParent as e } from \"../internal/communication.js\";\nimport { ensureInitialized as r } from \"../internal/internalAPIs.js\";\nimport { decodeAttachment as t, createFile as n } from \"../internal/mediaUtil.js\";\nimport { getLogger as l, getApiVersionTag as i } from \"../internal/telemetry.js\";\nimport { FrameContexts as o, errorNotSupportedOnPlatform as s } from \"./constants.js\";\nimport { ErrorCode as a } from \"./interfaces.js\";\nimport { runtime as u } from \"./runtime.js\";\nconst c = l(\"thirdPartyCloudStorage\");\nclass f {\n  constructor(e, r) {\n    this.fileType = e, this.assembleAttachment = r;\n  }\n}\nlet d = [],\n  h = null,\n  m = !0,\n  p = null;\nfunction g(t, n) {\n  if (!n) throw new Error(\"[getDragAndDropFiles] Callback cannot be null\");\n  if (t && \"\" !== t) {\n    if (r(u, o.content, o.task), !C()) throw s;\n    if (p) throw p = null, new Error(\"getDragAndDropFiles cannot be called twice\");\n    p = n, m = !0, e(i(\"v2\", \"thirdPartyCloudStorage.getDragAndDropFiles\"), \"thirdPartyCloudStorage.getDragAndDropFiles\", [t], R);\n  } else {\n    n([], {\n      errorCode: a.INVALID_ARGUMENTS\n    });\n  }\n}\nfunction R(e) {\n  if (p) if (e && e.error) p([], e.error), p = null;else if (e && e.fileChunk) try {\n    m || 0 !== e.fileChunk.chunkSequence || (c(\"Last chunk is not received or 'endOfFile' value for previous chunk was not set to true\"), m = !0, p([], {\n      errorCode: a.INTERNAL_ERROR,\n      message: \"error occurred while receiving data\"\n    }), d = [], p = null);\n    const r = t(e.fileChunk, e.fileType);\n    if (r ? (h || (h = new f(e.fileType, [])), h.assembleAttachment.push(r)) : (c(`Received a null assemble attachment for when decoding chunk sequence ${e.fileChunk.chunkSequence}; not including the chunk in the assembled file.`), p ? p([], {\n      errorCode: a.INTERNAL_ERROR,\n      message: \"error occurred while receiving data\"\n    }) : p = null, d = [], p = null, m = !0), m = e.fileChunk.endOfFile, e.fileChunk.endOfFile && h) {\n      const r = n(h.assembleAttachment, h.fileType);\n      if (r) {\n        const t = new File([r], e.fileName, {\n          type: r.type\n        });\n        d.push(t);\n      }\n      e.isLastFile && p && (p(d, e.error), d = [], p = null, m = !0), h = null;\n    }\n  } catch (e) {\n    p && (p([], {\n      errorCode: a.INTERNAL_ERROR,\n      message: e\n    }), d = [], p = null, m = !0);\n  } else p([], {\n    errorCode: a.INTERNAL_ERROR,\n    message: \"data received is null\"\n  }), d = [], p = null, m = !0;\n}\nfunction C() {\n  return !(!r(u) || !u.supports.thirdPartyCloudStorage);\n}\nexport { g as getDragAndDropFiles, C as isSupported };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}