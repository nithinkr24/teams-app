{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { delay } from \"@azure/core-util\";\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS = {\n  forcedRefreshWindowInMs: 1000,\n  // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000,\n  // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nfunction beginRefresh(_x, _x2, _x3) {\n  return _beginRefresh.apply(this, arguments);\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction _beginRefresh() {\n  _beginRefresh = _asyncToGenerator(function* (getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    function tryGetAccessToken() {\n      return _tryGetAccessToken.apply(this, arguments);\n    }\n    function _tryGetAccessToken() {\n      _tryGetAccessToken = _asyncToGenerator(function* () {\n        if (Date.now() < refreshTimeout) {\n          try {\n            return yield getAccessToken();\n          } catch (_a) {\n            return null;\n          }\n        } else {\n          const finalToken = yield getAccessToken();\n          // Timeout is up, so throw if it's still null\n          if (finalToken === null) {\n            throw new Error(\"Failed to refresh access token.\");\n          }\n          return finalToken;\n        }\n      });\n      return _tryGetAccessToken.apply(this, arguments);\n    }\n    let token = yield tryGetAccessToken();\n    while (token === null) {\n      yield delay(retryIntervalInMs);\n      token = yield tryGetAccessToken();\n    }\n    return token;\n  });\n  return _beginRefresh.apply(this, arguments);\n}\nexport function createTokenCycler(credential, tokenCyclerOptions) {\n  let refreshWorker = null;\n  let token = null;\n  let tenantId;\n  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing() {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh() {\n      var _a;\n      if (cycler.isRefreshing) {\n        return false;\n      }\n      if ((token === null || token === void 0 ? void 0 : token.refreshAfterTimestamp) && token.refreshAfterTimestamp < Date.now()) {\n        return true;\n      }\n      return ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh() {\n      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();\n    }\n  };\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(scopes, getTokenOptions) {\n    var _a;\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs,\n      // If we don't have a token, then we should timeout immediately\n      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(_token => {\n        refreshWorker = null;\n        token = _token;\n        tenantId = getTokenOptions.tenantId;\n        return token;\n      }).catch(reason => {\n        // We also should reset the refresher if we enter a failed state.  All\n        // existing awaiters will throw, but subsequent requests will start a\n        // new retry chain.\n        refreshWorker = null;\n        token = null;\n        tenantId = undefined;\n        throw reason;\n      });\n    }\n    return refreshWorker;\n  }\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (scopes, tokenOptions) {\n      //\n      // Simple rules:\n      // - If we MUST refresh, then return the refresh task, blocking\n      //   the pipeline until a token is available.\n      // - If we SHOULD refresh, then run refresh but don't return it\n      //   (we can still use the cached token).\n      // - Return the token, since it's fine if we didn't return in\n      //   step 1.\n      //\n      const hasClaimChallenge = Boolean(tokenOptions.claims);\n      const tenantIdChanged = tenantId !== tokenOptions.tenantId;\n      if (hasClaimChallenge) {\n        // If we've received a claim, we know the existing token isn't valid\n        // We want to clear it so that that refresh worker won't use the old expiration time as a timeout\n        token = null;\n      }\n      // If the tenantId passed in token options is different to the one we have\n      // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n      // refresh the token with the new tenantId or token.\n      const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;\n      if (mustRefresh) {\n        return refresh(scopes, tokenOptions);\n      }\n      if (cycler.shouldRefresh) {\n        refresh(scopes, tokenOptions);\n      }\n      return token;\n    });\n    return function (_x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"names":["delay","DEFAULT_CYCLER_OPTIONS","forcedRefreshWindowInMs","retryIntervalInMs","refreshWindowInMs","beginRefresh","_x","_x2","_x3","_beginRefresh","apply","arguments","_asyncToGenerator","getAccessToken","refreshTimeout","tryGetAccessToken","_tryGetAccessToken","Date","now","_a","finalToken","Error","token","createTokenCycler","credential","tokenCyclerOptions","refreshWorker","tenantId","options","Object","assign","cycler","isRefreshing","shouldRefresh","refreshAfterTimestamp","expiresOnTimestamp","mustRefresh","refresh","scopes","getTokenOptions","getToken","then","_token","catch","reason","undefined","_ref","tokenOptions","hasClaimChallenge","Boolean","claims","tenantIdChanged","_x4","_x5"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-rest-pipeline/dist/browser/util/tokenCycler.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { delay } from \"@azure/core-util\";\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n    retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n    refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < refreshTimeout) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await delay(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nexport function createTokenCycler(credential, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    let tenantId;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            if (cycler.isRefreshing) {\n                return false;\n            }\n            if ((token === null || token === void 0 ? void 0 : token.refreshAfterTimestamp) && token.refreshAfterTimestamp < Date.now()) {\n                return true;\n            }\n            return ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        },\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(scopes, getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                tenantId = getTokenOptions.tenantId;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                tenantId = undefined;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (scopes, tokenOptions) => {\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        const hasClaimChallenge = Boolean(tokenOptions.claims);\n        const tenantIdChanged = tenantId !== tokenOptions.tenantId;\n        if (hasClaimChallenge) {\n            // If we've received a claim, we know the existing token isn't valid\n            // We want to clear it so that that refresh worker won't use the old expiration time as a timeout\n            token = null;\n        }\n        // If the tenantId passed in token options is different to the one we have\n        // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n        // refresh the token with the new tenantId or token.\n        const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;\n        if (mustRefresh) {\n            return refresh(scopes, tokenOptions);\n        }\n        if (cycler.shouldRefresh) {\n            refresh(scopes, tokenOptions);\n        }\n        return token;\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}