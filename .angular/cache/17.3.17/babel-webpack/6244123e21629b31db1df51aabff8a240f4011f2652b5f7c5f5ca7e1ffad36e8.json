{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _TeamsAuthService;\nimport { app, authentication } from '@microsoft/teams-js';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./common.service\";\nexport class TeamsAuthService {\n  constructor(commonService) {\n    this.commonService = commonService;\n    this.isInitialized = false;\n    this.initializeTeams();\n  }\n  initializeTeams() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.isInitialized) return;\n      try {\n        yield app.initialize();\n        _this.isInitialized = true;\n      } catch (error) {\n        console.error('Failed to initialize Teams SDK:', error);\n      }\n    })();\n  }\n  openLoginDialog() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.initializeTeams();\n        // this.commonService.setCookie('RedirectURL', environment.teamsAuthEndRedirect, 0);\n        const loginUrl = new URL(environment.loginPath);\n        return new Promise(resolve => {\n          authentication.authenticate({\n            url: loginUrl.toString(),\n            width: 500,\n            height: 600,\n            successCallback: result => {\n              console.log('Login dialog closed, checking authentication...');\n              const response = JSON.parse(result);\n              resolve(response === null || response === void 0 ? void 0 : response.jenneToken);\n            },\n            failureCallback: reason => {\n              console.error('Login dialog was cancelled or failed:', reason);\n              resolve('');\n            }\n          });\n        });\n      } catch (error) {\n        console.error('Failed to open login dialog:', error);\n        return '';\n      }\n    })();\n  }\n}\n_TeamsAuthService = TeamsAuthService;\n_TeamsAuthService.ɵfac = function TeamsAuthService_Factory(t) {\n  return new (t || _TeamsAuthService)(i0.ɵɵinject(i1.CommonService));\n};\n_TeamsAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _TeamsAuthService,\n  factory: _TeamsAuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["app","authentication","environment","TeamsAuthService","constructor","commonService","isInitialized","initializeTeams","_this","_asyncToGenerator","initialize","error","console","openLoginDialog","_this2","loginUrl","URL","loginPath","Promise","resolve","authenticate","url","toString","width","height","successCallback","result","log","response","JSON","parse","jenneToken","failureCallback","reason","i0","ɵɵinject","i1","CommonService","factory","ɵfac","providedIn"],"sources":["D:\\Project\\github-teams\\teams-app-new\\src\\app\\services\\teams-auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { app, authentication } from '@microsoft/teams-js';\nimport { CommonService } from './common.service';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamsAuthService {\n  private isInitialized = false;\n\n  constructor(private commonService: CommonService) {\n    this.initializeTeams();\n  }\n\n  private async initializeTeams() {\n    if (this.isInitialized) return;\n    \n    try {\n      await app.initialize();\n      this.isInitialized = true;\n    } catch (error) {\n      console.error('Failed to initialize Teams SDK:', error);\n    }\n  }\n\n  async openLoginDialog(): Promise<string> {\n    try {\n      await this.initializeTeams();\n      \n      // this.commonService.setCookie('RedirectURL', environment.teamsAuthEndRedirect, 0);\n      \n      const loginUrl = new URL(environment.loginPath);\n      return new Promise((resolve) => {\n        authentication.authenticate({\n          url: loginUrl.toString(),\n          width: 500,\n          height: 600,\n          successCallback: (result: string) => {\n            console.log('Login dialog closed, checking authentication...');\n            const response = JSON.parse(result);\n            resolve(response?.jenneToken);\n          },\n          failureCallback: (reason: string) => {\n            console.error('Login dialog was cancelled or failed:', reason);\n            resolve('');\n          }\n        });\n      });\n    } catch (error) {\n      console.error('Failed to open login dialog:', error);\n      return '';\n    }\n  }\n\n}\n"],"mappings":";;AACA,SAASA,GAAG,EAAEC,cAAc,QAAQ,qBAAqB;AAEzD,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,gBAAgB;EAG3BC,YAAoBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;IAFzB,KAAAC,aAAa,GAAG,KAAK;IAG3B,IAAI,CAACC,eAAe,EAAE;EACxB;EAEcA,eAAeA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC3B,IAAID,KAAI,CAACF,aAAa,EAAE;MAExB,IAAI;QACF,MAAMN,GAAG,CAACU,UAAU,EAAE;QACtBF,KAAI,CAACF,aAAa,GAAG,IAAI;OAC1B,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;;IACxD;EACH;EAEME,eAAeA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAL,iBAAA;MACnB,IAAI;QACF,MAAMK,MAAI,CAACP,eAAe,EAAE;QAE5B;QAEA,MAAMQ,QAAQ,GAAG,IAAIC,GAAG,CAACd,WAAW,CAACe,SAAS,CAAC;QAC/C,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAI;UAC7BlB,cAAc,CAACmB,YAAY,CAAC;YAC1BC,GAAG,EAAEN,QAAQ,CAACO,QAAQ,EAAE;YACxBC,KAAK,EAAE,GAAG;YACVC,MAAM,EAAE,GAAG;YACXC,eAAe,EAAGC,MAAc,IAAI;cAClCd,OAAO,CAACe,GAAG,CAAC,iDAAiD,CAAC;cAC9D,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC;cACnCP,OAAO,CAACS,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,UAAU,CAAC;YAC/B,CAAC;YACDC,eAAe,EAAGC,MAAc,IAAI;cAClCrB,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEsB,MAAM,CAAC;cAC9Dd,OAAO,CAAC,EAAE,CAAC;YACb;WACD,CAAC;QACJ,CAAC,CAAC;OACH,CAAC,OAAOR,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpD,OAAO,EAAE;;IACV;EACH;;oBA7CWR,gBAAgB;;mBAAhBA,iBAAgB,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA;AAAA;;SAAhBlC,iBAAgB;EAAAmC,OAAA,EAAhBnC,iBAAgB,CAAAoC,IAAA;EAAAC,UAAA,EAFf;AAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}