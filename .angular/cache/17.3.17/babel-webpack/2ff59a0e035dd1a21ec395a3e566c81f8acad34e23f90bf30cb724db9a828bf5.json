{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logger as coreClientLogger } from \"./log.js\";\nimport { decodeStringToString } from \"./base64.js\";\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\nexport function parseCAEChallenge(challenges) {\n  const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter(x => x);\n  return bearerChallenges.map(challenge => {\n    const challengeParts = `${challenge.trim()}, `.split('\", ').filter(x => x);\n    const keyValuePairs = challengeParts.map(keyValue => (([key, value]) => ({\n      [key]: value\n    }))(keyValue.trim().split('=\"')));\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b) => Object.assign(Object.assign({}, a), b), {});\n  });\n}\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://learn.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts snippet:AuthorizeRequestOnClaimChallenge\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const policy = bearerTokenAuthenticationPolicy({\n *   challengeCallbacks: {\n *     authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge,\n *   },\n *   scopes: [\"https://service/.default\"],\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\nexport function authorizeRequestOnClaimChallenge(_x) {\n  return _authorizeRequestOnClaimChallenge.apply(this, arguments);\n}\nfunction _authorizeRequestOnClaimChallenge() {\n  _authorizeRequestOnClaimChallenge = _asyncToGenerator(function* (onChallengeOptions) {\n    var _a;\n    const {\n      scopes,\n      response\n    } = onChallengeOptions;\n    const logger = onChallengeOptions.logger || coreClientLogger;\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (!challenge) {\n      logger.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);\n      return false;\n    }\n    const challenges = parseCAEChallenge(challenge) || [];\n    const parsedChallenge = challenges.find(x => x.claims);\n    if (!parsedChallenge) {\n      logger.info(`The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`);\n      return false;\n    }\n    const accessToken = yield onChallengeOptions.getAccessToken(parsedChallenge.scope ? [parsedChallenge.scope] : scopes, {\n      claims: decodeStringToString(parsedChallenge.claims)\n    });\n    if (!accessToken) {\n      return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n    return true;\n  });\n  return _authorizeRequestOnClaimChallenge.apply(this, arguments);\n}","map":{"version":3,"names":["logger","coreClientLogger","decodeStringToString","parseCAEChallenge","challenges","bearerChallenges","trim","split","filter","x","map","challenge","challengeParts","keyValuePairs","keyValue","key","value","reduce","a","b","Object","assign","authorizeRequestOnClaimChallenge","_x","_authorizeRequestOnClaimChallenge","apply","arguments","_asyncToGenerator","onChallengeOptions","_a","scopes","response","headers","get","info","parsedChallenge","find","claims","accessToken","getAccessToken","scope","request","set","tokenType","token"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-client/dist/browser/authorizeRequestOnClaimChallenge.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logger as coreClientLogger } from \"./log.js\";\nimport { decodeStringToString } from \"./base64.js\";\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\nexport function parseCAEChallenge(challenges) {\n    const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter((x) => x);\n    return bearerChallenges.map((challenge) => {\n        const challengeParts = `${challenge.trim()}, `.split('\", ').filter((x) => x);\n        const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split('=\"')));\n        // Key-value pairs to plain object:\n        return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n    });\n}\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://learn.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts snippet:AuthorizeRequestOnClaimChallenge\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const policy = bearerTokenAuthenticationPolicy({\n *   challengeCallbacks: {\n *     authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge,\n *   },\n *   scopes: [\"https://service/.default\"],\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\nexport async function authorizeRequestOnClaimChallenge(onChallengeOptions) {\n    var _a;\n    const { scopes, response } = onChallengeOptions;\n    const logger = onChallengeOptions.logger || coreClientLogger;\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (!challenge) {\n        logger.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const challenges = parseCAEChallenge(challenge) || [];\n    const parsedChallenge = challenges.find((x) => x.claims);\n    if (!parsedChallenge) {\n        logger.info(`The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const accessToken = await onChallengeOptions.getAccessToken(parsedChallenge.scope ? [parsedChallenge.scope] : scopes, {\n        claims: decodeStringToString(parsedChallenge.claims),\n    });\n    if (!accessToken) {\n        return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n    return true;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}