{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isObjectWithProperties } from \"@azure/core-util\";\n/**\n * A static name/key-based credential that supports updating\n * the underlying name and key values.\n */\nexport class AzureNamedKeyCredential {\n  /**\n   * The value of the key to be used in authentication.\n   */\n  get key() {\n    return this._key;\n  }\n  /**\n   * The value of the name to be used in authentication.\n   */\n  get name() {\n    return this._name;\n  }\n  /**\n   * Create an instance of an AzureNamedKeyCredential for use\n   * with a service client.\n   *\n   * @param name - The initial value of the name to use in authentication.\n   * @param key - The initial value of the key to use in authentication.\n   */\n  constructor(name, key) {\n    if (!name || !key) {\n      throw new TypeError(\"name and key must be non-empty strings\");\n    }\n    this._name = name;\n    this._key = key;\n  }\n  /**\n   * Change the value of the key.\n   *\n   * Updates will take effect upon the next request after\n   * updating the key value.\n   *\n   * @param newName - The new name value to be used.\n   * @param newKey - The new key value to be used.\n   */\n  update(newName, newKey) {\n    if (!newName || !newKey) {\n      throw new TypeError(\"newName and newKey must be non-empty strings\");\n    }\n    this._name = newName;\n    this._key = newKey;\n  }\n}\n/**\n * Tests an object to determine whether it implements NamedKeyCredential.\n *\n * @param credential - The assumed NamedKeyCredential to be tested.\n */\nexport function isNamedKeyCredential(credential) {\n  return isObjectWithProperties(credential, [\"name\", \"key\"]) && typeof credential.key === \"string\" && typeof credential.name === \"string\";\n}","map":{"version":3,"names":["isObjectWithProperties","AzureNamedKeyCredential","key","_key","name","_name","constructor","TypeError","update","newName","newKey","isNamedKeyCredential","credential"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-auth/dist/browser/azureNamedKeyCredential.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isObjectWithProperties } from \"@azure/core-util\";\n/**\n * A static name/key-based credential that supports updating\n * the underlying name and key values.\n */\nexport class AzureNamedKeyCredential {\n    /**\n     * The value of the key to be used in authentication.\n     */\n    get key() {\n        return this._key;\n    }\n    /**\n     * The value of the name to be used in authentication.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Create an instance of an AzureNamedKeyCredential for use\n     * with a service client.\n     *\n     * @param name - The initial value of the name to use in authentication.\n     * @param key - The initial value of the key to use in authentication.\n     */\n    constructor(name, key) {\n        if (!name || !key) {\n            throw new TypeError(\"name and key must be non-empty strings\");\n        }\n        this._name = name;\n        this._key = key;\n    }\n    /**\n     * Change the value of the key.\n     *\n     * Updates will take effect upon the next request after\n     * updating the key value.\n     *\n     * @param newName - The new name value to be used.\n     * @param newKey - The new key value to be used.\n     */\n    update(newName, newKey) {\n        if (!newName || !newKey) {\n            throw new TypeError(\"newName and newKey must be non-empty strings\");\n        }\n        this._name = newName;\n        this._key = newKey;\n    }\n}\n/**\n * Tests an object to determine whether it implements NamedKeyCredential.\n *\n * @param credential - The assumed NamedKeyCredential to be tested.\n */\nexport function isNamedKeyCredential(credential) {\n    return (isObjectWithProperties(credential, [\"name\", \"key\"]) &&\n        typeof credential.key === \"string\" &&\n        typeof credential.name === \"string\");\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,sBAAsB,QAAQ,kBAAkB;AACzD;AACA;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,CAAC;EACjC;AACJ;AACA;EACI,IAAIC,GAAGA,CAAA,EAAG;IACN,OAAO,IAAI,CAACC,IAAI;EACpB;EACA;AACJ;AACA;EACI,IAAIC,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACC,KAAK;EACrB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACF,IAAI,EAAEF,GAAG,EAAE;IACnB,IAAI,CAACE,IAAI,IAAI,CAACF,GAAG,EAAE;MACf,MAAM,IAAIK,SAAS,CAAC,wCAAwC,CAAC;IACjE;IACA,IAAI,CAACF,KAAK,GAAGD,IAAI;IACjB,IAAI,CAACD,IAAI,GAAGD,GAAG;EACnB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIM,MAAMA,CAACC,OAAO,EAAEC,MAAM,EAAE;IACpB,IAAI,CAACD,OAAO,IAAI,CAACC,MAAM,EAAE;MACrB,MAAM,IAAIH,SAAS,CAAC,8CAA8C,CAAC;IACvE;IACA,IAAI,CAACF,KAAK,GAAGI,OAAO;IACpB,IAAI,CAACN,IAAI,GAAGO,MAAM;EACtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,UAAU,EAAE;EAC7C,OAAQZ,sBAAsB,CAACY,UAAU,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IACvD,OAAOA,UAAU,CAACV,GAAG,KAAK,QAAQ,IAClC,OAAOU,UAAU,CAACR,IAAI,KAAK,QAAQ;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}