{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isObjectWithProperties } from \"@azure/core-util\";\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\nexport class AzureSASCredential {\n  /**\n   * The value of the shared access signature to be used in authentication\n   */\n  get signature() {\n    return this._signature;\n  }\n  /**\n   * Create an instance of an AzureSASCredential for use\n   * with a service client.\n   *\n   * @param signature - The initial value of the shared access signature to use in authentication\n   */\n  constructor(signature) {\n    if (!signature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n    this._signature = signature;\n  }\n  /**\n   * Change the value of the signature.\n   *\n   * Updates will take effect upon the next request after\n   * updating the signature value.\n   *\n   * @param newSignature - The new shared access signature value to be used\n   */\n  update(newSignature) {\n    if (!newSignature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n    this._signature = newSignature;\n  }\n}\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\nexport function isSASCredential(credential) {\n  return isObjectWithProperties(credential, [\"signature\"]) && typeof credential.signature === \"string\";\n}","map":{"version":3,"names":["isObjectWithProperties","AzureSASCredential","signature","_signature","constructor","Error","update","newSignature","isSASCredential","credential"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/core-auth/dist/browser/azureSASCredential.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isObjectWithProperties } from \"@azure/core-util\";\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\nexport class AzureSASCredential {\n    /**\n     * The value of the shared access signature to be used in authentication\n     */\n    get signature() {\n        return this._signature;\n    }\n    /**\n     * Create an instance of an AzureSASCredential for use\n     * with a service client.\n     *\n     * @param signature - The initial value of the shared access signature to use in authentication\n     */\n    constructor(signature) {\n        if (!signature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = signature;\n    }\n    /**\n     * Change the value of the signature.\n     *\n     * Updates will take effect upon the next request after\n     * updating the signature value.\n     *\n     * @param newSignature - The new shared access signature value to be used\n     */\n    update(newSignature) {\n        if (!newSignature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = newSignature;\n    }\n}\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\nexport function isSASCredential(credential) {\n    return (isObjectWithProperties(credential, [\"signature\"]) && typeof credential.signature === \"string\");\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,sBAAsB,QAAQ,kBAAkB;AACzD;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,CAAC;EAC5B;AACJ;AACA;EACI,IAAIC,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACC,UAAU;EAC1B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACF,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,EAAE;MACZ,MAAM,IAAIG,KAAK,CAAC,oDAAoD,CAAC;IACzE;IACA,IAAI,CAACF,UAAU,GAAGD,SAAS;EAC/B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACII,MAAMA,CAACC,YAAY,EAAE;IACjB,IAAI,CAACA,YAAY,EAAE;MACf,MAAM,IAAIF,KAAK,CAAC,oDAAoD,CAAC;IACzE;IACA,IAAI,CAACF,UAAU,GAAGI,YAAY;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,UAAU,EAAE;EACxC,OAAQT,sBAAsB,CAACS,UAAU,EAAE,CAAC,WAAW,CAAC,CAAC,IAAI,OAAOA,UAAU,CAACP,SAAS,KAAK,QAAQ;AACzG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}