{"ast":null,"code":"import { sendMessageToParent as r, sendAndHandleStatusAndReason as e } from \"../internal/communication.js\";\nimport { registerHandler as n, removeHandler as t } from \"../internal/handlers.js\";\nimport { ensureInitialized as o } from \"../internal/internalAPIs.js\";\nimport { getApiVersionTag as s } from \"../internal/telemetry.js\";\nimport { FrameContexts as c, errorNotSupportedOnPlatform as a } from \"./constants.js\";\nimport { runtime as i } from \"./runtime.js\";\nconst h = \"v2\",\n  m = \"search.queryChange\",\n  u = \"search.queryClose\",\n  l = \"search.queryExecute\";\nfunction f(r, e, t) {\n  if (o(i, c.content), !d()) throw a;\n  n(s(h, \"search.registerOnClosedHandler\"), u, r), n(s(h, \"search.registerOnExecutedHandler\"), l, e), t && n(s(h, \"search.registerOnChangeHandler\"), m, t);\n}\nfunction p() {\n  if (o(i, c.content), !d()) throw a;\n  r(s(h, \"search.unregisterHandlers\"), \"search.unregister\"), t(m), t(u), t(l);\n}\nfunction d() {\n  return !(!o(i) || !i.supports.search);\n}\nfunction g() {\n  return new Promise(r => {\n    if (o(i, c.content), !d()) throw new Error(\"Not supported\");\n    r(e(s(h, \"search.closeSearch\"), \"search.closeSearch\"));\n  });\n}\nexport { g as closeSearch, d as isSupported, f as registerHandlers, p as unregisterHandlers };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}