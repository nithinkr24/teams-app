{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getClient } from \"@azure-rest/core-client\";\nimport { createDefaultHttpClient, createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nconst TeamsExtensionScopePrefix = \"https://auth.msft.communication.azure.com/\";\nconst CommunicationClientsScopePrefix = \"https://communication.azure.com/clients/\";\nconst TeamsExtensionEndpoint = \"/access/teamsExtension/:exchangeAccessToken\";\nconst TeamsExtensionApiVersion = \"2025-06-30\";\nconst CommunicationClientsEndpoint = \"/access/entra/:exchangeAccessToken\";\nconst CommunicationClientsApiVersion = \"2025-03-02-preview\";\n/**\n * Represents a credential that exchanges an Entra token for an Azure Communication Services (ACS) token, enabling access to ACS resources.\n */\nexport class EntraTokenCredential {\n  constructor(options) {\n    this.options = options;\n    this.result = {\n      entraToken: undefined,\n      acsToken: {\n        token: \"\",\n        expiresOnTimestamp: 0\n      }\n    };\n    this.client = getClient(options.resourceEndpoint);\n    this.httpClient = createDefaultHttpClient();\n    this.options = options;\n    this.options.scopes = this.options.scopes || [\"https://communication.azure.com/clients/.default\"];\n    // immediately fetch the token to pre-warm\n    this.isPending = this.getToken();\n  }\n  getToken(options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _a;\n      if ((_a = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) {\n        return {\n          token: \"\",\n          expiresOnTimestamp: 0\n        };\n      }\n      // we're awaiting the token fetch, so we don't want to start another one\n      // however, we're ignoring the new abortSignal, unfortunately\n      if (!_this.isPending) {\n        _this.isPending = _this.getTokenInternal(options);\n      }\n      try {\n        yield _this.isPending;\n      } finally {\n        _this.isPending = null;\n      }\n      return _this.result.acsToken;\n    })();\n  }\n  getTokenInternal(options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const getTokenOptions = (options === null || options === void 0 ? void 0 : options.abortSignal) ? {\n        abortSignal: options.abortSignal\n      } : undefined;\n      const token = yield _this2.options.tokenCredential.getToken(_this2.options.scopes ? _this2.options.scopes : [\"https://communication.azure.com/clients/.default\"], getTokenOptions);\n      const currentDateTime = new Date();\n      const tokenExpiresOn = new Date(_this2.result.acsToken.expiresOnTimestamp);\n      if (token === null) {\n        _this2.result = {\n          entraToken: undefined,\n          acsToken: {\n            token: \"\",\n            expiresOnTimestamp: 0\n          }\n        };\n      } else if (_this2.result.acsToken.token === \"\" || token.token !== _this2.result.entraToken || tokenExpiresOn < currentDateTime) {\n        const acsToken = yield _this2.exchangeEntraToken(_this2.options.resourceEndpoint, token.token, getTokenOptions);\n        _this2.result = {\n          entraToken: token.token,\n          acsToken\n        };\n      }\n      return _this2.result.acsToken;\n    })();\n  }\n  dispose() {\n    this.result = {\n      entraToken: undefined,\n      acsToken: {\n        token: \"\",\n        expiresOnTimestamp: 0\n      }\n    };\n  }\n  exchangeEntraToken(resourceEndpoint, entraToken, options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const request = createPipelineRequest({\n        url: _this3.createRequestUri(resourceEndpoint),\n        method: \"POST\",\n        headers: createHttpHeaders({\n          Authorization: `Bearer ${entraToken}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }),\n        abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n        body: JSON.stringify({})\n      });\n      const response = yield _this3.client.pipeline.sendRequest(_this3.httpClient, request);\n      if (response.status !== 200 || !response.bodyAsText) {\n        throw new Error(`Service request failed. Status: ${response.status}, Body: ${response.bodyAsText}`);\n      }\n      const json = JSON.parse(response.bodyAsText);\n      return {\n        token: json.accessToken.token,\n        expiresOnTimestamp: Date.parse(json.accessToken.expiresOn)\n      };\n    })();\n  }\n  createRequestUri(resourceEndpoint) {\n    const [endpoint, apiVersion] = this.determineEndpointAndApiVersion();\n    const requestUri = `${resourceEndpoint}${endpoint}?api-version=${apiVersion}`;\n    return requestUri;\n  }\n  determineEndpointAndApiVersion() {\n    if (!this.options.scopes || this.options.scopes.length === 0) {\n      throw new Error(`Scopes validation failed. Ensure all scopes start with either {TeamsExtensionScopePrefix} or {CommunicationClientsScopePrefix}.`);\n    } else if (this.options.scopes.every(scope => scope.startsWith(TeamsExtensionScopePrefix))) {\n      return [TeamsExtensionEndpoint, TeamsExtensionApiVersion];\n    } else if (this.options.scopes.every(scope => scope.startsWith(CommunicationClientsScopePrefix))) {\n      return [CommunicationClientsEndpoint, CommunicationClientsApiVersion];\n    } else {\n      throw new Error(`Scopes validation failed. Ensure all scopes start with either {TeamsExtensionScopePrefix} or {CommunicationClientsScopePrefix}.`);\n    }\n  }\n}\n//# sourceMappingURL=entraTokenCredential.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}