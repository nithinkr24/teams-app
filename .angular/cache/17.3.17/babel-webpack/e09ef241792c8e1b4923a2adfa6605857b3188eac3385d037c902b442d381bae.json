{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { stringToUint8Array, uint8ArrayToString } from \"./bytesEncoding.js\";\nlet subtleCrypto;\n/**\n * Returns a cached reference to the Web API crypto.subtle object.\n * @internal\n */\nfunction getCrypto() {\n  if (subtleCrypto) {\n    return subtleCrypto;\n  }\n  if (!self.crypto || !self.crypto.subtle) {\n    throw new Error(\"Your browser environment does not support cryptography functions.\");\n  }\n  subtleCrypto = self.crypto.subtle;\n  return subtleCrypto;\n}\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport function computeSha256Hmac(_x, _x2, _x3) {\n  return _computeSha256Hmac.apply(this, arguments);\n}\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nfunction _computeSha256Hmac() {\n  _computeSha256Hmac = _asyncToGenerator(function* (key, stringToSign, encoding) {\n    const crypto = getCrypto();\n    const keyBytes = stringToUint8Array(key, \"base64\");\n    const stringToSignBytes = stringToUint8Array(stringToSign, \"utf-8\");\n    const cryptoKey = yield crypto.importKey(\"raw\", keyBytes, {\n      name: \"HMAC\",\n      hash: {\n        name: \"SHA-256\"\n      }\n    }, false, [\"sign\"]);\n    const signature = yield crypto.sign({\n      name: \"HMAC\",\n      hash: {\n        name: \"SHA-256\"\n      }\n    }, cryptoKey, stringToSignBytes);\n    return uint8ArrayToString(new Uint8Array(signature), encoding);\n  });\n  return _computeSha256Hmac.apply(this, arguments);\n}\nexport function computeSha256Hash(_x4, _x5) {\n  return _computeSha256Hash.apply(this, arguments);\n}\nfunction _computeSha256Hash() {\n  _computeSha256Hash = _asyncToGenerator(function* (content, encoding) {\n    const contentBytes = stringToUint8Array(content, \"utf-8\");\n    const digest = yield getCrypto().digest({\n      name: \"SHA-256\"\n    }, contentBytes);\n    return uint8ArrayToString(new Uint8Array(digest), encoding);\n  });\n  return _computeSha256Hash.apply(this, arguments);\n}","map":{"version":3,"names":["stringToUint8Array","uint8ArrayToString","subtleCrypto","getCrypto","self","crypto","subtle","Error","computeSha256Hmac","_x","_x2","_x3","_computeSha256Hmac","apply","arguments","_asyncToGenerator","key","stringToSign","encoding","keyBytes","stringToSignBytes","cryptoKey","importKey","name","hash","signature","sign","Uint8Array","computeSha256Hash","_x4","_x5","_computeSha256Hash","content","contentBytes","digest"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/util/sha256.common.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { stringToUint8Array, uint8ArrayToString } from \"./bytesEncoding.js\";\nlet subtleCrypto;\n/**\n * Returns a cached reference to the Web API crypto.subtle object.\n * @internal\n */\nfunction getCrypto() {\n    if (subtleCrypto) {\n        return subtleCrypto;\n    }\n    if (!self.crypto || !self.crypto.subtle) {\n        throw new Error(\"Your browser environment does not support cryptography functions.\");\n    }\n    subtleCrypto = self.crypto.subtle;\n    return subtleCrypto;\n}\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport async function computeSha256Hmac(key, stringToSign, encoding) {\n    const crypto = getCrypto();\n    const keyBytes = stringToUint8Array(key, \"base64\");\n    const stringToSignBytes = stringToUint8Array(stringToSign, \"utf-8\");\n    const cryptoKey = await crypto.importKey(\"raw\", keyBytes, {\n        name: \"HMAC\",\n        hash: { name: \"SHA-256\" },\n    }, false, [\"sign\"]);\n    const signature = await crypto.sign({\n        name: \"HMAC\",\n        hash: { name: \"SHA-256\" },\n    }, cryptoKey, stringToSignBytes);\n    return uint8ArrayToString(new Uint8Array(signature), encoding);\n}\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nexport async function computeSha256Hash(content, encoding) {\n    const contentBytes = stringToUint8Array(content, \"utf-8\");\n    const digest = await getCrypto().digest({ name: \"SHA-256\" }, contentBytes);\n    return uint8ArrayToString(new Uint8Array(digest), encoding);\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,kBAAkB,EAAEC,kBAAkB,QAAQ,oBAAoB;AAC3E,IAAIC,YAAY;AAChB;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAA,EAAG;EACjB,IAAID,YAAY,EAAE;IACd,OAAOA,YAAY;EACvB;EACA,IAAI,CAACE,IAAI,CAACC,MAAM,IAAI,CAACD,IAAI,CAACC,MAAM,CAACC,MAAM,EAAE;IACrC,MAAM,IAAIC,KAAK,CAAC,mEAAmE,CAAC;EACxF;EACAL,YAAY,GAAGE,IAAI,CAACC,MAAM,CAACC,MAAM;EACjC,OAAOJ,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAsBM,iBAAiBA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAcvC;AACA;AACA;AACA;AACA;AAJA,SAAAF,mBAAA;EAAAA,kBAAA,GAAAG,iBAAA,CAdO,WAAiCC,GAAG,EAAEC,YAAY,EAAEC,QAAQ,EAAE;IACjE,MAAMb,MAAM,GAAGF,SAAS,CAAC,CAAC;IAC1B,MAAMgB,QAAQ,GAAGnB,kBAAkB,CAACgB,GAAG,EAAE,QAAQ,CAAC;IAClD,MAAMI,iBAAiB,GAAGpB,kBAAkB,CAACiB,YAAY,EAAE,OAAO,CAAC;IACnE,MAAMI,SAAS,SAAShB,MAAM,CAACiB,SAAS,CAAC,KAAK,EAAEH,QAAQ,EAAE;MACtDI,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;QAAED,IAAI,EAAE;MAAU;IAC5B,CAAC,EAAE,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC;IACnB,MAAME,SAAS,SAASpB,MAAM,CAACqB,IAAI,CAAC;MAChCH,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;QAAED,IAAI,EAAE;MAAU;IAC5B,CAAC,EAAEF,SAAS,EAAED,iBAAiB,CAAC;IAChC,OAAOnB,kBAAkB,CAAC,IAAI0B,UAAU,CAACF,SAAS,CAAC,EAAEP,QAAQ,CAAC;EAClE,CAAC;EAAA,OAAAN,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAMD,gBAAsBc,iBAAiBA,CAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,kBAAA,CAAAlB,KAAA,OAAAC,SAAA;AAAA;AAItC,SAAAiB,mBAAA;EAAAA,kBAAA,GAAAhB,iBAAA,CAJM,WAAiCiB,OAAO,EAAEd,QAAQ,EAAE;IACvD,MAAMe,YAAY,GAAGjC,kBAAkB,CAACgC,OAAO,EAAE,OAAO,CAAC;IACzD,MAAME,MAAM,SAAS/B,SAAS,CAAC,CAAC,CAAC+B,MAAM,CAAC;MAAEX,IAAI,EAAE;IAAU,CAAC,EAAEU,YAAY,CAAC;IAC1E,OAAOhC,kBAAkB,CAAC,IAAI0B,UAAU,CAACO,MAAM,CAAC,EAAEhB,QAAQ,CAAC;EAC/D,CAAC;EAAA,OAAAa,kBAAA,CAAAlB,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}