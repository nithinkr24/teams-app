{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isError } from \"./util/error.js\";\nimport { custom } from \"./util/inspect.js\";\nimport { Sanitizer } from \"./util/sanitizer.js\";\nconst errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nexport class RestError extends Error {\n  constructor(message, options = {}) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = options.code;\n    this.statusCode = options.statusCode;\n    // The request and response may contain sensitive information in the headers or body.\n    // To help prevent this sensitive information being accidentally logged, the request and response\n    // properties are marked as non-enumerable here. This prevents them showing up in the output of\n    // JSON.stringify and console.log.\n    Object.defineProperty(this, \"request\", {\n      value: options.request,\n      enumerable: false\n    });\n    Object.defineProperty(this, \"response\", {\n      value: options.response,\n      enumerable: false\n    });\n    // Logging method for util.inspect in Node\n    Object.defineProperty(this, custom, {\n      value: () => {\n        // Extract non-enumerable properties and add them back. This is OK since in this output the request and\n        // response get sanitized.\n        return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(Object.assign(Object.assign({}, this), {\n          request: this.request,\n          response: this.response\n        }))}`;\n      },\n      enumerable: false\n    });\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n}\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e) {\n  if (e instanceof RestError) {\n    return true;\n  }\n  return isError(e) && e.name === \"RestError\";\n}","map":{"version":3,"names":["isError","custom","Sanitizer","errorSanitizer","RestError","Error","constructor","message","options","name","code","statusCode","Object","defineProperty","value","request","enumerable","response","sanitize","assign","setPrototypeOf","prototype","REQUEST_SEND_ERROR","PARSE_ERROR","isRestError","e"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@typespec/ts-http-runtime/dist/browser/restError.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isError } from \"./util/error.js\";\nimport { custom } from \"./util/inspect.js\";\nimport { Sanitizer } from \"./util/sanitizer.js\";\nconst errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nexport class RestError extends Error {\n    constructor(message, options = {}) {\n        super(message);\n        this.name = \"RestError\";\n        this.code = options.code;\n        this.statusCode = options.statusCode;\n        // The request and response may contain sensitive information in the headers or body.\n        // To help prevent this sensitive information being accidentally logged, the request and response\n        // properties are marked as non-enumerable here. This prevents them showing up in the output of\n        // JSON.stringify and console.log.\n        Object.defineProperty(this, \"request\", { value: options.request, enumerable: false });\n        Object.defineProperty(this, \"response\", { value: options.response, enumerable: false });\n        // Logging method for util.inspect in Node\n        Object.defineProperty(this, custom, {\n            value: () => {\n                // Extract non-enumerable properties and add them back. This is OK since in this output the request and\n                // response get sanitized.\n                return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(Object.assign(Object.assign({}, this), { request: this.request, response: this.response }))}`;\n            },\n            enumerable: false,\n        });\n        Object.setPrototypeOf(this, RestError.prototype);\n    }\n}\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e) {\n    if (e instanceof RestError) {\n        return true;\n    }\n    return isError(e) && e.name === \"RestError\";\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,OAAO,QAAQ,iBAAiB;AACzC,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,MAAMC,cAAc,GAAG,IAAID,SAAS,CAAC,CAAC;AACtC;AACA;AACA;AACA,OAAO,MAAME,SAAS,SAASC,KAAK,CAAC;EACjCC,WAAWA,CAACC,OAAO,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC/B,KAAK,CAACD,OAAO,CAAC;IACd,IAAI,CAACE,IAAI,GAAG,WAAW;IACvB,IAAI,CAACC,IAAI,GAAGF,OAAO,CAACE,IAAI;IACxB,IAAI,CAACC,UAAU,GAAGH,OAAO,CAACG,UAAU;IACpC;IACA;IACA;IACA;IACAC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;MAAEC,KAAK,EAAEN,OAAO,CAACO,OAAO;MAAEC,UAAU,EAAE;IAAM,CAAC,CAAC;IACrFJ,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MAAEC,KAAK,EAAEN,OAAO,CAACS,QAAQ;MAAED,UAAU,EAAE;IAAM,CAAC,CAAC;IACvF;IACAJ,MAAM,CAACC,cAAc,CAAC,IAAI,EAAEZ,MAAM,EAAE;MAChCa,KAAK,EAAEA,CAAA,KAAM;QACT;QACA;QACA,OAAO,cAAc,IAAI,CAACP,OAAO,OAAOJ,cAAc,CAACe,QAAQ,CAACN,MAAM,CAACO,MAAM,CAACP,MAAM,CAACO,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE;UAAEJ,OAAO,EAAE,IAAI,CAACA,OAAO;UAAEE,QAAQ,EAAE,IAAI,CAACA;QAAS,CAAC,CAAC,CAAC,EAAE;MACjK,CAAC;MACDD,UAAU,EAAE;IAChB,CAAC,CAAC;IACFJ,MAAM,CAACQ,cAAc,CAAC,IAAI,EAAEhB,SAAS,CAACiB,SAAS,CAAC;EACpD;AACJ;AACA;AACA;AACA;AACA;AACA;AACAjB,SAAS,CAACkB,kBAAkB,GAAG,oBAAoB;AACnD;AACA;AACA;AACA;AACAlB,SAAS,CAACmB,WAAW,GAAG,aAAa;AACrC;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,CAAC,EAAE;EAC3B,IAAIA,CAAC,YAAYrB,SAAS,EAAE;IACxB,OAAO,IAAI;EACf;EACA,OAAOJ,OAAO,CAACyB,CAAC,CAAC,IAAIA,CAAC,CAAChB,IAAI,KAAK,WAAW;AAC/C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}