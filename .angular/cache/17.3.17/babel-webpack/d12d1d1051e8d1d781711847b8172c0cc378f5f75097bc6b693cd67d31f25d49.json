{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { formatTimestampForThread } from '../../utils/datetime.utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../loading-spinner/loading-spinner.component\";\nfunction ThreadListComponent_ng_container_2_ng_container_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵlistener(\"click\", function ThreadListComponent_ng_container_2_ng_container_1_div_4_Template_div_click_0_listener() {\n      const thread_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r2.handleOnThreadSelected(thread_r2.id));\n    });\n    i0.ɵɵelementStart(1, \"div\", 9)(2, \"div\", 10)(3, \"div\", 11);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 12);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 13);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const thread_r2 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r2.getThreadItemContainerStyle(thread_r2.id));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(thread_r2.topic.charAt(0).toUpperCase());\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(thread_r2.topic);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.formatTimestampForThread(thread_r2.lastMessageReceivedOn, ctx_r2.currentDate), \" \");\n  }\n}\nfunction ThreadListComponent_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 5);\n    i0.ɵɵtext(2, \"Assigned to me\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 6);\n    i0.ɵɵtemplate(4, ThreadListComponent_ng_container_2_ng_container_1_div_4_Template, 9, 4, \"div\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getCurrentStatusThreads());\n  }\n}\nfunction ThreadListComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ThreadListComponent_ng_container_2_ng_container_1_Template, 5, 1, \"ng-container\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    const noThreadsTemplate_r4 = i0.ɵɵreference(6);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.getCurrentStatusThreads().length > 0)(\"ngIfElse\", noThreadsTemplate_r4);\n  }\n}\nfunction ThreadListComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-loading-spinner\");\n  }\n}\nfunction ThreadListComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \"No threads\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let ThreadListComponent = /*#__PURE__*/(() => {\n  var _ThreadListComponent;\n  class ThreadListComponent {\n    constructor() {\n      this.threads = [];\n      this.isLoading = false;\n      this.tabs = [];\n      this.selectedTab = '';\n      this.onThreadSelected = new EventEmitter();\n      this.onStatusTabSelected = new EventEmitter();\n      this.destroy$ = new Subject();\n      this.currentDate = new Date();\n    }\n    ngOnInit() {\n      // Select the first thread when the component is mounted\n      if (!this.selectedThreadId && this.threads && this.threads.length > 0) {\n        const firstThread = this.threads.find(thread => thread.status === this.selectedTab.toLowerCase());\n        if (firstThread) {\n          this.handleOnThreadSelected(firstThread.id);\n        }\n      }\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    handleOnThreadSelected(threadId) {\n      this.onThreadSelected.emit(threadId);\n    }\n    handleOnStatusTabSelected(tabValue) {\n      this.onStatusTabSelected.emit(tabValue);\n    }\n    getCurrentStatusThreads() {\n      return this.threads.filter(thread => thread.status === this.selectedTab.toLowerCase());\n    }\n    getThreadItemContainerStyle(threadId) {\n      return threadId === this.selectedThreadId ? 'selected' : 'unselected';\n    }\n    formatTimestampForThread(timestamp, now) {\n      return formatTimestampForThread(timestamp, now);\n    }\n  }\n  _ThreadListComponent = ThreadListComponent;\n  _ThreadListComponent.ɵfac = function ThreadListComponent_Factory(t) {\n    return new (t || _ThreadListComponent)();\n  };\n  _ThreadListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _ThreadListComponent,\n    selectors: [[\"app-thread-list\"]],\n    inputs: {\n      threads: \"threads\",\n      isLoading: \"isLoading\",\n      selectedThreadId: \"selectedThreadId\",\n      tabs: \"tabs\",\n      selectedTab: \"selectedTab\"\n    },\n    outputs: {\n      onThreadSelected: \"onThreadSelected\",\n      onStatusTabSelected: \"onStatusTabSelected\"\n    },\n    decls: 7,\n    vars: 2,\n    consts: [[\"loadingTemplate\", \"\"], [\"noThreadsTemplate\", \"\"], [1, \"thread-list-container\"], [1, \"thread-list-content\"], [4, \"ngIf\", \"ngIfElse\"], [1, \"assigned-to-me-label\"], [1, \"thread-list\"], [\"class\", \"thread-item\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"thread-item\", 3, \"click\", \"ngClass\"], [1, \"thread-item-content\"], [1, \"persona\"], [1, \"avatar\"], [1, \"persona-name\"], [1, \"timestamp\"], [1, \"no-threads-label\"]],\n    template: function ThreadListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3);\n        i0.ɵɵtemplate(2, ThreadListComponent_ng_container_2_Template, 2, 2, \"ng-container\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(3, ThreadListComponent_ng_template_3_Template, 1, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(5, ThreadListComponent_ng_template_5_Template, 2, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const loadingTemplate_r5 = i0.ɵɵreference(4);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoading)(\"ngIfElse\", loadingTemplate_r5);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.LoadingSpinnerComponent],\n    styles: [\".thread-list-container[_ngcontent-%COMP%]{width:300px;min-width:250px;max-width:350px;border-right:1px solid #e1dfdd;display:flex;flex-direction:column;background-color:#faf9f8;height:100vh;overflow:hidden}.thread-list-content[_ngcontent-%COMP%]{flex:1;overflow-y:auto;scrollbar-width:thin;-ms-overflow-style:-ms-autohiding-scrollbar}.thread-list-content[_ngcontent-%COMP%]::-webkit-scrollbar{width:6px}.thread-list-content[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{background-color:#c8c6c4;border-radius:3px}.thread-list-content[_ngcontent-%COMP%]::-webkit-scrollbar-track{background-color:transparent}.assigned-to-me-label[_ngcontent-%COMP%]{padding:16px;font-weight:600;color:#605e5c;border-bottom:1px solid #e1dfdd;position:-webkit-sticky;position:-webkit-sticky;position:sticky;top:0;background-color:#faf9f8;z-index:1}.thread-list[_ngcontent-%COMP%]{padding:0}.thread-item[_ngcontent-%COMP%]{padding:12px 16px;cursor:pointer;border-bottom:1px solid #e1dfdd;transition:background-color .2s}.thread-item[_ngcontent-%COMP%]:hover{background-color:#f3f2f1}.thread-item.selected[_ngcontent-%COMP%]{background-color:#deecf9;border-left:3px solid #0078d4}.thread-item.unselected[_ngcontent-%COMP%]{background-color:transparent}.thread-item-content[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:8px}.persona[_ngcontent-%COMP%]{display:flex;align-items:center;gap:12px}.avatar[_ngcontent-%COMP%]{width:32px;height:32px;border-radius:50%;background-color:#0078d4;color:#fff;display:flex;align-items:center;justify-content:center;font-weight:600;font-size:14px}.persona-name[_ngcontent-%COMP%]{font-weight:500;color:#323130;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;max-width:200px}.timestamp[_ngcontent-%COMP%]{font-size:12px;color:#605e5c;margin-left:44px}.no-threads-label[_ngcontent-%COMP%]{padding:16px;text-align:center;color:#605e5c;font-style:italic}\"]\n  });\n  return ThreadListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}