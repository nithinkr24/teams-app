{"ast":null,"code":"import { __awaiter as i } from \"../../../../node_modules/.pnpm/@rollup_plugin-typescript@11.1.6_rollup@4.24.4_tslib@2.6.3_typescript@4.9.5/node_modules/tslib/tslib.es6.js\";\nimport { ORIGIN_LIST_FETCH_TIMEOUT_IN_MS as t, validOriginsCdnEndpoint as r, validOriginsFallback as n } from \"./constants.js\";\nimport { GlobalVars as e } from \"./globalVars.js\";\nimport { getLogger as o } from \"./telemetry.js\";\nimport { inServerSideRenderingEnvironment as l, isValidHttpsURL as s } from \"./utils.js\";\nlet a = [];\nconst u = o(\"validateOrigin\");\nlet c;\nfunction f() {\n  return i(this, void 0, void 0, function* () {\n    c || (yield g());\n  });\n}\nfunction d() {\n  return 0 === a.length;\n}\nfunction g(e = !1) {\n  return i(this, void 0, void 0, function* () {\n    if (!d() && !e) return a;\n    if (c) return c;\n    if (l()) return a = n, n;\n    {\n      u(\"Initiating fetch call to acquire valid origins list from CDN\");\n      const i = new AbortController(),\n        e = setTimeout(() => i.abort(), t);\n      return c = fetch(r, {\n        signal: i.signal\n      }).then(i => {\n        if (clearTimeout(e), !i.ok) throw new Error(\"Invalid Response from Fetch Call\");\n        return u(\"Fetch call completed and retrieved valid origins list from CDN\"), i.json().then(i => {\n          if (function (i) {\n            let t = JSON.parse(i);\n            try {\n              t = JSON.parse(i);\n            } catch (i) {\n              return !1;\n            }\n            if (!t.validOrigins) return !1;\n            for (const i of t.validOrigins) try {\n              new URL(\"https://\" + i);\n            } catch (t) {\n              return u(\"isValidOriginsFromCDN call failed to validate origin: %s\", i), !1;\n            }\n            return !0;\n          }(JSON.stringify(i))) return a = i.validOrigins, a;\n          throw new Error(\"Valid origins list retrieved from CDN is invalid\");\n        });\n      }).catch(i => (\"AbortError\" === i.name ? u(`validOrigins fetch call to CDN failed due to Timeout of ${t} ms. Defaulting to fallback list`) : u(\"validOrigins fetch call to CDN failed with error: %s. Defaulting to fallback list\", i), a = n, a)), c;\n    }\n  });\n}\nfunction p(i, t) {\n  if (\"*.\" === i.substring(0, 2)) {\n    const r = i.substring(1);\n    if (t.length > r.length && t.split(\".\").length === r.split(\".\").length && t.substring(t.length - r.length) === r) return !0;\n  } else if (i === t) return !0;\n  return !1;\n}\nfunction h(i, t) {\n  const r = d() ? n : a;\n  return m(i, r) ? Promise.resolve(!0) : (u(\"Origin %s is not in the local valid origins list, fetching from CDN\", i), g(t).then(t => m(i, t)));\n}\nfunction m(i, t) {\n  if (!s(i)) return u(\"Origin %s is invalid because it is not using https protocol. Protocol being used: %s\", i, i.protocol), !1;\n  const r = i.host;\n  if (t.some(i => p(i, r))) return !0;\n  for (const i of e.additionalValidOrigins) {\n    if (p(\"https://\" === i.substring(0, 8) ? i.substring(8) : i, r)) return !0;\n  }\n  return u(\"Origin %s is invalid because it is not an origin approved by this library or included in the call to app.initialize.\\nOrigins approved by this library: %o\\nOrigins included in app.initialize: %o\", i, t, e.additionalValidOrigins), !1;\n}\nf();\nexport { f as prefetchOriginsFromCDN, h as validateOrigin };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}