{"ast":null,"code":"import { __awaiter as n } from \"../../../../node_modules/.pnpm/@rollup_plugin-typescript@11.1.6_rollup@4.24.4_tslib@2.6.3_typescript@4.9.5/node_modules/tslib/tslib.es6.js\";\nimport { isChildProxyingEnabled as i, getCurrentFeatureFlagsState as o } from \"../public/featureFlags.js\";\nimport { flushMessageQueue as s, getMessageIdsAsLogString as e } from \"./communicationUtils.js\";\nimport { callHandler as r } from \"./handlers.js\";\nimport { deserializeMessageRequest as t, serializeMessageResponse as d } from \"./messageObjects.js\";\nimport { getLogger as a, getApiVersionTag as u } from \"./telemetry.js\";\nconst c = a(\"childProxyingCommunication\");\nclass l {}\nfunction g() {\n  l.window = null, l.origin = null, l.messageQueue = [];\n}\nfunction m() {\n  return !!i() && !!l.window;\n}\nfunction f(n, o) {\n  return !!i() && (l.window && !l.window.closed && n !== l.window || (l.window = n, l.origin = o), l.window && l.window.closed ? (l.window = null, l.origin = null, !1) : l.window === n);\n}\nfunction w(i, d, a, c) {\n  return n(this, void 0, void 0, function* () {\n    l.window === d && (s(l.window, l.origin, l.messageQueue, \"child\"), function (n, i, s) {\n      if (void 0 === n.data.id || void 0 === n.data.func) return;\n      const d = t(n.data),\n        [a, c] = r(d.func, d.args);\n      if (a && void 0 !== c) return p(\"Handler called in response to message %s from child. Returning response from handler to child, action: %s.\", e(d), d.func), void h(d.id, d.uuid, Array.isArray(c) ? c : [c]);\n      p(\"No handler for message %s from child found; relaying message on to parent, action: %s. Relayed message will have a new id.\", e(d), d.func), function (n, i, s) {\n        const r = i(u(\"v2\", \"tasks.startTask\"), n.func, n.args, !0, n.teamsJsInstanceId),\n          t = l.origin;\n        s(r.uuid, (...i) => {\n          if (!l.window) return;\n          if (!o().disableEnforceOriginMatchForChildResponses && t !== l.origin) return void p(\"Origin of child window has changed, not sending response back to child window\");\n          const s = i.pop();\n          p(\"Message from parent being relayed to child, id: %s\", e(n)), h(n.id, n.uuid, i, s);\n        });\n      }(d, i, s);\n    }(i, a, c));\n  });\n}\nl.messageQueue = [];\nconst p = c.extend(\"handleIncomingMessageFromChild\");\nfunction h(n, i, o, s) {\n  const r = l.window,\n    t = function (n, i, o, s) {\n      return {\n        id: n,\n        uuid: i,\n        args: o || [],\n        isPartialResponse: s\n      };\n    }(n, i, o, s),\n    a = d(t),\n    u = l.origin;\n  r && u && (p(\"Sending message %s to %s via postMessage, args = %o\", e(a), \"child\", a.args), r.postMessage(a, u));\n}\nfunction v(n, i) {\n  const o = l.window,\n    s = function (n, i) {\n      return {\n        func: n,\n        args: i || []\n      };\n    }(n, i),\n    e = l.origin;\n  o && e ? o.postMessage(s, e) : l.messageQueue.push(s);\n}\nexport { w as handleIncomingMessageFromChild, v as sendMessageEventToChild, m as shouldEventBeRelayedToChild, f as shouldProcessChildMessage, g as uninitializeChildCommunication };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}