{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Tests an Identifier to determine whether it implements CommunicationUserIdentifier.\n *\n * @param identifier - The assumed CommunicationUserIdentifier to be tested.\n */\nexport const isCommunicationUserIdentifier = identifier => {\n  return typeof identifier.communicationUserId === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements PhoneNumberIdentifier.\n *\n * @param identifier - The assumed PhoneNumberIdentifier to be tested.\n */\nexport const isPhoneNumberIdentifier = identifier => {\n  return typeof identifier.phoneNumber === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements MicrosoftTeamsUserIdentifier.\n *\n * @param identifier - The assumed available to be tested.\n */\nexport const isMicrosoftTeamsUserIdentifier = identifier => {\n  return typeof identifier.microsoftTeamsUserId === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements MicrosoftTeamsAppIdentifier.\n *\n * @param identifier - The assumed available to be tested.\n */\nexport const isMicrosoftTeamsAppIdentifier = identifier => {\n  return typeof identifier.teamsAppId === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements TeamsExtensionUserIdentifier.\n *\n * @param identifier - The assumed available to be tested.\n */\nexport const isTeamsExtensionUserIdentifier = identifier => {\n  const userIdExists = typeof identifier.userId === \"string\";\n  const tenantIdExists = typeof identifier.tenantId === \"string\";\n  const resourceIdExists = typeof identifier.resourceId === \"string\";\n  return userIdExists && tenantIdExists && resourceIdExists;\n};\n/**\n * Tests an Identifier to determine whether it implements UnknownIdentifier.\n *\n * @param identifier - The assumed UnknownIdentifier to be tested.\n */\nexport const isUnknownIdentifier = identifier => {\n  return typeof identifier.id === \"string\";\n};\n/**\n * Returns the CommunicationIdentifierKind for a given CommunicationIdentifier. Returns undefined if the kind couldn't be inferred.\n *\n * @param identifier - The identifier whose kind is to be inferred.\n */\nexport const getIdentifierKind = identifier => {\n  if (isCommunicationUserIdentifier(identifier)) {\n    return Object.assign(Object.assign({}, identifier), {\n      kind: \"communicationUser\"\n    });\n  }\n  if (isPhoneNumberIdentifier(identifier)) {\n    return Object.assign(Object.assign({}, identifier), {\n      kind: \"phoneNumber\"\n    });\n  }\n  if (isMicrosoftTeamsUserIdentifier(identifier)) {\n    return Object.assign(Object.assign({}, identifier), {\n      kind: \"microsoftTeamsUser\"\n    });\n  }\n  if (isMicrosoftTeamsAppIdentifier(identifier)) {\n    return Object.assign(Object.assign({}, identifier), {\n      kind: \"microsoftTeamsApp\"\n    });\n  }\n  if (isTeamsExtensionUserIdentifier(identifier)) {\n    return Object.assign(Object.assign({}, identifier), {\n      kind: \"teamsExtensionUser\"\n    });\n  }\n  return Object.assign(Object.assign({}, identifier), {\n    kind: \"unknown\"\n  });\n};\n/**\n * Returns the rawId for a given CommunicationIdentifier. You can use the rawId for encoding the identifier and then use it as a key in a database.\n *\n * @param identifier - The identifier to be translated to its rawId.\n */\nexport const getIdentifierRawId = identifier => {\n  const identifierKind = getIdentifierKind(identifier);\n  switch (identifierKind.kind) {\n    case \"communicationUser\":\n      return identifierKind.communicationUserId;\n    case \"microsoftTeamsUser\":\n      {\n        const {\n          microsoftTeamsUserId,\n          rawId,\n          cloud,\n          isAnonymous\n        } = identifierKind;\n        if (rawId) return rawId;\n        if (isAnonymous) return `8:teamsvisitor:${microsoftTeamsUserId}`;\n        switch (cloud) {\n          case \"dod\":\n            return `8:dod:${microsoftTeamsUserId}`;\n          case \"gcch\":\n            return `8:gcch:${microsoftTeamsUserId}`;\n          case \"public\":\n            return `8:orgid:${microsoftTeamsUserId}`;\n        }\n        return `8:orgid:${microsoftTeamsUserId}`;\n      }\n    case \"microsoftTeamsApp\":\n      {\n        const {\n          teamsAppId,\n          rawId,\n          cloud\n        } = identifierKind;\n        if (rawId) return rawId;\n        switch (cloud) {\n          case \"dod\":\n            return `28:dod:${teamsAppId}`;\n          case \"gcch\":\n            return `28:gcch:${teamsAppId}`;\n        }\n        return `28:orgid:${teamsAppId}`;\n      }\n    case \"phoneNumber\":\n      {\n        const {\n          phoneNumber,\n          rawId\n        } = identifierKind;\n        if (rawId) return rawId;\n        return `4:${phoneNumber}`;\n      }\n    case \"teamsExtensionUser\":\n      {\n        const {\n          userId,\n          tenantId,\n          resourceId,\n          rawId,\n          cloud\n        } = identifierKind;\n        if (rawId) return rawId;\n        switch (cloud) {\n          case \"dod\":\n            return `8:dod-acs:${resourceId}_${tenantId}_${userId}`;\n          case \"gcch\":\n            return `8:gcch-acs:${resourceId}_${tenantId}_${userId}`;\n        }\n        return `8:acs:${resourceId}_${tenantId}_${userId}`;\n      }\n    case \"unknown\":\n      {\n        return identifierKind.id;\n      }\n  }\n};\nconst buildMicrosoftTeamsAppIdentifier = (teamsAppId, cloud) => {\n  return {\n    kind: \"microsoftTeamsApp\",\n    teamsAppId: teamsAppId,\n    cloud: cloud\n  };\n};\nconst buildMicrosoftTeamsUserIdentifier = (id, cloud, isAnonymous) => {\n  return {\n    kind: \"microsoftTeamsUser\",\n    microsoftTeamsUserId: id,\n    isAnonymous: isAnonymous,\n    cloud: cloud\n  };\n};\nconst buildTeamsExtensionUserOrCommunicationUserIdentifier = (rawId, suffix, cloud) => {\n  const segments = suffix.split(\"_\");\n  if (segments.length !== 3) {\n    return {\n      kind: \"communicationUser\",\n      communicationUserId: rawId\n    };\n  }\n  const resourceId = segments[0];\n  const tenantId = segments[1];\n  const userId = segments[2];\n  return {\n    kind: \"teamsExtensionUser\",\n    userId: userId,\n    tenantId: tenantId,\n    resourceId: resourceId,\n    cloud: cloud\n  };\n};\nconst buildPhoneNumberIdentifier = rawId => {\n  const phoneNumber = rawId.substring(\"4:\".length);\n  const isAnonymous = phoneNumber === \"anonymous\";\n  const assertedIdIndex = isAnonymous ? -1 : phoneNumber.lastIndexOf(\"_\") + 1;\n  const hasAssertedId = assertedIdIndex > 0 && assertedIdIndex < phoneNumber.length;\n  const assertedId = hasAssertedId ? phoneNumber.substring(assertedIdIndex) : undefined;\n  return {\n    kind: \"phoneNumber\",\n    phoneNumber: phoneNumber,\n    isAnonymous: isAnonymous,\n    assertedId: assertedId\n  };\n};\n/**\n * Creates a CommunicationIdentifierKind from a given rawId. When storing rawIds use this function to restore the identifier that was encoded in the rawId.\n *\n * @param rawId - The rawId to be translated to its identifier representation.\n */\nexport const createIdentifierFromRawId = rawId => {\n  if (rawId.startsWith(\"4:\")) {\n    return buildPhoneNumberIdentifier(rawId);\n  }\n  const segments = rawId.split(\":\");\n  if (segments.length !== 3) {\n    return {\n      kind: \"unknown\",\n      id: rawId\n    };\n  }\n  const prefix = `${segments[0]}:${segments[1]}:`;\n  const suffix = segments[2];\n  switch (prefix) {\n    case \"8:teamsvisitor:\":\n      return {\n        kind: \"microsoftTeamsUser\",\n        microsoftTeamsUserId: suffix,\n        isAnonymous: true\n      };\n    case \"8:orgid:\":\n      return buildMicrosoftTeamsUserIdentifier(suffix, \"public\", false);\n    case \"8:dod:\":\n      return buildMicrosoftTeamsUserIdentifier(suffix, \"dod\", false);\n    case \"8:gcch:\":\n      return buildMicrosoftTeamsUserIdentifier(suffix, \"gcch\", false);\n    case \"8:acs:\":\n      return buildTeamsExtensionUserOrCommunicationUserIdentifier(rawId, suffix, \"public\");\n    case \"8:dod-acs:\":\n      return buildTeamsExtensionUserOrCommunicationUserIdentifier(rawId, suffix, \"dod\");\n    case \"8:gcch-acs:\":\n      return buildTeamsExtensionUserOrCommunicationUserIdentifier(rawId, suffix, \"gcch\");\n    case \"8:spool:\":\n      return {\n        kind: \"communicationUser\",\n        communicationUserId: rawId\n      };\n    case \"28:orgid:\":\n      return buildMicrosoftTeamsAppIdentifier(suffix, \"public\");\n    case \"28:gcch:\":\n      return buildMicrosoftTeamsAppIdentifier(suffix, \"gcch\");\n    case \"28:dod:\":\n      return buildMicrosoftTeamsAppIdentifier(suffix, \"dod\");\n  }\n  return {\n    kind: \"unknown\",\n    id: rawId\n  };\n};\n//# sourceMappingURL=identifierModels.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}