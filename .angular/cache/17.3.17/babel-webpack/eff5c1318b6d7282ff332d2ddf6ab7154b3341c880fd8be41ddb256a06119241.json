{"ast":null,"code":"import _asyncToGenerator from \"D:/Project/github-teams/teams-app-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { shaHMAC, shaHash } from \"./cryptoUtils.js\";\nimport { isNodeLike } from \"@azure/core-util\";\n/**\n * CommunicationKeyCredentialPolicy provides a means of signing requests made through\n * the SmsClient.\n */\nconst communicationAccessKeyCredentialPolicy = \"CommunicationAccessKeyCredentialPolicy\";\n/**\n * Creates an HTTP pipeline policy to authenticate a request using a `KeyCredential`.\n * @hidden\n *\n * @param credential - The key credential.\n */\nexport function createCommunicationAccessKeyCredentialPolicy(credential) {\n  return {\n    name: communicationAccessKeyCredentialPolicy,\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        var _a;\n        const verb = request.method.toUpperCase();\n        const utcNow = new Date().toUTCString();\n        const contentHash = yield shaHash(((_a = request.body) === null || _a === void 0 ? void 0 : _a.toString()) || \"\");\n        const dateHeader = \"x-ms-date\";\n        const signedHeaders = `${dateHeader};host;x-ms-content-sha256`;\n        const url = new URL(request.url);\n        const query = url.searchParams.toString();\n        const urlPathAndQuery = query ? `${url.pathname}?${query}` : url.pathname;\n        const port = url.port;\n        const hostAndPort = port ? `${url.host}:${port}` : url.host;\n        const stringToSign = `${verb}\\n${urlPathAndQuery}\\n${utcNow};${hostAndPort};${contentHash}`;\n        const signature = yield shaHMAC(credential.key, stringToSign);\n        if (isNodeLike) {\n          request.headers.set(\"Host\", hostAndPort || \"\");\n        }\n        request.headers.set(dateHeader, utcNow);\n        request.headers.set(\"x-ms-content-sha256\", contentHash);\n        request.headers.set(\"Authorization\", `HMAC-SHA256 SignedHeaders=${signedHeaders}&Signature=${signature}`);\n        return next(request);\n      })();\n    }\n  };\n}","map":{"version":3,"names":["shaHMAC","shaHash","isNodeLike","communicationAccessKeyCredentialPolicy","createCommunicationAccessKeyCredentialPolicy","credential","name","sendRequest","request","next","_asyncToGenerator","_a","verb","method","toUpperCase","utcNow","Date","toUTCString","contentHash","body","toString","dateHeader","signedHeaders","url","URL","query","searchParams","urlPathAndQuery","pathname","port","hostAndPort","host","stringToSign","signature","key","headers","set"],"sources":["D:/Project/github-teams/teams-app-new/node_modules/@azure/communication-common/dist/browser/credential/communicationAccessKeyCredentialPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { shaHMAC, shaHash } from \"./cryptoUtils.js\";\nimport { isNodeLike } from \"@azure/core-util\";\n/**\n * CommunicationKeyCredentialPolicy provides a means of signing requests made through\n * the SmsClient.\n */\nconst communicationAccessKeyCredentialPolicy = \"CommunicationAccessKeyCredentialPolicy\";\n/**\n * Creates an HTTP pipeline policy to authenticate a request using a `KeyCredential`.\n * @hidden\n *\n * @param credential - The key credential.\n */\nexport function createCommunicationAccessKeyCredentialPolicy(credential) {\n    return {\n        name: communicationAccessKeyCredentialPolicy,\n        async sendRequest(request, next) {\n            var _a;\n            const verb = request.method.toUpperCase();\n            const utcNow = new Date().toUTCString();\n            const contentHash = await shaHash(((_a = request.body) === null || _a === void 0 ? void 0 : _a.toString()) || \"\");\n            const dateHeader = \"x-ms-date\";\n            const signedHeaders = `${dateHeader};host;x-ms-content-sha256`;\n            const url = new URL(request.url);\n            const query = url.searchParams.toString();\n            const urlPathAndQuery = query ? `${url.pathname}?${query}` : url.pathname;\n            const port = url.port;\n            const hostAndPort = port ? `${url.host}:${port}` : url.host;\n            const stringToSign = `${verb}\\n${urlPathAndQuery}\\n${utcNow};${hostAndPort};${contentHash}`;\n            const signature = await shaHMAC(credential.key, stringToSign);\n            if (isNodeLike) {\n                request.headers.set(\"Host\", hostAndPort || \"\");\n            }\n            request.headers.set(dateHeader, utcNow);\n            request.headers.set(\"x-ms-content-sha256\", contentHash);\n            request.headers.set(\"Authorization\", `HMAC-SHA256 SignedHeaders=${signedHeaders}&Signature=${signature}`);\n            return next(request);\n        },\n    };\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,OAAO,EAAEC,OAAO,QAAQ,kBAAkB;AACnD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C;AACA;AACA;AACA;AACA,MAAMC,sCAAsC,GAAG,wCAAwC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,4CAA4CA,CAACC,UAAU,EAAE;EACrE,OAAO;IACHC,IAAI,EAAEH,sCAAsC;IACtCI,WAAWA,CAACC,OAAO,EAAEC,IAAI,EAAE;MAAA,OAAAC,iBAAA;QAC7B,IAAIC,EAAE;QACN,MAAMC,IAAI,GAAGJ,OAAO,CAACK,MAAM,CAACC,WAAW,CAAC,CAAC;QACzC,MAAMC,MAAM,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACvC,MAAMC,WAAW,SAASjB,OAAO,CAAC,CAAC,CAACU,EAAE,GAAGH,OAAO,CAACW,IAAI,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACS,QAAQ,CAAC,CAAC,KAAK,EAAE,CAAC;QACjH,MAAMC,UAAU,GAAG,WAAW;QAC9B,MAAMC,aAAa,GAAG,GAAGD,UAAU,2BAA2B;QAC9D,MAAME,GAAG,GAAG,IAAIC,GAAG,CAAChB,OAAO,CAACe,GAAG,CAAC;QAChC,MAAME,KAAK,GAAGF,GAAG,CAACG,YAAY,CAACN,QAAQ,CAAC,CAAC;QACzC,MAAMO,eAAe,GAAGF,KAAK,GAAG,GAAGF,GAAG,CAACK,QAAQ,IAAIH,KAAK,EAAE,GAAGF,GAAG,CAACK,QAAQ;QACzE,MAAMC,IAAI,GAAGN,GAAG,CAACM,IAAI;QACrB,MAAMC,WAAW,GAAGD,IAAI,GAAG,GAAGN,GAAG,CAACQ,IAAI,IAAIF,IAAI,EAAE,GAAGN,GAAG,CAACQ,IAAI;QAC3D,MAAMC,YAAY,GAAG,GAAGpB,IAAI,KAAKe,eAAe,KAAKZ,MAAM,IAAIe,WAAW,IAAIZ,WAAW,EAAE;QAC3F,MAAMe,SAAS,SAASjC,OAAO,CAACK,UAAU,CAAC6B,GAAG,EAAEF,YAAY,CAAC;QAC7D,IAAI9B,UAAU,EAAE;UACZM,OAAO,CAAC2B,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEN,WAAW,IAAI,EAAE,CAAC;QAClD;QACAtB,OAAO,CAAC2B,OAAO,CAACC,GAAG,CAACf,UAAU,EAAEN,MAAM,CAAC;QACvCP,OAAO,CAAC2B,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAElB,WAAW,CAAC;QACvDV,OAAO,CAAC2B,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,6BAA6Bd,aAAa,cAAcW,SAAS,EAAE,CAAC;QACzG,OAAOxB,IAAI,CAACD,OAAO,CAAC;MAAC;IACzB;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}