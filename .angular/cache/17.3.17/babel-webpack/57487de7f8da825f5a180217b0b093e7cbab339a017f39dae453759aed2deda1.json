{"ast":null,"code":"import { appInitializeHelper as e } from \"../../internal/appHelpers.js\";\nimport { sendMessageToParent as r, sendAndHandleStatusAndReason as t } from \"../../internal/communication.js\";\nimport { registerHandlerHelper as n } from \"../../internal/handlers.js\";\nimport { ensureInitialized as o } from \"../../internal/internalAPIs.js\";\nimport { setCurrentFrameHelper as i, getConfigHelper as s, navigateCrossDomainHelper as a, isAppNavigationParametersObject as m, convertNavigateToAppParamsToAppNavigationParameters as p, convertAppNavigationParametersToNavigateToAppParams as u, shareDeepLinkHelper as c, pagesTelemetryVersionNumber as f } from \"../../internal/pagesHelpers.js\";\nimport { getApiVersionTag as l } from \"../../internal/telemetry.js\";\nimport { isNullOrUndefined as g } from \"../../internal/typeCheckUtilities.js\";\nimport { createTeamsAppLink as d } from \"../../internal/utils.js\";\nimport { prefetchOriginsFromCDN as j } from \"../../internal/validOrigins.js\";\nimport { errorNotSupportedOnPlatform as k, FrameContexts as v } from \"../constants.js\";\nimport { runtime as x } from \"../runtime.js\";\nimport * as L from \"./appButton.js\";\nexport { L as appButton };\nimport * as F from \"./backStack.js\";\nexport { F as backStack };\nimport * as h from \"./config.js\";\nexport { h as config };\nimport * as C from \"./currentApp.js\";\nexport { C as currentApp };\nimport * as P from \"./fullTrust.js\";\nexport { P as fullTrust };\nimport * as y from \"./tabs.js\";\nexport { y as tabs };\nvar A, T;\nfunction w(e) {\n  const t = l(f, \"pages.returnFocus\");\n  if (o(x), !z()) throw k;\n  if (void 0 === e && r(t, \"returnFocus\", [!1]), \"boolean\" == typeof e) r(t, \"returnFocus\", [e]);else switch (e) {\n    case T.PreviousLandmark:\n    case T.GoToActivityFeed:\n      r(t, \"returnFocus\", [!1, e]);\n      break;\n    case T.NextLandmark:\n      r(t, \"returnFocus\", [!0, e]);\n  }\n}\nfunction N(e) {\n  n(l(f, \"pages.registerFocusEnterHandler\"), \"focusEnter\", e, [], () => {\n    if (!z()) throw k;\n  });\n}\nfunction b(e) {\n  i(l(f, \"pages.setCurrentFrame\"), e);\n}\nfunction H(r, t, n) {\n  j(), e(l(f, \"pages.initializeWithFrameContext\"), n).then(() => t && t()), b(r);\n}\nfunction S() {\n  return s(l(f, \"pages.getConfig.\"));\n}\nfunction D(e) {\n  return a(l(f, \"pages.navigateCrossDomain\"), e);\n}\nfunction G(e) {\n  return new Promise(r => {\n    if (o(x, v.content, v.sidePanel, v.settings, v.task, v.stage, v.meetingStage), !z()) throw k;\n    const n = l(f, \"pages.navigateToApp\");\n    if (x.isLegacyTeams) {\n      const o = m(e) ? e : p(e);\n      r(t(n, \"executeDeepLink\", d(o)));\n    } else {\n      const o = m(e) ? u(e) : e;\n      r(t(n, \"pages.navigateToApp\", o));\n    }\n  });\n}\nfunction E(e) {\n  return c(l(f, \"pages.shareDeepLink\"), e);\n}\nfunction R(e) {\n  n(l(f, \"pages.registerFullScreenHandler\"), \"fullScreenChange\", e, [], () => {\n    if (!g(e) && !z()) throw k;\n  });\n}\nfunction z() {\n  return !(!o(x) || !x.supports.pages);\n}\n!function (e) {\n  e[e.PreviousLandmark = 0] = \"PreviousLandmark\", e[e.NextLandmark = 1] = \"NextLandmark\", e[e.Read = 2] = \"Read\", e[e.Compose = 3] = \"Compose\";\n}(A || (A = {})), function (e) {\n  e[e.PreviousLandmark = 0] = \"PreviousLandmark\", e[e.NextLandmark = 1] = \"NextLandmark\", e[e.GoToActivityFeed = 2] = \"GoToActivityFeed\";\n}(T || (T = {}));\nexport { A as EnterFocusType, T as ReturnFocusType, S as getConfig, H as initializeWithFrameContext, z as isSupported, D as navigateCrossDomain, G as navigateToApp, N as registerFocusEnterHandler, R as registerFullScreenHandler, w as returnFocus, b as setCurrentFrame, E as shareDeepLink };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}